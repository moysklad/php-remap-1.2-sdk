<?php
/**
 * ChequePrinter
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChequePrinter Class Doc Comment
 *
 * @category Class
 * @description Информация о чековом принтере
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChequePrinter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChequePrinter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'driver' => '\OpenAPI\Client\Model\Driver',
        'firmware_version' => 'string',
        'fiscal_data_version' => 'string',
        'fiscal_memory' => '\OpenAPI\Client\Model\FiscalMemory',
        'name' => 'string',
        'serial' => 'string',
        'vendor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'driver' => null,
        'firmware_version' => null,
        'fiscal_data_version' => null,
        'fiscal_memory' => null,
        'name' => null,
        'serial' => null,
        'vendor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'driver' => false,
        'firmware_version' => false,
        'fiscal_data_version' => false,
        'fiscal_memory' => false,
        'name' => false,
        'serial' => false,
        'vendor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'driver' => 'driver',
        'firmware_version' => 'firmwareVersion',
        'fiscal_data_version' => 'fiscalDataVersion',
        'fiscal_memory' => 'fiscalMemory',
        'name' => 'name',
        'serial' => 'serial',
        'vendor' => 'vendor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'driver' => 'setDriver',
        'firmware_version' => 'setFirmwareVersion',
        'fiscal_data_version' => 'setFiscalDataVersion',
        'fiscal_memory' => 'setFiscalMemory',
        'name' => 'setName',
        'serial' => 'setSerial',
        'vendor' => 'setVendor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'driver' => 'getDriver',
        'firmware_version' => 'getFirmwareVersion',
        'fiscal_data_version' => 'getFiscalDataVersion',
        'fiscal_memory' => 'getFiscalMemory',
        'name' => 'getName',
        'serial' => 'getSerial',
        'vendor' => 'getVendor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('firmware_version', $data ?? [], null);
        $this->setIfExists('fiscal_data_version', $data ?? [], null);
        $this->setIfExists('fiscal_memory', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['firmware_version']) && (mb_strlen($this->container['firmware_version']) > 255)) {
            $invalidProperties[] = "invalid value for 'firmware_version', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fiscal_data_version']) && (mb_strlen($this->container['fiscal_data_version']) > 255)) {
            $invalidProperties[] = "invalid value for 'fiscal_data_version', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['serial']) && (mb_strlen($this->container['serial']) > 255)) {
            $invalidProperties[] = "invalid value for 'serial', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vendor']) && (mb_strlen($this->container['vendor']) > 255)) {
            $invalidProperties[] = "invalid value for 'vendor', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets driver
     *
     * @return \OpenAPI\Client\Model\Driver|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \OpenAPI\Client\Model\Driver|null $driver driver
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets firmware_version
     *
     * @return string|null
     */
    public function getFirmwareVersion()
    {
        return $this->container['firmware_version'];
    }

    /**
     * Sets firmware_version
     *
     * @param string|null $firmware_version Версия прошивки
     *
     * @return self
     */
    public function setFirmwareVersion($firmware_version)
    {
        if (is_null($firmware_version)) {
            throw new \InvalidArgumentException('non-nullable firmware_version cannot be null');
        }
        if ((mb_strlen($firmware_version) > 255)) {
            throw new \InvalidArgumentException('invalid length for $firmware_version when calling ChequePrinter., must be smaller than or equal to 255.');
        }

        $this->container['firmware_version'] = $firmware_version;

        return $this;
    }

    /**
     * Gets fiscal_data_version
     *
     * @return string|null
     */
    public function getFiscalDataVersion()
    {
        return $this->container['fiscal_data_version'];
    }

    /**
     * Sets fiscal_data_version
     *
     * @param string|null $fiscal_data_version Версия фискальных данных
     *
     * @return self
     */
    public function setFiscalDataVersion($fiscal_data_version)
    {
        if (is_null($fiscal_data_version)) {
            throw new \InvalidArgumentException('non-nullable fiscal_data_version cannot be null');
        }
        if ((mb_strlen($fiscal_data_version) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_data_version when calling ChequePrinter., must be smaller than or equal to 255.');
        }

        $this->container['fiscal_data_version'] = $fiscal_data_version;

        return $this;
    }

    /**
     * Gets fiscal_memory
     *
     * @return \OpenAPI\Client\Model\FiscalMemory|null
     */
    public function getFiscalMemory()
    {
        return $this->container['fiscal_memory'];
    }

    /**
     * Sets fiscal_memory
     *
     * @param \OpenAPI\Client\Model\FiscalMemory|null $fiscal_memory fiscal_memory
     *
     * @return self
     */
    public function setFiscalMemory($fiscal_memory)
    {
        if (is_null($fiscal_memory)) {
            throw new \InvalidArgumentException('non-nullable fiscal_memory cannot be null');
        }
        $this->container['fiscal_memory'] = $fiscal_memory;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование чекового принтера
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ChequePrinter., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Серийный номер чекового принтера
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        if ((mb_strlen($serial) > 255)) {
            throw new \InvalidArgumentException('invalid length for $serial when calling ChequePrinter., must be smaller than or equal to 255.');
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor Производитель чекового принтера
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            throw new \InvalidArgumentException('non-nullable vendor cannot be null');
        }
        if ((mb_strlen($vendor) > 255)) {
            throw new \InvalidArgumentException('invalid length for $vendor when calling ChequePrinter., must be smaller than or equal to 255.');
        }

        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


