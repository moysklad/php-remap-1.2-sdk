<?php
/**
 * Counterparty
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Counterparty Class Doc Comment
 *
 * @category Class
 * @description Контрагент
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Counterparty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Counterparty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta' => '\OpenAPI\Client\Model\Meta',
        'id' => 'string',
        'account_id' => 'string',
        'name' => 'string',
        'code' => 'string',
        'external_code' => 'string',
        'archived' => 'bool',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'description' => 'string',
        'company_type' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'actual_address' => 'string',
        'legal_address' => 'string',
        'inn' => 'string',
        'kpp' => 'string',
        'ogrn' => 'string',
        'ogrnip' => 'string',
        'okpo' => 'string',
        'certificate_number' => 'string',
        'certificate_date' => '\DateTime',
        'legal_title' => 'string',
        'legal_first_name' => 'string',
        'legal_last_name' => 'string',
        'legal_middle_name' => 'string',
        'birth_date' => '\DateTime',
        'sex' => 'string',
        'discount_card_number' => 'string',
        'shared' => 'bool',
        'group' => '\OpenAPI\Client\Model\Group',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'sales_amount' => 'int',
        'bonus_points' => 'int',
        'bonus_program' => '\OpenAPI\Client\Model\Meta',
        'price_type' => '\OpenAPI\Client\Model\Meta',
        'state' => '\OpenAPI\Client\Model\State',
        'accounts' => '\OpenAPI\Client\Model\CounterpartyAccounts',
        'contactpersons' => '\OpenAPI\Client\Model\CounterpartyContactpersons',
        'notes' => '\OpenAPI\Client\Model\CounterpartyNotes',
        'files' => '\OpenAPI\Client\Model\FileList',
        'tags' => 'string[]',
        'attributes' => '\OpenAPI\Client\Model\AttributeAbstract[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta' => null,
        'id' => 'uuid',
        'account_id' => 'uuid',
        'name' => null,
        'code' => null,
        'external_code' => null,
        'archived' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'description' => null,
        'company_type' => null,
        'email' => 'email',
        'phone' => null,
        'fax' => null,
        'actual_address' => null,
        'legal_address' => null,
        'inn' => null,
        'kpp' => null,
        'ogrn' => null,
        'ogrnip' => null,
        'okpo' => null,
        'certificate_number' => null,
        'certificate_date' => 'date-time',
        'legal_title' => null,
        'legal_first_name' => null,
        'legal_last_name' => null,
        'legal_middle_name' => null,
        'birth_date' => 'date-time',
        'sex' => null,
        'discount_card_number' => null,
        'shared' => null,
        'group' => null,
        'owner' => null,
        'sales_amount' => null,
        'bonus_points' => null,
        'bonus_program' => null,
        'price_type' => null,
        'state' => null,
        'accounts' => null,
        'contactpersons' => null,
        'notes' => null,
        'files' => null,
        'tags' => null,
        'attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta' => false,
        'id' => false,
        'account_id' => false,
        'name' => false,
        'code' => false,
        'external_code' => false,
        'archived' => false,
        'created' => false,
        'updated' => false,
        'description' => false,
        'company_type' => false,
        'email' => false,
        'phone' => false,
        'fax' => false,
        'actual_address' => false,
        'legal_address' => false,
        'inn' => false,
        'kpp' => false,
        'ogrn' => false,
        'ogrnip' => false,
        'okpo' => false,
        'certificate_number' => false,
        'certificate_date' => false,
        'legal_title' => false,
        'legal_first_name' => false,
        'legal_last_name' => false,
        'legal_middle_name' => false,
        'birth_date' => false,
        'sex' => false,
        'discount_card_number' => false,
        'shared' => false,
        'group' => false,
        'owner' => true,
        'sales_amount' => false,
        'bonus_points' => false,
        'bonus_program' => false,
        'price_type' => false,
        'state' => false,
        'accounts' => false,
        'contactpersons' => false,
        'notes' => false,
        'files' => false,
        'tags' => false,
        'attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta' => 'meta',
        'id' => 'id',
        'account_id' => 'accountId',
        'name' => 'name',
        'code' => 'code',
        'external_code' => 'externalCode',
        'archived' => 'archived',
        'created' => 'created',
        'updated' => 'updated',
        'description' => 'description',
        'company_type' => 'companyType',
        'email' => 'email',
        'phone' => 'phone',
        'fax' => 'fax',
        'actual_address' => 'actualAddress',
        'legal_address' => 'legalAddress',
        'inn' => 'inn',
        'kpp' => 'kpp',
        'ogrn' => 'ogrn',
        'ogrnip' => 'ogrnip',
        'okpo' => 'okpo',
        'certificate_number' => 'certificateNumber',
        'certificate_date' => 'certificateDate',
        'legal_title' => 'legalTitle',
        'legal_first_name' => 'legalFirstName',
        'legal_last_name' => 'legalLastName',
        'legal_middle_name' => 'legalMiddleName',
        'birth_date' => 'birthDate',
        'sex' => 'sex',
        'discount_card_number' => 'discountCardNumber',
        'shared' => 'shared',
        'group' => 'group',
        'owner' => 'owner',
        'sales_amount' => 'salesAmount',
        'bonus_points' => 'bonusPoints',
        'bonus_program' => 'bonusProgram',
        'price_type' => 'priceType',
        'state' => 'state',
        'accounts' => 'accounts',
        'contactpersons' => 'contactpersons',
        'notes' => 'notes',
        'files' => 'files',
        'tags' => 'tags',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta' => 'setMeta',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'code' => 'setCode',
        'external_code' => 'setExternalCode',
        'archived' => 'setArchived',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'description' => 'setDescription',
        'company_type' => 'setCompanyType',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'actual_address' => 'setActualAddress',
        'legal_address' => 'setLegalAddress',
        'inn' => 'setInn',
        'kpp' => 'setKpp',
        'ogrn' => 'setOgrn',
        'ogrnip' => 'setOgrnip',
        'okpo' => 'setOkpo',
        'certificate_number' => 'setCertificateNumber',
        'certificate_date' => 'setCertificateDate',
        'legal_title' => 'setLegalTitle',
        'legal_first_name' => 'setLegalFirstName',
        'legal_last_name' => 'setLegalLastName',
        'legal_middle_name' => 'setLegalMiddleName',
        'birth_date' => 'setBirthDate',
        'sex' => 'setSex',
        'discount_card_number' => 'setDiscountCardNumber',
        'shared' => 'setShared',
        'group' => 'setGroup',
        'owner' => 'setOwner',
        'sales_amount' => 'setSalesAmount',
        'bonus_points' => 'setBonusPoints',
        'bonus_program' => 'setBonusProgram',
        'price_type' => 'setPriceType',
        'state' => 'setState',
        'accounts' => 'setAccounts',
        'contactpersons' => 'setContactpersons',
        'notes' => 'setNotes',
        'files' => 'setFiles',
        'tags' => 'setTags',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta' => 'getMeta',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'code' => 'getCode',
        'external_code' => 'getExternalCode',
        'archived' => 'getArchived',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'description' => 'getDescription',
        'company_type' => 'getCompanyType',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'actual_address' => 'getActualAddress',
        'legal_address' => 'getLegalAddress',
        'inn' => 'getInn',
        'kpp' => 'getKpp',
        'ogrn' => 'getOgrn',
        'ogrnip' => 'getOgrnip',
        'okpo' => 'getOkpo',
        'certificate_number' => 'getCertificateNumber',
        'certificate_date' => 'getCertificateDate',
        'legal_title' => 'getLegalTitle',
        'legal_first_name' => 'getLegalFirstName',
        'legal_last_name' => 'getLegalLastName',
        'legal_middle_name' => 'getLegalMiddleName',
        'birth_date' => 'getBirthDate',
        'sex' => 'getSex',
        'discount_card_number' => 'getDiscountCardNumber',
        'shared' => 'getShared',
        'group' => 'getGroup',
        'owner' => 'getOwner',
        'sales_amount' => 'getSalesAmount',
        'bonus_points' => 'getBonusPoints',
        'bonus_program' => 'getBonusProgram',
        'price_type' => 'getPriceType',
        'state' => 'getState',
        'accounts' => 'getAccounts',
        'contactpersons' => 'getContactpersons',
        'notes' => 'getNotes',
        'files' => 'getFiles',
        'tags' => 'getTags',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COMPANY_TYPE_LEGAL = 'legal';
    public const COMPANY_TYPE_ENTREPRENEUR = 'entrepreneur';
    public const COMPANY_TYPE_INDIVIDUAL = 'individual';
    public const SEX_MALE = 'MALE';
    public const SEX_FEMALE = 'FEMALE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompanyTypeAllowableValues()
    {
        return [
            self::COMPANY_TYPE_LEGAL,
            self::COMPANY_TYPE_ENTREPRENEUR,
            self::COMPANY_TYPE_INDIVIDUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSexAllowableValues()
    {
        return [
            self::SEX_MALE,
            self::SEX_FEMALE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('external_code', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('company_type', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('actual_address', $data ?? [], null);
        $this->setIfExists('legal_address', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('kpp', $data ?? [], null);
        $this->setIfExists('ogrn', $data ?? [], null);
        $this->setIfExists('ogrnip', $data ?? [], null);
        $this->setIfExists('okpo', $data ?? [], null);
        $this->setIfExists('certificate_number', $data ?? [], null);
        $this->setIfExists('certificate_date', $data ?? [], null);
        $this->setIfExists('legal_title', $data ?? [], null);
        $this->setIfExists('legal_first_name', $data ?? [], null);
        $this->setIfExists('legal_last_name', $data ?? [], null);
        $this->setIfExists('legal_middle_name', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('sex', $data ?? [], null);
        $this->setIfExists('discount_card_number', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('sales_amount', $data ?? [], null);
        $this->setIfExists('bonus_points', $data ?? [], null);
        $this->setIfExists('bonus_program', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('contactpersons', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 255)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_code']) && (mb_strlen($this->container['external_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        $allowedValues = $this->getCompanyTypeAllowableValues();
        if (!is_null($this->container['company_type']) && !in_array($this->container['company_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'company_type', must be one of '%s'",
                $this->container['company_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['actual_address']) && (mb_strlen($this->container['actual_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'actual_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['legal_address']) && (mb_strlen($this->container['legal_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'legal_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inn']) && (mb_strlen($this->container['inn']) > 255)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['kpp']) && (mb_strlen($this->container['kpp']) > 255)) {
            $invalidProperties[] = "invalid value for 'kpp', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ogrn']) && (mb_strlen($this->container['ogrn']) > 255)) {
            $invalidProperties[] = "invalid value for 'ogrn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ogrnip']) && (mb_strlen($this->container['ogrnip']) > 255)) {
            $invalidProperties[] = "invalid value for 'ogrnip', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['okpo']) && (mb_strlen($this->container['okpo']) > 255)) {
            $invalidProperties[] = "invalid value for 'okpo', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['certificate_number']) && (mb_strlen($this->container['certificate_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'certificate_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['legal_title']) && (mb_strlen($this->container['legal_title']) > 4096)) {
            $invalidProperties[] = "invalid value for 'legal_title', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['legal_first_name']) && (mb_strlen($this->container['legal_first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'legal_first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['legal_last_name']) && (mb_strlen($this->container['legal_last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'legal_last_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['legal_middle_name']) && (mb_strlen($this->container['legal_middle_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'legal_middle_name', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getSexAllowableValues();
        if (!is_null($this->container['sex']) && !in_array($this->container['sex'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sex', must be one of '%s'",
                $this->container['sex'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['discount_card_number']) && (mb_strlen($this->container['discount_card_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'discount_card_number', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID контрагента
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID учетной записи
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование контрагента
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Код контрагента
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string|null
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string|null $external_code Внешний код контрагента
     *
     * @return self
     */
    public function setExternalCode($external_code)
    {
        if (is_null($external_code)) {
            throw new \InvalidArgumentException('non-nullable external_code cannot be null');
        }
        if ((mb_strlen($external_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_code when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Добавлен ли контрагент в архив
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Момент создания
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated Момент последнего обновления
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Комментарий к контрагенту
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Counterparty., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets company_type
     *
     * @return string|null
     */
    public function getCompanyType()
    {
        return $this->container['company_type'];
    }

    /**
     * Sets company_type
     *
     * @param string|null $company_type Тип контрагента
     *
     * @return self
     */
    public function setCompanyType($company_type)
    {
        if (is_null($company_type)) {
            throw new \InvalidArgumentException('non-nullable company_type cannot be null');
        }
        $allowedValues = $this->getCompanyTypeAllowableValues();
        if (!in_array($company_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'company_type', must be one of '%s'",
                    $company_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['company_type'] = $company_type;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Адрес электронной почты
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Номер телефона
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Номер факса
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets actual_address
     *
     * @return string|null
     */
    public function getActualAddress()
    {
        return $this->container['actual_address'];
    }

    /**
     * Sets actual_address
     *
     * @param string|null $actual_address Фактический адрес контрагента
     *
     * @return self
     */
    public function setActualAddress($actual_address)
    {
        if (is_null($actual_address)) {
            throw new \InvalidArgumentException('non-nullable actual_address cannot be null');
        }
        if ((mb_strlen($actual_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $actual_address when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['actual_address'] = $actual_address;

        return $this;
    }

    /**
     * Gets legal_address
     *
     * @return string|null
     */
    public function getLegalAddress()
    {
        return $this->container['legal_address'];
    }

    /**
     * Sets legal_address
     *
     * @param string|null $legal_address Юридический адрес контрагента
     *
     * @return self
     */
    public function setLegalAddress($legal_address)
    {
        if (is_null($legal_address)) {
            throw new \InvalidArgumentException('non-nullable legal_address cannot be null');
        }
        if ((mb_strlen($legal_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $legal_address when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['legal_address'] = $legal_address;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        if ((mb_strlen($inn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets kpp
     *
     * @return string|null
     */
    public function getKpp()
    {
        return $this->container['kpp'];
    }

    /**
     * Sets kpp
     *
     * @param string|null $kpp КПП
     *
     * @return self
     */
    public function setKpp($kpp)
    {
        if (is_null($kpp)) {
            throw new \InvalidArgumentException('non-nullable kpp cannot be null');
        }
        if ((mb_strlen($kpp) > 255)) {
            throw new \InvalidArgumentException('invalid length for $kpp when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['kpp'] = $kpp;

        return $this;
    }

    /**
     * Gets ogrn
     *
     * @return string|null
     */
    public function getOgrn()
    {
        return $this->container['ogrn'];
    }

    /**
     * Sets ogrn
     *
     * @param string|null $ogrn ОГРН
     *
     * @return self
     */
    public function setOgrn($ogrn)
    {
        if (is_null($ogrn)) {
            throw new \InvalidArgumentException('non-nullable ogrn cannot be null');
        }
        if ((mb_strlen($ogrn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ogrn when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['ogrn'] = $ogrn;

        return $this;
    }

    /**
     * Gets ogrnip
     *
     * @return string|null
     */
    public function getOgrnip()
    {
        return $this->container['ogrnip'];
    }

    /**
     * Sets ogrnip
     *
     * @param string|null $ogrnip ОГРНИП
     *
     * @return self
     */
    public function setOgrnip($ogrnip)
    {
        if (is_null($ogrnip)) {
            throw new \InvalidArgumentException('non-nullable ogrnip cannot be null');
        }
        if ((mb_strlen($ogrnip) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ogrnip when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['ogrnip'] = $ogrnip;

        return $this;
    }

    /**
     * Gets okpo
     *
     * @return string|null
     */
    public function getOkpo()
    {
        return $this->container['okpo'];
    }

    /**
     * Sets okpo
     *
     * @param string|null $okpo ОКПО
     *
     * @return self
     */
    public function setOkpo($okpo)
    {
        if (is_null($okpo)) {
            throw new \InvalidArgumentException('non-nullable okpo cannot be null');
        }
        if ((mb_strlen($okpo) > 255)) {
            throw new \InvalidArgumentException('invalid length for $okpo when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['okpo'] = $okpo;

        return $this;
    }

    /**
     * Gets certificate_number
     *
     * @return string|null
     */
    public function getCertificateNumber()
    {
        return $this->container['certificate_number'];
    }

    /**
     * Sets certificate_number
     *
     * @param string|null $certificate_number Номер свидетельства
     *
     * @return self
     */
    public function setCertificateNumber($certificate_number)
    {
        if (is_null($certificate_number)) {
            throw new \InvalidArgumentException('non-nullable certificate_number cannot be null');
        }
        if ((mb_strlen($certificate_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $certificate_number when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['certificate_number'] = $certificate_number;

        return $this;
    }

    /**
     * Gets certificate_date
     *
     * @return \DateTime|null
     */
    public function getCertificateDate()
    {
        return $this->container['certificate_date'];
    }

    /**
     * Sets certificate_date
     *
     * @param \DateTime|null $certificate_date Дата свидетельства
     *
     * @return self
     */
    public function setCertificateDate($certificate_date)
    {
        if (is_null($certificate_date)) {
            throw new \InvalidArgumentException('non-nullable certificate_date cannot be null');
        }
        $this->container['certificate_date'] = $certificate_date;

        return $this;
    }

    /**
     * Gets legal_title
     *
     * @return string|null
     */
    public function getLegalTitle()
    {
        return $this->container['legal_title'];
    }

    /**
     * Sets legal_title
     *
     * @param string|null $legal_title Полное наименование
     *
     * @return self
     */
    public function setLegalTitle($legal_title)
    {
        if (is_null($legal_title)) {
            throw new \InvalidArgumentException('non-nullable legal_title cannot be null');
        }
        if ((mb_strlen($legal_title) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $legal_title when calling Counterparty., must be smaller than or equal to 4096.');
        }

        $this->container['legal_title'] = $legal_title;

        return $this;
    }

    /**
     * Gets legal_first_name
     *
     * @return string|null
     */
    public function getLegalFirstName()
    {
        return $this->container['legal_first_name'];
    }

    /**
     * Sets legal_first_name
     *
     * @param string|null $legal_first_name Имя для ИП и физлица
     *
     * @return self
     */
    public function setLegalFirstName($legal_first_name)
    {
        if (is_null($legal_first_name)) {
            throw new \InvalidArgumentException('non-nullable legal_first_name cannot be null');
        }
        if ((mb_strlen($legal_first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $legal_first_name when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['legal_first_name'] = $legal_first_name;

        return $this;
    }

    /**
     * Gets legal_last_name
     *
     * @return string|null
     */
    public function getLegalLastName()
    {
        return $this->container['legal_last_name'];
    }

    /**
     * Sets legal_last_name
     *
     * @param string|null $legal_last_name Фамилия для ИП и физлица
     *
     * @return self
     */
    public function setLegalLastName($legal_last_name)
    {
        if (is_null($legal_last_name)) {
            throw new \InvalidArgumentException('non-nullable legal_last_name cannot be null');
        }
        if ((mb_strlen($legal_last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $legal_last_name when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['legal_last_name'] = $legal_last_name;

        return $this;
    }

    /**
     * Gets legal_middle_name
     *
     * @return string|null
     */
    public function getLegalMiddleName()
    {
        return $this->container['legal_middle_name'];
    }

    /**
     * Sets legal_middle_name
     *
     * @param string|null $legal_middle_name Отчество для ИП и физлица
     *
     * @return self
     */
    public function setLegalMiddleName($legal_middle_name)
    {
        if (is_null($legal_middle_name)) {
            throw new \InvalidArgumentException('non-nullable legal_middle_name cannot be null');
        }
        if ((mb_strlen($legal_middle_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $legal_middle_name when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['legal_middle_name'] = $legal_middle_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Дата рождения для физлица
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return string|null
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param string|null $sex Пол контрагента
     *
     * @return self
     */
    public function setSex($sex)
    {
        if (is_null($sex)) {
            throw new \InvalidArgumentException('non-nullable sex cannot be null');
        }
        $allowedValues = $this->getSexAllowableValues();
        if (!in_array($sex, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sex', must be one of '%s'",
                    $sex,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets discount_card_number
     *
     * @return string|null
     */
    public function getDiscountCardNumber()
    {
        return $this->container['discount_card_number'];
    }

    /**
     * Sets discount_card_number
     *
     * @param string|null $discount_card_number Номер дисконтной карты контрагента
     *
     * @return self
     */
    public function setDiscountCardNumber($discount_card_number)
    {
        if (is_null($discount_card_number)) {
            throw new \InvalidArgumentException('non-nullable discount_card_number cannot be null');
        }
        if ((mb_strlen($discount_card_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $discount_card_number when calling Counterparty., must be smaller than or equal to 255.');
        }

        $this->container['discount_card_number'] = $discount_card_number;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Общий доступ
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\Group|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\Group|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sales_amount
     *
     * @return int|null
     */
    public function getSalesAmount()
    {
        return $this->container['sales_amount'];
    }

    /**
     * Sets sales_amount
     *
     * @param int|null $sales_amount Сумма продаж
     *
     * @return self
     */
    public function setSalesAmount($sales_amount)
    {
        if (is_null($sales_amount)) {
            throw new \InvalidArgumentException('non-nullable sales_amount cannot be null');
        }
        $this->container['sales_amount'] = $sales_amount;

        return $this;
    }

    /**
     * Gets bonus_points
     *
     * @return int|null
     */
    public function getBonusPoints()
    {
        return $this->container['bonus_points'];
    }

    /**
     * Sets bonus_points
     *
     * @param int|null $bonus_points Бонусные баллы по активной бонусной программе
     *
     * @return self
     */
    public function setBonusPoints($bonus_points)
    {
        if (is_null($bonus_points)) {
            throw new \InvalidArgumentException('non-nullable bonus_points cannot be null');
        }
        $this->container['bonus_points'] = $bonus_points;

        return $this;
    }

    /**
     * Gets bonus_program
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getBonusProgram()
    {
        return $this->container['bonus_program'];
    }

    /**
     * Sets bonus_program
     *
     * @param \OpenAPI\Client\Model\Meta|null $bonus_program bonus_program
     *
     * @return self
     */
    public function setBonusProgram($bonus_program)
    {
        if (is_null($bonus_program)) {
            throw new \InvalidArgumentException('non-nullable bonus_program cannot be null');
        }
        $this->container['bonus_program'] = $bonus_program;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \OpenAPI\Client\Model\Meta|null $price_type price_type
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\State|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\State|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \OpenAPI\Client\Model\CounterpartyAccounts|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \OpenAPI\Client\Model\CounterpartyAccounts|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets contactpersons
     *
     * @return \OpenAPI\Client\Model\CounterpartyContactpersons|null
     */
    public function getContactpersons()
    {
        return $this->container['contactpersons'];
    }

    /**
     * Sets contactpersons
     *
     * @param \OpenAPI\Client\Model\CounterpartyContactpersons|null $contactpersons contactpersons
     *
     * @return self
     */
    public function setContactpersons($contactpersons)
    {
        if (is_null($contactpersons)) {
            throw new \InvalidArgumentException('non-nullable contactpersons cannot be null');
        }
        $this->container['contactpersons'] = $contactpersons;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \OpenAPI\Client\Model\CounterpartyNotes|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \OpenAPI\Client\Model\CounterpartyNotes|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\FileList|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\FileList|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Группы контрагента
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\AttributeAbstract[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\AttributeAbstract[]|null $attributes Дополнительные поля
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


