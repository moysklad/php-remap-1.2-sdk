<?php
/**
 * Currency
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Currency Class Doc Comment
 *
 * @category Class
 * @description Валюта
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Currency implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Currency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta' => '\OpenAPI\Client\Model\Meta',
        'id' => 'string',
        'system' => 'bool',
        'name' => 'string',
        'full_name' => 'string',
        'code' => 'string',
        'iso_code' => 'string',
        'multiplicity' => 'int',
        'rate' => 'float',
        'margin' => 'float',
        'indirect' => 'bool',
        'rate_update_type' => 'string',
        'archived' => 'bool',
        'default' => 'bool',
        'major_unit' => '\OpenAPI\Client\Model\CurrencyMajorUnit',
        'minor_unit' => '\OpenAPI\Client\Model\CurrencyMinorUnit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta' => null,
        'id' => 'uuid',
        'system' => null,
        'name' => null,
        'full_name' => null,
        'code' => null,
        'iso_code' => null,
        'multiplicity' => null,
        'rate' => 'float',
        'margin' => 'float',
        'indirect' => null,
        'rate_update_type' => null,
        'archived' => null,
        'default' => null,
        'major_unit' => null,
        'minor_unit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta' => false,
        'id' => false,
        'system' => false,
        'name' => false,
        'full_name' => false,
        'code' => false,
        'iso_code' => false,
        'multiplicity' => false,
        'rate' => false,
        'margin' => false,
        'indirect' => false,
        'rate_update_type' => false,
        'archived' => false,
        'default' => false,
        'major_unit' => false,
        'minor_unit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta' => 'meta',
        'id' => 'id',
        'system' => 'system',
        'name' => 'name',
        'full_name' => 'fullName',
        'code' => 'code',
        'iso_code' => 'isoCode',
        'multiplicity' => 'multiplicity',
        'rate' => 'rate',
        'margin' => 'margin',
        'indirect' => 'indirect',
        'rate_update_type' => 'rateUpdateType',
        'archived' => 'archived',
        'default' => 'default',
        'major_unit' => 'majorUnit',
        'minor_unit' => 'minorUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta' => 'setMeta',
        'id' => 'setId',
        'system' => 'setSystem',
        'name' => 'setName',
        'full_name' => 'setFullName',
        'code' => 'setCode',
        'iso_code' => 'setIsoCode',
        'multiplicity' => 'setMultiplicity',
        'rate' => 'setRate',
        'margin' => 'setMargin',
        'indirect' => 'setIndirect',
        'rate_update_type' => 'setRateUpdateType',
        'archived' => 'setArchived',
        'default' => 'setDefault',
        'major_unit' => 'setMajorUnit',
        'minor_unit' => 'setMinorUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta' => 'getMeta',
        'id' => 'getId',
        'system' => 'getSystem',
        'name' => 'getName',
        'full_name' => 'getFullName',
        'code' => 'getCode',
        'iso_code' => 'getIsoCode',
        'multiplicity' => 'getMultiplicity',
        'rate' => 'getRate',
        'margin' => 'getMargin',
        'indirect' => 'getIndirect',
        'rate_update_type' => 'getRateUpdateType',
        'archived' => 'getArchived',
        'default' => 'getDefault',
        'major_unit' => 'getMajorUnit',
        'minor_unit' => 'getMinorUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RATE_UPDATE_TYPE_MANUAL = 'manual';
    public const RATE_UPDATE_TYPE_AUTO = 'auto';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateUpdateTypeAllowableValues()
    {
        return [
            self::RATE_UPDATE_TYPE_MANUAL,
            self::RATE_UPDATE_TYPE_AUTO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('system', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('iso_code', $data ?? [], null);
        $this->setIfExists('multiplicity', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('margin', $data ?? [], null);
        $this->setIfExists('indirect', $data ?? [], null);
        $this->setIfExists('rate_update_type', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('default', $data ?? [], null);
        $this->setIfExists('major_unit', $data ?? [], null);
        $this->setIfExists('minor_unit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRateUpdateTypeAllowableValues();
        if (!is_null($this->container['rate_update_type']) && !in_array($this->container['rate_update_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_update_type', must be one of '%s'",
                $this->container['rate_update_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID валюты
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets system
     *
     * @return bool|null
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param bool|null $system Системная валюта
     *
     * @return self
     */
    public function setSystem($system)
    {
        if (is_null($system)) {
            throw new \InvalidArgumentException('non-nullable system cannot be null');
        }
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Краткое наименование валюты
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Полное наименование валюты
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Цифровой код валюты
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets iso_code
     *
     * @return string|null
     */
    public function getIsoCode()
    {
        return $this->container['iso_code'];
    }

    /**
     * Sets iso_code
     *
     * @param string|null $iso_code Буквенный код валюты
     *
     * @return self
     */
    public function setIsoCode($iso_code)
    {
        if (is_null($iso_code)) {
            throw new \InvalidArgumentException('non-nullable iso_code cannot be null');
        }
        $this->container['iso_code'] = $iso_code;

        return $this;
    }

    /**
     * Gets multiplicity
     *
     * @return int|null
     */
    public function getMultiplicity()
    {
        return $this->container['multiplicity'];
    }

    /**
     * Sets multiplicity
     *
     * @param int|null $multiplicity Кратность курса валюты
     *
     * @return self
     */
    public function setMultiplicity($multiplicity)
    {
        if (is_null($multiplicity)) {
            throw new \InvalidArgumentException('non-nullable multiplicity cannot be null');
        }
        $this->container['multiplicity'] = $multiplicity;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Курс валюты
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float|null $margin Наценка при автоматическом обновлении курса
     *
     * @return self
     */
    public function setMargin($margin)
    {
        if (is_null($margin)) {
            throw new \InvalidArgumentException('non-nullable margin cannot be null');
        }
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets indirect
     *
     * @return bool|null
     */
    public function getIndirect()
    {
        return $this->container['indirect'];
    }

    /**
     * Sets indirect
     *
     * @param bool|null $indirect Признак обратного курса валюты
     *
     * @return self
     */
    public function setIndirect($indirect)
    {
        if (is_null($indirect)) {
            throw new \InvalidArgumentException('non-nullable indirect cannot be null');
        }
        $this->container['indirect'] = $indirect;

        return $this;
    }

    /**
     * Gets rate_update_type
     *
     * @return string|null
     */
    public function getRateUpdateType()
    {
        return $this->container['rate_update_type'];
    }

    /**
     * Sets rate_update_type
     *
     * @param string|null $rate_update_type Способ обновления курса валюты
     *
     * @return self
     */
    public function setRateUpdateType($rate_update_type)
    {
        if (is_null($rate_update_type)) {
            throw new \InvalidArgumentException('non-nullable rate_update_type cannot be null');
        }
        $allowedValues = $this->getRateUpdateTypeAllowableValues();
        if (!in_array($rate_update_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_update_type', must be one of '%s'",
                    $rate_update_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_update_type'] = $rate_update_type;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Добавлена ли валюта в архив
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool|null $default Валюта учета по умолчанию
     *
     * @return self
     */
    public function setDefault($default)
    {
        if (is_null($default)) {
            throw new \InvalidArgumentException('non-nullable default cannot be null');
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets major_unit
     *
     * @return \OpenAPI\Client\Model\CurrencyMajorUnit|null
     */
    public function getMajorUnit()
    {
        return $this->container['major_unit'];
    }

    /**
     * Sets major_unit
     *
     * @param \OpenAPI\Client\Model\CurrencyMajorUnit|null $major_unit major_unit
     *
     * @return self
     */
    public function setMajorUnit($major_unit)
    {
        if (is_null($major_unit)) {
            throw new \InvalidArgumentException('non-nullable major_unit cannot be null');
        }
        $this->container['major_unit'] = $major_unit;

        return $this;
    }

    /**
     * Gets minor_unit
     *
     * @return \OpenAPI\Client\Model\CurrencyMinorUnit|null
     */
    public function getMinorUnit()
    {
        return $this->container['minor_unit'];
    }

    /**
     * Sets minor_unit
     *
     * @param \OpenAPI\Client\Model\CurrencyMinorUnit|null $minor_unit minor_unit
     *
     * @return self
     */
    public function setMinorUnit($minor_unit)
    {
        if (is_null($minor_unit)) {
            throw new \InvalidArgumentException('non-nullable minor_unit cannot be null');
        }
        $this->container['minor_unit'] = $minor_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


