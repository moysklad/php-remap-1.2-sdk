<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const TRACKING_TYPE_BEER_ALCOHOL = 'BEER_ALCOHOL';
    public const TRACKING_TYPE_BICYCLE = 'BICYCLE';
    public const TRACKING_TYPE_ELECTRONICS = 'ELECTRONICS';
    public const TRACKING_TYPE_FOOD_SUPPLEMENT = 'FOOD_SUPPLEMENT';
    public const TRACKING_TYPE_LP_CLOTHES = 'LP_CLOTHES';
    public const TRACKING_TYPE_LP_LINENS = 'LP_LINENS';
    public const TRACKING_TYPE_MEDICAL_DEVICES = 'MEDICAL_DEVICES';
    public const TRACKING_TYPE_MILK = 'MILK';
    public const TRACKING_TYPE_NABEER = 'NABEER';
    public const TRACKING_TYPE_NCP = 'NCP';
    public const TRACKING_TYPE_NOT_TRACKED = 'NOT_TRACKED';
    public const TRACKING_TYPE_OTP = 'OTP';
    public const TRACKING_TYPE_PERFUMERY = 'PERFUMERY';
    public const TRACKING_TYPE_PET_FOOD = 'PET_FOOD';
    public const TRACKING_TYPE_SANITIZER = 'SANITIZER';
    public const TRACKING_TYPE_SEAFOOD = 'SEAFOOD';
    public const TRACKING_TYPE_SHOES = 'SHOES';
    public const TRACKING_TYPE_SOFT_DRINKS = 'SOFT_DRINKS';
    public const TRACKING_TYPE_TIRES = 'TIRES';
    public const TRACKING_TYPE_TOBACCO = 'TOBACCO';
    public const TRACKING_TYPE_VEGETABLE_OIL = 'VEGETABLE_OIL';
    public const TRACKING_TYPE_VETPHARMA = 'VETPHARMA';
    public const TRACKING_TYPE_WATER = 'WATER';

    public const PPE_TYPE__2400001225408 = '2400001225408';
    public const PPE_TYPE__2400001225606 = '2400001225606';
    public const PPE_TYPE__2400001226108 = '2400001226108';
    public const PPE_TYPE__2400001226306 = '2400001226306';
    public const PPE_TYPE__2400001226405 = '2400001226405';
    public const PPE_TYPE__2400001323807 = '2400001323807';
    public const PPE_TYPE__2400001368105 = '2400001368105';
    public const PPE_TYPE__2400001393107 = '2400001393107';
    public const PPE_TYPE__2400001393503 = '2400001393503';
    public const PPE_TYPE__2400001393602 = '2400001393602';
    public const PPE_TYPE__2400001565306 = '2400001565306';
    public const PPE_TYPE__2400001807703 = '2400001807703';
    public const PPE_TYPE__2400001818303 = '2400001818303';
    public const PPE_TYPE__2400001857005 = '2400001857005';
    public const PPE_TYPE__2400001857203 = '2400001857203';
    public const PPE_TYPE__2400001858309 = '2400001858309';
    public const PPE_TYPE__2400001858507 = '2400001858507';
    public const PPE_TYPE__2400002015909 = '2400002015909';
    public const PPE_TYPE__2400002016005 = '2400002016005';
    public const PPE_TYPE__2400002016104 = '2400002016104';
    public const PPE_TYPE__2400002052805 = '2400002052805';
    public const PPE_TYPE__2400002052904 = '2400002052904';
    public const PPE_TYPE__2400002186203 = '2400002186203';
    public const PPE_TYPE__2400002886707 = '2400002886707';
    public const PPE_TYPE__2400002886806 = '2400002886806';
    public const PPE_TYPE__2400002984502 = '2400002984502';
    public const PPE_TYPE__2400003117107 = '2400003117107';
    public const PPE_TYPE__2400003117206 = '2400003117206';
    public const PPE_TYPE__2400003161209 = '2400003161209';
    public const PPE_TYPE__2400003207907 = '2400003207907';
    public const PPE_TYPE__2400003215308 = '2400003215308';
    public const PPE_TYPE__2400003227806 = '2400003227806';
    public const PPE_TYPE__2400003237409 = '2400003237409';
    public const PPE_TYPE__2400003263408 = '2400003263408';
    public const PPE_TYPE__2400003297700 = '2400003297700';
    public const PPE_TYPE__2400003356704 = '2400003356704';
    public const PPE_TYPE__2400003356803 = '2400003356803';
    public const PPE_TYPE__2400003356902 = '2400003356902';
    public const PPE_TYPE__2400003433108 = '2400003433108';
    public const PPE_TYPE__2400003492303 = '2400003492303';
    public const PPE_TYPE__2400003495700 = '2400003495700';
    public const PPE_TYPE__2400003495809 = '2400003495809';
    public const PPE_TYPE__2400003495908 = '2400003495908';
    public const PPE_TYPE__2400003496004 = '2400003496004';
    public const PPE_TYPE__2400003496103 = '2400003496103';
    public const PPE_TYPE__2400003675805 = '2400003675805';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta' => '\OpenAPI\Client\Model\Meta',
        'id' => 'string',
        'account_id' => 'string',
        'alcoholic' => '\OpenAPI\Client\Model\ProductAlcoholic',
        'archived' => 'bool',
        'tobacco' => 'bool',
        'name' => 'string',
        'code' => 'string',
        'external_code' => 'string',
        'path_name' => 'string',
        'article' => 'string',
        'description' => 'string',
        'vat' => 'int',
        'vat_enabled' => 'bool',
        'use_parent_vat' => 'bool',
        'effective_vat' => 'int',
        'effective_vat_enabled' => 'bool',
        'discount_prohibited' => 'bool',
        'variants_count' => 'int',
        'is_serial_trackable' => 'bool',
        'shared' => 'bool',
        'group' => '\OpenAPI\Client\Model\Group',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'updated' => '\DateTime',
        'weight' => 'float',
        'volume' => 'float',
        'buy_price' => '\OpenAPI\Client\Model\BuyPrice',
        'sale_prices' => '\OpenAPI\Client\Model\SalePrice[]',
        'supplier' => '\OpenAPI\Client\Model\Counterparty',
        'country' => '\OpenAPI\Client\Model\Country',
        'uom' => '\OpenAPI\Client\Model\Uom',
        'product_folder' => '\OpenAPI\Client\Model\ProductFolder',
        'images' => '\OpenAPI\Client\Model\ImageList',
        'files' => '\OpenAPI\Client\Model\FileList',
        'barcodes' => '\OpenAPI\Client\Model\Barcode[]',
        'packs' => '\OpenAPI\Client\Model\Pack[]',
        'tracking_type' => 'string',
        'tnved' => 'string',
        'payment_item_type' => 'string',
        'tax_system' => 'string',
        'attributes' => '\OpenAPI\Client\Model\AttributeAbstract[]',
        'minimum_balance' => 'float',
        'minimum_stock' => '\OpenAPI\Client\Model\MinimumStockAbstract',
        'min_price' => '\OpenAPI\Client\Model\MinPrice',
        'weighed' => 'bool',
        'on_tap' => 'bool',
        'partial_disposal' => 'bool',
        'things' => 'string[]',
        'sync_id' => 'string',
        'ppe_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta' => null,
        'id' => 'uuid',
        'account_id' => 'uuid',
        'alcoholic' => null,
        'archived' => null,
        'tobacco' => null,
        'name' => null,
        'code' => null,
        'external_code' => null,
        'path_name' => null,
        'article' => null,
        'description' => null,
        'vat' => null,
        'vat_enabled' => null,
        'use_parent_vat' => null,
        'effective_vat' => null,
        'effective_vat_enabled' => null,
        'discount_prohibited' => null,
        'variants_count' => null,
        'is_serial_trackable' => null,
        'shared' => null,
        'group' => null,
        'owner' => null,
        'updated' => 'date-time',
        'weight' => 'float',
        'volume' => 'float',
        'buy_price' => null,
        'sale_prices' => null,
        'supplier' => null,
        'country' => null,
        'uom' => null,
        'product_folder' => null,
        'images' => null,
        'files' => null,
        'barcodes' => null,
        'packs' => null,
        'tracking_type' => null,
        'tnved' => null,
        'payment_item_type' => null,
        'tax_system' => null,
        'attributes' => null,
        'minimum_balance' => 'float',
        'minimum_stock' => null,
        'min_price' => null,
        'weighed' => null,
        'on_tap' => null,
        'partial_disposal' => null,
        'things' => null,
        'sync_id' => 'uuid',
        'ppe_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta' => false,
        'id' => false,
        'account_id' => false,
        'alcoholic' => false,
        'archived' => false,
        'tobacco' => false,
        'name' => false,
        'code' => false,
        'external_code' => false,
        'path_name' => false,
        'article' => false,
        'description' => true,
        'vat' => false,
        'vat_enabled' => false,
        'use_parent_vat' => false,
        'effective_vat' => false,
        'effective_vat_enabled' => false,
        'discount_prohibited' => false,
        'variants_count' => false,
        'is_serial_trackable' => false,
        'shared' => false,
        'group' => false,
        'owner' => true,
        'updated' => false,
        'weight' => false,
        'volume' => false,
        'buy_price' => false,
        'sale_prices' => false,
        'supplier' => true,
        'country' => true,
        'uom' => true,
        'product_folder' => true,
        'images' => true,
        'files' => true,
        'barcodes' => false,
        'packs' => false,
        'tracking_type' => false,
        'tnved' => false,
        'payment_item_type' => false,
        'tax_system' => false,
        'attributes' => false,
        'minimum_balance' => false,
        'minimum_stock' => true,
        'min_price' => false,
        'weighed' => false,
        'on_tap' => false,
        'partial_disposal' => false,
        'things' => false,
        'sync_id' => false,
        'ppe_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta' => 'meta',
        'id' => 'id',
        'account_id' => 'accountId',
        'alcoholic' => 'alcoholic',
        'archived' => 'archived',
        'tobacco' => 'tobacco',
        'name' => 'name',
        'code' => 'code',
        'external_code' => 'externalCode',
        'path_name' => 'pathName',
        'article' => 'article',
        'description' => 'description',
        'vat' => 'vat',
        'vat_enabled' => 'vatEnabled',
        'use_parent_vat' => 'useParentVat',
        'effective_vat' => 'effectiveVat',
        'effective_vat_enabled' => 'effectiveVatEnabled',
        'discount_prohibited' => 'discountProhibited',
        'variants_count' => 'variantsCount',
        'is_serial_trackable' => 'isSerialTrackable',
        'shared' => 'shared',
        'group' => 'group',
        'owner' => 'owner',
        'updated' => 'updated',
        'weight' => 'weight',
        'volume' => 'volume',
        'buy_price' => 'buyPrice',
        'sale_prices' => 'salePrices',
        'supplier' => 'supplier',
        'country' => 'country',
        'uom' => 'uom',
        'product_folder' => 'productFolder',
        'images' => 'images',
        'files' => 'files',
        'barcodes' => 'barcodes',
        'packs' => 'packs',
        'tracking_type' => 'trackingType',
        'tnved' => 'tnved',
        'payment_item_type' => 'paymentItemType',
        'tax_system' => 'taxSystem',
        'attributes' => 'attributes',
        'minimum_balance' => 'minimumBalance',
        'minimum_stock' => 'minimumStock',
        'min_price' => 'minPrice',
        'weighed' => 'weighed',
        'on_tap' => 'onTap',
        'partial_disposal' => 'partialDisposal',
        'things' => 'things',
        'sync_id' => 'syncId',
        'ppe_type' => 'ppeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta' => 'setMeta',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'alcoholic' => 'setAlcoholic',
        'archived' => 'setArchived',
        'tobacco' => 'setTobacco',
        'name' => 'setName',
        'code' => 'setCode',
        'external_code' => 'setExternalCode',
        'path_name' => 'setPathName',
        'article' => 'setArticle',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'vat_enabled' => 'setVatEnabled',
        'use_parent_vat' => 'setUseParentVat',
        'effective_vat' => 'setEffectiveVat',
        'effective_vat_enabled' => 'setEffectiveVatEnabled',
        'discount_prohibited' => 'setDiscountProhibited',
        'variants_count' => 'setVariantsCount',
        'is_serial_trackable' => 'setIsSerialTrackable',
        'shared' => 'setShared',
        'group' => 'setGroup',
        'owner' => 'setOwner',
        'updated' => 'setUpdated',
        'weight' => 'setWeight',
        'volume' => 'setVolume',
        'buy_price' => 'setBuyPrice',
        'sale_prices' => 'setSalePrices',
        'supplier' => 'setSupplier',
        'country' => 'setCountry',
        'uom' => 'setUom',
        'product_folder' => 'setProductFolder',
        'images' => 'setImages',
        'files' => 'setFiles',
        'barcodes' => 'setBarcodes',
        'packs' => 'setPacks',
        'tracking_type' => 'setTrackingType',
        'tnved' => 'setTnved',
        'payment_item_type' => 'setPaymentItemType',
        'tax_system' => 'setTaxSystem',
        'attributes' => 'setAttributes',
        'minimum_balance' => 'setMinimumBalance',
        'minimum_stock' => 'setMinimumStock',
        'min_price' => 'setMinPrice',
        'weighed' => 'setWeighed',
        'on_tap' => 'setOnTap',
        'partial_disposal' => 'setPartialDisposal',
        'things' => 'setThings',
        'sync_id' => 'setSyncId',
        'ppe_type' => 'setPpeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta' => 'getMeta',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'alcoholic' => 'getAlcoholic',
        'archived' => 'getArchived',
        'tobacco' => 'getTobacco',
        'name' => 'getName',
        'code' => 'getCode',
        'external_code' => 'getExternalCode',
        'path_name' => 'getPathName',
        'article' => 'getArticle',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'vat_enabled' => 'getVatEnabled',
        'use_parent_vat' => 'getUseParentVat',
        'effective_vat' => 'getEffectiveVat',
        'effective_vat_enabled' => 'getEffectiveVatEnabled',
        'discount_prohibited' => 'getDiscountProhibited',
        'variants_count' => 'getVariantsCount',
        'is_serial_trackable' => 'getIsSerialTrackable',
        'shared' => 'getShared',
        'group' => 'getGroup',
        'owner' => 'getOwner',
        'updated' => 'getUpdated',
        'weight' => 'getWeight',
        'volume' => 'getVolume',
        'buy_price' => 'getBuyPrice',
        'sale_prices' => 'getSalePrices',
        'supplier' => 'getSupplier',
        'country' => 'getCountry',
        'uom' => 'getUom',
        'product_folder' => 'getProductFolder',
        'images' => 'getImages',
        'files' => 'getFiles',
        'barcodes' => 'getBarcodes',
        'packs' => 'getPacks',
        'tracking_type' => 'getTrackingType',
        'tnved' => 'getTnved',
        'payment_item_type' => 'getPaymentItemType',
        'tax_system' => 'getTaxSystem',
        'attributes' => 'getAttributes',
        'minimum_balance' => 'getMinimumBalance',
        'minimum_stock' => 'getMinimumStock',
        'min_price' => 'getMinPrice',
        'weighed' => 'getWeighed',
        'on_tap' => 'getOnTap',
        'partial_disposal' => 'getPartialDisposal',
        'things' => 'getThings',
        'sync_id' => 'getSyncId',
        'ppe_type' => 'getPpeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_ITEM_TYPE_GOOD = 'GOOD';
    public const PAYMENT_ITEM_TYPE_EXCISABLE_GOOD = 'EXCISABLE_GOOD';
    public const PAYMENT_ITEM_TYPE_COMPOUND_PAYMENT_ITEM = 'COMPOUND_PAYMENT_ITEM';
    public const PAYMENT_ITEM_TYPE_ANOTHER_PAYMENT_ITEM = 'ANOTHER_PAYMENT_ITEM';
    public const TAX_SYSTEM_GENERAL_TAX_SYSTEM = 'GENERAL_TAX_SYSTEM';
    public const TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME = 'SIMPLIFIED_TAX_SYSTEM_INCOME';
    public const TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME = 'SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME';
    public const TAX_SYSTEM_UNIFIED_AGRICULTURAL_TAX = 'UNIFIED_AGRICULTURAL_TAX';
    public const TAX_SYSTEM_PRESUMPTIVE_TAX_SYSTEM = 'PRESUMPTIVE_TAX_SYSTEM';
    public const TAX_SYSTEM_PATENT_BASED = 'PATENT_BASED';
    public const TAX_SYSTEM_TAX_SYSTEM_SAME_AS_GROUP = 'TAX_SYSTEM_SAME_AS_GROUP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentItemTypeAllowableValues()
    {
        return [
            self::PAYMENT_ITEM_TYPE_GOOD,
            self::PAYMENT_ITEM_TYPE_EXCISABLE_GOOD,
            self::PAYMENT_ITEM_TYPE_COMPOUND_PAYMENT_ITEM,
            self::PAYMENT_ITEM_TYPE_ANOTHER_PAYMENT_ITEM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxSystemAllowableValues()
    {
        return [
            self::TAX_SYSTEM_GENERAL_TAX_SYSTEM,
            self::TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME,
            self::TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME,
            self::TAX_SYSTEM_UNIFIED_AGRICULTURAL_TAX,
            self::TAX_SYSTEM_PRESUMPTIVE_TAX_SYSTEM,
            self::TAX_SYSTEM_PATENT_BASED,
            self::TAX_SYSTEM_TAX_SYSTEM_SAME_AS_GROUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('alcoholic', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('tobacco', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('external_code', $data ?? [], null);
        $this->setIfExists('path_name', $data ?? [], null);
        $this->setIfExists('article', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('vat_enabled', $data ?? [], null);
        $this->setIfExists('use_parent_vat', $data ?? [], null);
        $this->setIfExists('effective_vat', $data ?? [], null);
        $this->setIfExists('effective_vat_enabled', $data ?? [], null);
        $this->setIfExists('discount_prohibited', $data ?? [], null);
        $this->setIfExists('variants_count', $data ?? [], null);
        $this->setIfExists('is_serial_trackable', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('volume', $data ?? [], null);
        $this->setIfExists('buy_price', $data ?? [], null);
        $this->setIfExists('sale_prices', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('uom', $data ?? [], null);
        $this->setIfExists('product_folder', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('barcodes', $data ?? [], null);
        $this->setIfExists('packs', $data ?? [], null);
        $this->setIfExists('tracking_type', $data ?? [], null);
        $this->setIfExists('tnved', $data ?? [], null);
        $this->setIfExists('payment_item_type', $data ?? [], null);
        $this->setIfExists('tax_system', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('minimum_balance', $data ?? [], null);
        $this->setIfExists('minimum_stock', $data ?? [], null);
        $this->setIfExists('min_price', $data ?? [], null);
        $this->setIfExists('weighed', $data ?? [], null);
        $this->setIfExists('on_tap', $data ?? [], null);
        $this->setIfExists('partial_disposal', $data ?? [], null);
        $this->setIfExists('things', $data ?? [], null);
        $this->setIfExists('sync_id', $data ?? [], null);
        $this->setIfExists('ppe_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 255)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_code']) && (mb_strlen($this->container['external_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['article']) && (mb_strlen($this->container['article']) > 255)) {
            $invalidProperties[] = "invalid value for 'article', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['vat']) && ($this->container['vat'] > 99)) {
            $invalidProperties[] = "invalid value for 'vat', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['vat']) && ($this->container['vat'] < 0)) {
            $invalidProperties[] = "invalid value for 'vat', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['volume']) && ($this->container['volume'] < 0)) {
            $invalidProperties[] = "invalid value for 'volume', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tnved']) && (mb_strlen($this->container['tnved']) > 255)) {
            $invalidProperties[] = "invalid value for 'tnved', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getPaymentItemTypeAllowableValues();
        if (!is_null($this->container['payment_item_type']) && !in_array($this->container['payment_item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_item_type', must be one of '%s'",
                $this->container['payment_item_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxSystemAllowableValues();
        if (!is_null($this->container['tax_system']) && !in_array($this->container['tax_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_system', must be one of '%s'",
                $this->container['tax_system'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID товара
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID учетной записи
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets alcoholic
     *
     * @return \OpenAPI\Client\Model\ProductAlcoholic|null
     */
    public function getAlcoholic()
    {
        return $this->container['alcoholic'];
    }

    /**
     * Sets alcoholic
     *
     * @param \OpenAPI\Client\Model\ProductAlcoholic|null $alcoholic alcoholic
     *
     * @return self
     */
    public function setAlcoholic($alcoholic)
    {
        if (is_null($alcoholic)) {
            throw new \InvalidArgumentException('non-nullable alcoholic cannot be null');
        }
        $this->container['alcoholic'] = $alcoholic;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Добавлен ли товар в архив
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets tobacco
     *
     * @return bool|null
     */
    public function getTobacco()
    {
        return $this->container['tobacco'];
    }

    /**
     * Sets tobacco
     *
     * @param bool|null $tobacco Признак товара, как табачной продукции
     *
     * @return self
     */
    public function setTobacco($tobacco)
    {
        if (is_null($tobacco)) {
            throw new \InvalidArgumentException('non-nullable tobacco cannot be null');
        }
        $this->container['tobacco'] = $tobacco;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование товара
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Код товара
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string|null
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string|null $external_code Внешний код товара
     *
     * @return self
     */
    public function setExternalCode($external_code)
    {
        if (is_null($external_code)) {
            throw new \InvalidArgumentException('non-nullable external_code cannot be null');
        }
        if ((mb_strlen($external_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_code when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets path_name
     *
     * @return string|null
     */
    public function getPathName()
    {
        return $this->container['path_name'];
    }

    /**
     * Sets path_name
     *
     * @param string|null $path_name Наименование группы, в которую входит товар
     *
     * @return self
     */
    public function setPathName($path_name)
    {
        if (is_null($path_name)) {
            throw new \InvalidArgumentException('non-nullable path_name cannot be null');
        }
        $this->container['path_name'] = $path_name;

        return $this;
    }

    /**
     * Gets article
     *
     * @return string|null
     */
    public function getArticle()
    {
        return $this->container['article'];
    }

    /**
     * Sets article
     *
     * @param string|null $article Артикул
     *
     * @return self
     */
    public function setArticle($article)
    {
        if (is_null($article)) {
            throw new \InvalidArgumentException('non-nullable article cannot be null');
        }
        if ((mb_strlen($article) > 255)) {
            throw new \InvalidArgumentException('invalid length for $article when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['article'] = $article;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Описание товара
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Product., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return int|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param int|null $vat НДС %
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }

        if (($vat > 99)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling Product., must be smaller than or equal to 99.');
        }
        if (($vat < 0)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets vat_enabled
     *
     * @return bool|null
     */
    public function getVatEnabled()
    {
        return $this->container['vat_enabled'];
    }

    /**
     * Sets vat_enabled
     *
     * @param bool|null $vat_enabled Включен ли НДС для товара
     *
     * @return self
     */
    public function setVatEnabled($vat_enabled)
    {
        if (is_null($vat_enabled)) {
            throw new \InvalidArgumentException('non-nullable vat_enabled cannot be null');
        }
        $this->container['vat_enabled'] = $vat_enabled;

        return $this;
    }

    /**
     * Gets use_parent_vat
     *
     * @return bool|null
     */
    public function getUseParentVat()
    {
        return $this->container['use_parent_vat'];
    }

    /**
     * Sets use_parent_vat
     *
     * @param bool|null $use_parent_vat Используется ли ставка НДС родительской группы
     *
     * @return self
     */
    public function setUseParentVat($use_parent_vat)
    {
        if (is_null($use_parent_vat)) {
            throw new \InvalidArgumentException('non-nullable use_parent_vat cannot be null');
        }
        $this->container['use_parent_vat'] = $use_parent_vat;

        return $this;
    }

    /**
     * Gets effective_vat
     *
     * @return int|null
     */
    public function getEffectiveVat()
    {
        return $this->container['effective_vat'];
    }

    /**
     * Sets effective_vat
     *
     * @param int|null $effective_vat Реальный НДС %
     *
     * @return self
     */
    public function setEffectiveVat($effective_vat)
    {
        if (is_null($effective_vat)) {
            throw new \InvalidArgumentException('non-nullable effective_vat cannot be null');
        }
        $this->container['effective_vat'] = $effective_vat;

        return $this;
    }

    /**
     * Gets effective_vat_enabled
     *
     * @return bool|null
     */
    public function getEffectiveVatEnabled()
    {
        return $this->container['effective_vat_enabled'];
    }

    /**
     * Sets effective_vat_enabled
     *
     * @param bool|null $effective_vat_enabled Дополнительный признак для определения разграничения реального НДС
     *
     * @return self
     */
    public function setEffectiveVatEnabled($effective_vat_enabled)
    {
        if (is_null($effective_vat_enabled)) {
            throw new \InvalidArgumentException('non-nullable effective_vat_enabled cannot be null');
        }
        $this->container['effective_vat_enabled'] = $effective_vat_enabled;

        return $this;
    }

    /**
     * Gets discount_prohibited
     *
     * @return bool|null
     */
    public function getDiscountProhibited()
    {
        return $this->container['discount_prohibited'];
    }

    /**
     * Sets discount_prohibited
     *
     * @param bool|null $discount_prohibited Признак запрета скидок
     *
     * @return self
     */
    public function setDiscountProhibited($discount_prohibited)
    {
        if (is_null($discount_prohibited)) {
            throw new \InvalidArgumentException('non-nullable discount_prohibited cannot be null');
        }
        $this->container['discount_prohibited'] = $discount_prohibited;

        return $this;
    }

    /**
     * Gets variants_count
     *
     * @return int|null
     */
    public function getVariantsCount()
    {
        return $this->container['variants_count'];
    }

    /**
     * Sets variants_count
     *
     * @param int|null $variants_count Количество модификаций у данного товара
     *
     * @return self
     */
    public function setVariantsCount($variants_count)
    {
        if (is_null($variants_count)) {
            throw new \InvalidArgumentException('non-nullable variants_count cannot be null');
        }
        $this->container['variants_count'] = $variants_count;

        return $this;
    }

    /**
     * Gets is_serial_trackable
     *
     * @return bool|null
     */
    public function getIsSerialTrackable()
    {
        return $this->container['is_serial_trackable'];
    }

    /**
     * Sets is_serial_trackable
     *
     * @param bool|null $is_serial_trackable Учет по серийным номерам
     *
     * @return self
     */
    public function setIsSerialTrackable($is_serial_trackable)
    {
        if (is_null($is_serial_trackable)) {
            throw new \InvalidArgumentException('non-nullable is_serial_trackable cannot be null');
        }
        $this->container['is_serial_trackable'] = $is_serial_trackable;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Общий доступ
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\Group|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\Group|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated Момент последнего обновления сущности
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Вес
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume Объем
     *
     * @return self
     */
    public function setVolume($volume)
    {
        if (is_null($volume)) {
            throw new \InvalidArgumentException('non-nullable volume cannot be null');
        }

        if (($volume < 0)) {
            throw new \InvalidArgumentException('invalid value for $volume when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets buy_price
     *
     * @return \OpenAPI\Client\Model\BuyPrice|null
     */
    public function getBuyPrice()
    {
        return $this->container['buy_price'];
    }

    /**
     * Sets buy_price
     *
     * @param \OpenAPI\Client\Model\BuyPrice|null $buy_price buy_price
     *
     * @return self
     */
    public function setBuyPrice($buy_price)
    {
        if (is_null($buy_price)) {
            throw new \InvalidArgumentException('non-nullable buy_price cannot be null');
        }
        $this->container['buy_price'] = $buy_price;

        return $this;
    }

    /**
     * Gets sale_prices
     *
     * @return \OpenAPI\Client\Model\SalePrice[]|null
     */
    public function getSalePrices()
    {
        return $this->container['sale_prices'];
    }

    /**
     * Sets sale_prices
     *
     * @param \OpenAPI\Client\Model\SalePrice[]|null $sale_prices Цены продажи
     *
     * @return self
     */
    public function setSalePrices($sale_prices)
    {
        if (is_null($sale_prices)) {
            throw new \InvalidArgumentException('non-nullable sale_prices cannot be null');
        }
        $this->container['sale_prices'] = $sale_prices;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \OpenAPI\Client\Model\Counterparty|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \OpenAPI\Client\Model\Counterparty|null $supplier supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \OpenAPI\Client\Model\Country|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \OpenAPI\Client\Model\Country|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return \OpenAPI\Client\Model\Uom|null
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param \OpenAPI\Client\Model\Uom|null $uom uom
     *
     * @return self
     */
    public function setUom($uom)
    {
        if (is_null($uom)) {
            array_push($this->openAPINullablesSetToNull, 'uom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets product_folder
     *
     * @return \OpenAPI\Client\Model\ProductFolder|null
     */
    public function getProductFolder()
    {
        return $this->container['product_folder'];
    }

    /**
     * Sets product_folder
     *
     * @param \OpenAPI\Client\Model\ProductFolder|null $product_folder product_folder
     *
     * @return self
     */
    public function setProductFolder($product_folder)
    {
        if (is_null($product_folder)) {
            array_push($this->openAPINullablesSetToNull, 'product_folder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_folder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_folder'] = $product_folder;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\ImageList|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\ImageList|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            array_push($this->openAPINullablesSetToNull, 'images');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('images', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\FileList|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\FileList|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets barcodes
     *
     * @return \OpenAPI\Client\Model\Barcode[]|null
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     *
     * @param \OpenAPI\Client\Model\Barcode[]|null $barcodes Штрихкоды товара
     *
     * @return self
     */
    public function setBarcodes($barcodes)
    {
        if (is_null($barcodes)) {
            throw new \InvalidArgumentException('non-nullable barcodes cannot be null');
        }
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets packs
     *
     * @return \OpenAPI\Client\Model\Pack[]|null
     */
    public function getPacks()
    {
        return $this->container['packs'];
    }

    /**
     * Sets packs
     *
     * @param \OpenAPI\Client\Model\Pack[]|null $packs Упаковки товара
     *
     * @return self
     */
    public function setPacks($packs)
    {
        if (is_null($packs)) {
            throw new \InvalidArgumentException('non-nullable packs cannot be null');
        }
        $this->container['packs'] = $packs;

        return $this;
    }

    /**
     * Gets tracking_type
     *
     * @return string|null
     */
    public function getTrackingType()
    {
        return $this->container['tracking_type'];
    }

    /**
     * Sets tracking_type
     *
     * @param string|null $tracking_type Тип маркируемой продукции. Допустимые значения перечислены в константах класса
     *
     * @return self
     */
    public function setTrackingType($tracking_type)
    {
        if (is_null($tracking_type)) {
            throw new \InvalidArgumentException('non-nullable tracking_type cannot be null');
        }
        $this->container['tracking_type'] = $tracking_type;

        return $this;
    }

    /**
     * Gets tnved
     *
     * @return string|null
     */
    public function getTnved()
    {
        return $this->container['tnved'];
    }

    /**
     * Sets tnved
     *
     * @param string|null $tnved Код ТН ВЭД
     *
     * @return self
     */
    public function setTnved($tnved)
    {
        if (is_null($tnved)) {
            throw new \InvalidArgumentException('non-nullable tnved cannot be null');
        }
        if ((mb_strlen($tnved) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tnved when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['tnved'] = $tnved;

        return $this;
    }

    /**
     * Gets payment_item_type
     *
     * @return string|null
     */
    public function getPaymentItemType()
    {
        return $this->container['payment_item_type'];
    }

    /**
     * Sets payment_item_type
     *
     * @param string|null $payment_item_type Признак предмета расчета
     *
     * @return self
     */
    public function setPaymentItemType($payment_item_type)
    {
        if (is_null($payment_item_type)) {
            throw new \InvalidArgumentException('non-nullable payment_item_type cannot be null');
        }
        $allowedValues = $this->getPaymentItemTypeAllowableValues();
        if (!in_array($payment_item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_item_type', must be one of '%s'",
                    $payment_item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_item_type'] = $payment_item_type;

        return $this;
    }

    /**
     * Gets tax_system
     *
     * @return string|null
     */
    public function getTaxSystem()
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param string|null $tax_system Код системы налогообложения
     *
     * @return self
     */
    public function setTaxSystem($tax_system)
    {
        if (is_null($tax_system)) {
            throw new \InvalidArgumentException('non-nullable tax_system cannot be null');
        }
        $allowedValues = $this->getTaxSystemAllowableValues();
        if (!in_array($tax_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_system', must be one of '%s'",
                    $tax_system,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_system'] = $tax_system;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\AttributeAbstract[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\AttributeAbstract[]|null $attributes Дополнительные поля
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets minimum_balance
     *
     * @return float|null
     * @deprecated
     */
    public function getMinimumBalance()
    {
        return $this->container['minimum_balance'];
    }

    /**
     * Sets minimum_balance
     *
     * @param float|null $minimum_balance Неснижаемый остаток (устаревшее)
     *
     * @return self
     * @deprecated
     */
    public function setMinimumBalance($minimum_balance)
    {
        if (is_null($minimum_balance)) {
            throw new \InvalidArgumentException('non-nullable minimum_balance cannot be null');
        }
        $this->container['minimum_balance'] = $minimum_balance;

        return $this;
    }

    /**
     * Gets minimum_stock
     *
     * @return \OpenAPI\Client\Model\MinimumStockAbstract|null
     */
    public function getMinimumStock()
    {
        return $this->container['minimum_stock'];
    }

    /**
     * Sets minimum_stock
     *
     * @param \OpenAPI\Client\Model\MinimumStockAbstract|null $minimum_stock minimum_stock
     *
     * @return self
     */
    public function setMinimumStock($minimum_stock)
    {
        if (is_null($minimum_stock)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimum_stock'] = $minimum_stock;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return \OpenAPI\Client\Model\MinPrice|null
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param \OpenAPI\Client\Model\MinPrice|null $min_price min_price
     *
     * @return self
     */
    public function setMinPrice($min_price)
    {
        if (is_null($min_price)) {
            throw new \InvalidArgumentException('non-nullable min_price cannot be null');
        }
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets weighed
     *
     * @return bool|null
     */
    public function getWeighed()
    {
        return $this->container['weighed'];
    }

    /**
     * Sets weighed
     *
     * @param bool|null $weighed Поле, показывающее является ли товар весовым
     *
     * @return self
     */
    public function setWeighed($weighed)
    {
        if (is_null($weighed)) {
            throw new \InvalidArgumentException('non-nullable weighed cannot be null');
        }
        $this->container['weighed'] = $weighed;

        return $this;
    }

    /**
     * Gets on_tap
     *
     * @return bool|null
     */
    public function getOnTap()
    {
        return $this->container['on_tap'];
    }

    /**
     * Sets on_tap
     *
     * @param bool|null $on_tap Поле, показывающее является ли товар разливным
     *
     * @return self
     */
    public function setOnTap($on_tap)
    {
        if (is_null($on_tap)) {
            throw new \InvalidArgumentException('non-nullable on_tap cannot be null');
        }
        $this->container['on_tap'] = $on_tap;

        return $this;
    }

    /**
     * Gets partial_disposal
     *
     * @return bool|null
     */
    public function getPartialDisposal()
    {
        return $this->container['partial_disposal'];
    }

    /**
     * Sets partial_disposal
     *
     * @param bool|null $partial_disposal Управление состоянием частичного выбытия маркированного товара
     *
     * @return self
     */
    public function setPartialDisposal($partial_disposal)
    {
        if (is_null($partial_disposal)) {
            throw new \InvalidArgumentException('non-nullable partial_disposal cannot be null');
        }
        $this->container['partial_disposal'] = $partial_disposal;

        return $this;
    }

    /**
     * Gets things
     *
     * @return string[]|null
     */
    public function getThings()
    {
        return $this->container['things'];
    }

    /**
     * Sets things
     *
     * @param string[]|null $things Серийные номера
     *
     * @return self
     */
    public function setThings($things)
    {
        if (is_null($things)) {
            throw new \InvalidArgumentException('non-nullable things cannot be null');
        }
        $this->container['things'] = $things;

        return $this;
    }

    /**
     * Gets sync_id
     *
     * @return string|null
     */
    public function getSyncId()
    {
        return $this->container['sync_id'];
    }

    /**
     * Sets sync_id
     *
     * @param string|null $sync_id ID синхронизации
     *
     * @return self
     */
    public function setSyncId($sync_id)
    {
        if (is_null($sync_id)) {
            throw new \InvalidArgumentException('non-nullable sync_id cannot be null');
        }
        $this->container['sync_id'] = $sync_id;

        return $this;
    }

    /**
     * Gets ppe_type
     *
     * @return string|null
     */
    public function getPpeType()
    {
        return $this->container['ppe_type'];
    }

    /**
     * Sets ppe_type
     *
     * @param string|null $ppe_type Код вида номенклатурной классификации медицинских средств индивидуальной защиты. Допустимые значения перечислены в константах класса
     *
     * @return self
     */
    public function setPpeType($ppe_type)
    {
        if (is_null($ppe_type)) {
            throw new \InvalidArgumentException('non-nullable ppe_type cannot be null');
        }
        $this->container['ppe_type'] = $ppe_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


