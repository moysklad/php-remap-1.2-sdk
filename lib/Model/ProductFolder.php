<?php
/**
 * ProductFolder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductFolder Class Doc Comment
 *
 * @category Class
 * @description Группа товаров
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductFolder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductFolder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta' => '\OpenAPI\Client\Model\Meta',
        'id' => 'string',
        'account_id' => 'string',
        'name' => 'string',
        'code' => 'string',
        'external_code' => 'string',
        'archived' => 'bool',
        'path_name' => 'string',
        'description' => 'string',
        'vat' => 'int',
        'vat_enabled' => 'bool',
        'effective_vat' => 'int',
        'effective_vat_enabled' => 'bool',
        'use_parent_vat' => 'bool',
        'shared' => 'bool',
        'group' => '\OpenAPI\Client\Model\Group',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'updated' => '\DateTime',
        'product_folder' => '\OpenAPI\Client\Model\ProductFolder',
        'tax_system' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta' => null,
        'id' => 'uuid',
        'account_id' => 'uuid',
        'name' => null,
        'code' => null,
        'external_code' => null,
        'archived' => null,
        'path_name' => null,
        'description' => null,
        'vat' => null,
        'vat_enabled' => null,
        'effective_vat' => null,
        'effective_vat_enabled' => null,
        'use_parent_vat' => null,
        'shared' => null,
        'group' => null,
        'owner' => null,
        'updated' => 'date-time',
        'product_folder' => null,
        'tax_system' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta' => false,
        'id' => false,
        'account_id' => false,
        'name' => false,
        'code' => false,
        'external_code' => false,
        'archived' => false,
        'path_name' => false,
        'description' => true,
        'vat' => false,
        'vat_enabled' => false,
        'effective_vat' => false,
        'effective_vat_enabled' => false,
        'use_parent_vat' => false,
        'shared' => false,
        'group' => false,
        'owner' => true,
        'updated' => false,
        'product_folder' => false,
        'tax_system' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta' => 'meta',
        'id' => 'id',
        'account_id' => 'accountId',
        'name' => 'name',
        'code' => 'code',
        'external_code' => 'externalCode',
        'archived' => 'archived',
        'path_name' => 'pathName',
        'description' => 'description',
        'vat' => 'vat',
        'vat_enabled' => 'vatEnabled',
        'effective_vat' => 'effectiveVat',
        'effective_vat_enabled' => 'effectiveVatEnabled',
        'use_parent_vat' => 'useParentVat',
        'shared' => 'shared',
        'group' => 'group',
        'owner' => 'owner',
        'updated' => 'updated',
        'product_folder' => 'productFolder',
        'tax_system' => 'taxSystem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta' => 'setMeta',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'code' => 'setCode',
        'external_code' => 'setExternalCode',
        'archived' => 'setArchived',
        'path_name' => 'setPathName',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'vat_enabled' => 'setVatEnabled',
        'effective_vat' => 'setEffectiveVat',
        'effective_vat_enabled' => 'setEffectiveVatEnabled',
        'use_parent_vat' => 'setUseParentVat',
        'shared' => 'setShared',
        'group' => 'setGroup',
        'owner' => 'setOwner',
        'updated' => 'setUpdated',
        'product_folder' => 'setProductFolder',
        'tax_system' => 'setTaxSystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta' => 'getMeta',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'code' => 'getCode',
        'external_code' => 'getExternalCode',
        'archived' => 'getArchived',
        'path_name' => 'getPathName',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'vat_enabled' => 'getVatEnabled',
        'effective_vat' => 'getEffectiveVat',
        'effective_vat_enabled' => 'getEffectiveVatEnabled',
        'use_parent_vat' => 'getUseParentVat',
        'shared' => 'getShared',
        'group' => 'getGroup',
        'owner' => 'getOwner',
        'updated' => 'getUpdated',
        'product_folder' => 'getProductFolder',
        'tax_system' => 'getTaxSystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_SYSTEM_GENERAL_TAX_SYSTEM = 'GENERAL_TAX_SYSTEM';
    public const TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME = 'SIMPLIFIED_TAX_SYSTEM_INCOME';
    public const TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME = 'SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME';
    public const TAX_SYSTEM_UNIFIED_AGRICULTURAL_TAX = 'UNIFIED_AGRICULTURAL_TAX';
    public const TAX_SYSTEM_PRESUMPTIVE_TAX_SYSTEM = 'PRESUMPTIVE_TAX_SYSTEM';
    public const TAX_SYSTEM_PATENT_BASED = 'PATENT_BASED';
    public const TAX_SYSTEM_TAX_SYSTEM_SAME_AS_GROUP = 'TAX_SYSTEM_SAME_AS_GROUP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxSystemAllowableValues()
    {
        return [
            self::TAX_SYSTEM_GENERAL_TAX_SYSTEM,
            self::TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME,
            self::TAX_SYSTEM_SIMPLIFIED_TAX_SYSTEM_INCOME_OUTCOME,
            self::TAX_SYSTEM_UNIFIED_AGRICULTURAL_TAX,
            self::TAX_SYSTEM_PRESUMPTIVE_TAX_SYSTEM,
            self::TAX_SYSTEM_PATENT_BASED,
            self::TAX_SYSTEM_TAX_SYSTEM_SAME_AS_GROUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('external_code', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('path_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('vat_enabled', $data ?? [], null);
        $this->setIfExists('effective_vat', $data ?? [], null);
        $this->setIfExists('effective_vat_enabled', $data ?? [], null);
        $this->setIfExists('use_parent_vat', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('product_folder', $data ?? [], null);
        $this->setIfExists('tax_system', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 255)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_code']) && (mb_strlen($this->container['external_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['vat']) && ($this->container['vat'] > 99)) {
            $invalidProperties[] = "invalid value for 'vat', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['vat']) && ($this->container['vat'] < 0)) {
            $invalidProperties[] = "invalid value for 'vat', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTaxSystemAllowableValues();
        if (!is_null($this->container['tax_system']) && !in_array($this->container['tax_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_system', must be one of '%s'",
                $this->container['tax_system'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID группы товаров
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID учетной записи
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование группы товаров
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductFolder., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Код группы товаров
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ProductFolder., must be smaller than or equal to 255.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string|null
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string|null $external_code Внешний код группы товаров
     *
     * @return self
     */
    public function setExternalCode($external_code)
    {
        if (is_null($external_code)) {
            throw new \InvalidArgumentException('non-nullable external_code cannot be null');
        }
        if ((mb_strlen($external_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_code when calling ProductFolder., must be smaller than or equal to 255.');
        }

        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Добавлена ли группа товаров в архив
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets path_name
     *
     * @return string|null
     */
    public function getPathName()
    {
        return $this->container['path_name'];
    }

    /**
     * Sets path_name
     *
     * @param string|null $path_name Наименование родительской группы
     *
     * @return self
     */
    public function setPathName($path_name)
    {
        if (is_null($path_name)) {
            throw new \InvalidArgumentException('non-nullable path_name cannot be null');
        }
        $this->container['path_name'] = $path_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Описание группы товаров
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductFolder., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return int|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param int|null $vat НДС %
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }

        if (($vat > 99)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling ProductFolder., must be smaller than or equal to 99.');
        }
        if (($vat < 0)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling ProductFolder., must be bigger than or equal to 0.');
        }

        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets vat_enabled
     *
     * @return bool|null
     */
    public function getVatEnabled()
    {
        return $this->container['vat_enabled'];
    }

    /**
     * Sets vat_enabled
     *
     * @param bool|null $vat_enabled Включен ли НДС для группы
     *
     * @return self
     */
    public function setVatEnabled($vat_enabled)
    {
        if (is_null($vat_enabled)) {
            throw new \InvalidArgumentException('non-nullable vat_enabled cannot be null');
        }
        $this->container['vat_enabled'] = $vat_enabled;

        return $this;
    }

    /**
     * Gets effective_vat
     *
     * @return int|null
     */
    public function getEffectiveVat()
    {
        return $this->container['effective_vat'];
    }

    /**
     * Sets effective_vat
     *
     * @param int|null $effective_vat Реальный НДС %
     *
     * @return self
     */
    public function setEffectiveVat($effective_vat)
    {
        if (is_null($effective_vat)) {
            throw new \InvalidArgumentException('non-nullable effective_vat cannot be null');
        }
        $this->container['effective_vat'] = $effective_vat;

        return $this;
    }

    /**
     * Gets effective_vat_enabled
     *
     * @return bool|null
     */
    public function getEffectiveVatEnabled()
    {
        return $this->container['effective_vat_enabled'];
    }

    /**
     * Sets effective_vat_enabled
     *
     * @param bool|null $effective_vat_enabled Дополнительный признак для определения разграничения реального НДС
     *
     * @return self
     */
    public function setEffectiveVatEnabled($effective_vat_enabled)
    {
        if (is_null($effective_vat_enabled)) {
            throw new \InvalidArgumentException('non-nullable effective_vat_enabled cannot be null');
        }
        $this->container['effective_vat_enabled'] = $effective_vat_enabled;

        return $this;
    }

    /**
     * Gets use_parent_vat
     *
     * @return bool|null
     */
    public function getUseParentVat()
    {
        return $this->container['use_parent_vat'];
    }

    /**
     * Sets use_parent_vat
     *
     * @param bool|null $use_parent_vat Используется ли ставка НДС родительской группы
     *
     * @return self
     */
    public function setUseParentVat($use_parent_vat)
    {
        if (is_null($use_parent_vat)) {
            throw new \InvalidArgumentException('non-nullable use_parent_vat cannot be null');
        }
        $this->container['use_parent_vat'] = $use_parent_vat;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Общий доступ
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\Group|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\Group|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated Момент последнего обновления
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets product_folder
     *
     * @return \OpenAPI\Client\Model\ProductFolder|null
     */
    public function getProductFolder()
    {
        return $this->container['product_folder'];
    }

    /**
     * Sets product_folder
     *
     * @param \OpenAPI\Client\Model\ProductFolder|null $product_folder product_folder
     *
     * @return self
     */
    public function setProductFolder($product_folder)
    {
        if (is_null($product_folder)) {
            throw new \InvalidArgumentException('non-nullable product_folder cannot be null');
        }
        $this->container['product_folder'] = $product_folder;

        return $this;
    }

    /**
     * Gets tax_system
     *
     * @return string|null
     */
    public function getTaxSystem()
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param string|null $tax_system Код системы налогообложения
     *
     * @return self
     */
    public function setTaxSystem($tax_system)
    {
        if (is_null($tax_system)) {
            throw new \InvalidArgumentException('non-nullable tax_system cannot be null');
        }
        $allowedValues = $this->getTaxSystemAllowableValues();
        if (!in_array($tax_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_system', must be one of '%s'",
                    $tax_system,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_system'] = $tax_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


