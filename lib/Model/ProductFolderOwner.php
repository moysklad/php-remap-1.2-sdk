<?php
/**
 * ProductFolderOwner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductFolderOwner Class Doc Comment
 *
 * @category Class
 * @description Владелец группы товаров. Может быть Meta объектом или полным объектом в зависимости от expand параметра.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductFolderOwner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'product_folder_owner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'href' => 'string',
        'metadata_href' => 'string',
        'type' => 'string',
        'media_type' => 'string',
        'uuid_href' => 'string',
        'download_href' => 'string',
        'meta' => '\OpenAPI\Client\Model\Meta',
        'id' => 'string',
        'account_id' => 'string',
        'name' => 'string',
        'external_code' => 'string',
        'archived' => 'bool',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'description' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'full_name' => 'string',
        'short_fio' => 'string',
        'shared' => 'bool',
        'group' => '\OpenAPI\Client\Model\CounterpartyGroup',
        'owner' => '\OpenAPI\Client\Model\CounterpartyOwner',
        'inn' => 'string',
        'position' => 'string',
        'uid' => 'string',
        'salary' => '\OpenAPI\Client\Model\EmployeeSalary',
        'cashiers' => '\OpenAPI\Client\Model\EmployeeCashiersInner[]',
        'image' => '\OpenAPI\Client\Model\Image',
        'attributes' => '\OpenAPI\Client\Model\Attribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'href' => 'uri',
        'metadata_href' => 'uri',
        'type' => null,
        'media_type' => null,
        'uuid_href' => 'uri',
        'download_href' => 'uri',
        'meta' => null,
        'id' => 'uuid',
        'account_id' => 'uuid',
        'name' => null,
        'external_code' => null,
        'archived' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'description' => null,
        'email' => 'email',
        'phone' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'full_name' => null,
        'short_fio' => null,
        'shared' => null,
        'group' => null,
        'owner' => null,
        'inn' => null,
        'position' => null,
        'uid' => null,
        'salary' => null,
        'cashiers' => null,
        'image' => null,
        'attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'href' => false,
        'metadata_href' => false,
        'type' => false,
        'media_type' => false,
        'uuid_href' => false,
        'download_href' => false,
        'meta' => false,
        'id' => false,
        'account_id' => false,
        'name' => false,
        'external_code' => false,
        'archived' => false,
        'created' => false,
        'updated' => false,
        'description' => false,
        'email' => false,
        'phone' => false,
        'first_name' => false,
        'middle_name' => false,
        'last_name' => false,
        'full_name' => false,
        'short_fio' => false,
        'shared' => false,
        'group' => false,
        'owner' => false,
        'inn' => false,
        'position' => false,
        'uid' => false,
        'salary' => false,
        'cashiers' => false,
        'image' => false,
        'attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'href' => 'href',
        'metadata_href' => 'metadataHref',
        'type' => 'type',
        'media_type' => 'mediaType',
        'uuid_href' => 'uuidHref',
        'download_href' => 'downloadHref',
        'meta' => 'meta',
        'id' => 'id',
        'account_id' => 'accountId',
        'name' => 'name',
        'external_code' => 'externalCode',
        'archived' => 'archived',
        'created' => 'created',
        'updated' => 'updated',
        'description' => 'description',
        'email' => 'email',
        'phone' => 'phone',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_name' => 'lastName',
        'full_name' => 'fullName',
        'short_fio' => 'shortFio',
        'shared' => 'shared',
        'group' => 'group',
        'owner' => 'owner',
        'inn' => 'inn',
        'position' => 'position',
        'uid' => 'uid',
        'salary' => 'salary',
        'cashiers' => 'cashiers',
        'image' => 'image',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'href' => 'setHref',
        'metadata_href' => 'setMetadataHref',
        'type' => 'setType',
        'media_type' => 'setMediaType',
        'uuid_href' => 'setUuidHref',
        'download_href' => 'setDownloadHref',
        'meta' => 'setMeta',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'external_code' => 'setExternalCode',
        'archived' => 'setArchived',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'short_fio' => 'setShortFio',
        'shared' => 'setShared',
        'group' => 'setGroup',
        'owner' => 'setOwner',
        'inn' => 'setInn',
        'position' => 'setPosition',
        'uid' => 'setUid',
        'salary' => 'setSalary',
        'cashiers' => 'setCashiers',
        'image' => 'setImage',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'href' => 'getHref',
        'metadata_href' => 'getMetadataHref',
        'type' => 'getType',
        'media_type' => 'getMediaType',
        'uuid_href' => 'getUuidHref',
        'download_href' => 'getDownloadHref',
        'meta' => 'getMeta',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'external_code' => 'getExternalCode',
        'archived' => 'getArchived',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'short_fio' => 'getShortFio',
        'shared' => 'getShared',
        'group' => 'getGroup',
        'owner' => 'getOwner',
        'inn' => 'getInn',
        'position' => 'getPosition',
        'uid' => 'getUid',
        'salary' => 'getSalary',
        'cashiers' => 'getCashiers',
        'image' => 'getImage',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('href', $data ?? [], null);
        $this->setIfExists('metadata_href', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('uuid_href', $data ?? [], null);
        $this->setIfExists('download_href', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_code', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('short_fio', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('salary', $data ?? [], null);
        $this->setIfExists('cashiers', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_code']) && (mb_strlen($this->container['external_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inn']) && (mb_strlen($this->container['inn']) > 255)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['position']) && (mb_strlen($this->container['position']) > 255)) {
            $invalidProperties[] = "invalid value for 'position', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['uid']) && (mb_strlen($this->container['uid']) > 255)) {
            $invalidProperties[] = "invalid value for 'uid', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets href
     *
     * @return string|null
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string|null $href Ссылка на объект
     *
     * @return self
     */
    public function setHref($href)
    {
        if (is_null($href)) {
            throw new \InvalidArgumentException('non-nullable href cannot be null');
        }
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets metadata_href
     *
     * @return string|null
     */
    public function getMetadataHref()
    {
        return $this->container['metadata_href'];
    }

    /**
     * Sets metadata_href
     *
     * @param string|null $metadata_href Ссылка на метаданные сущности
     *
     * @return self
     */
    public function setMetadataHref($metadata_href)
    {
        if (is_null($metadata_href)) {
            throw new \InvalidArgumentException('non-nullable metadata_href cannot be null');
        }
        $this->container['metadata_href'] = $metadata_href;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Тип объекта
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type Тип данных
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets uuid_href
     *
     * @return string|null
     */
    public function getUuidHref()
    {
        return $this->container['uuid_href'];
    }

    /**
     * Sets uuid_href
     *
     * @param string|null $uuid_href Ссылка на объект на UI
     *
     * @return self
     */
    public function setUuidHref($uuid_href)
    {
        if (is_null($uuid_href)) {
            throw new \InvalidArgumentException('non-nullable uuid_href cannot be null');
        }
        $this->container['uuid_href'] = $uuid_href;

        return $this;
    }

    /**
     * Gets download_href
     *
     * @return string|null
     */
    public function getDownloadHref()
    {
        return $this->container['download_href'];
    }

    /**
     * Sets download_href
     *
     * @param string|null $download_href Ссылка на скачивание (для изображений)
     *
     * @return self
     */
    public function setDownloadHref($download_href)
    {
        if (is_null($download_href)) {
            throw new \InvalidArgumentException('non-nullable download_href cannot be null');
        }
        $this->container['download_href'] = $download_href;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID сотрудника
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID учетной записи
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование сотрудника
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string|null
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string|null $external_code Внешний код сотрудника
     *
     * @return self
     */
    public function setExternalCode($external_code)
    {
        if (is_null($external_code)) {
            throw new \InvalidArgumentException('non-nullable external_code cannot be null');
        }
        if ((mb_strlen($external_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_code when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Добавлен ли сотрудник в архив
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Момент создания
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated Момент последнего обновления
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Комментарий к сотруднику
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductFolderOwner., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Адрес электронной почты
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Номер телефона
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Имя
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Отчество
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        if ((mb_strlen($middle_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Фамилия
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Полное имя сотрудника
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets short_fio
     *
     * @return string|null
     */
    public function getShortFio()
    {
        return $this->container['short_fio'];
    }

    /**
     * Sets short_fio
     *
     * @param string|null $short_fio Краткое ФИО сотрудника
     *
     * @return self
     */
    public function setShortFio($short_fio)
    {
        if (is_null($short_fio)) {
            throw new \InvalidArgumentException('non-nullable short_fio cannot be null');
        }
        $this->container['short_fio'] = $short_fio;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Общий доступ
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\CounterpartyGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\CounterpartyGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\CounterpartyOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\CounterpartyOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН сотрудника (в формате ИНН физического лица)
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        if ((mb_strlen($inn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position Должность сотрудника
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        if ((mb_strlen($position) > 255)) {
            throw new \InvalidArgumentException('invalid length for $position when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string|null $uid Логин сотрудника
     *
     * @return self
     */
    public function setUid($uid)
    {
        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }
        if ((mb_strlen($uid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $uid when calling ProductFolderOwner., must be smaller than or equal to 255.');
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets salary
     *
     * @return \OpenAPI\Client\Model\EmployeeSalary|null
     */
    public function getSalary()
    {
        return $this->container['salary'];
    }

    /**
     * Sets salary
     *
     * @param \OpenAPI\Client\Model\EmployeeSalary|null $salary salary
     *
     * @return self
     */
    public function setSalary($salary)
    {
        if (is_null($salary)) {
            throw new \InvalidArgumentException('non-nullable salary cannot be null');
        }
        $this->container['salary'] = $salary;

        return $this;
    }

    /**
     * Gets cashiers
     *
     * @return \OpenAPI\Client\Model\EmployeeCashiersInner[]|null
     */
    public function getCashiers()
    {
        return $this->container['cashiers'];
    }

    /**
     * Sets cashiers
     *
     * @param \OpenAPI\Client\Model\EmployeeCashiersInner[]|null $cashiers Массив кассиров
     *
     * @return self
     */
    public function setCashiers($cashiers)
    {
        if (is_null($cashiers)) {
            throw new \InvalidArgumentException('non-nullable cashiers cannot be null');
        }
        $this->container['cashiers'] = $cashiers;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\Image|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\Attribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\Attribute[]|null $attributes Дополнительные поля сотрудника
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


