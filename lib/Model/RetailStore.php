<?php
/**
 * RetailStore
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RetailStore Class Doc Comment
 *
 * @category Class
 * @description Точка продаж
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetailStore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetailStore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'active' => 'bool',
        'archived' => 'bool',
        'shared' => 'bool',
        'address' => 'string',
        'address_full' => '\OpenAPI\Client\Model\Address',
        'external_code' => 'string',
        'updated' => '\DateTime',
        'meta' => '\OpenAPI\Client\Model\Meta',
        'organization' => '\OpenAPI\Client\Model\RetailStoreOrganization',
        'store' => '\OpenAPI\Client\Model\Store',
        'group' => '\OpenAPI\Client\Model\Group',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'price_type' => '\OpenAPI\Client\Model\PriceType',
        'environment' => '\OpenAPI\Client\Model\Environment',
        'state' => '\OpenAPI\Client\Model\Status',
        'fiscal_type' => '\OpenAPI\Client\Model\FiscalType',
        'default_tax_system' => '\OpenAPI\Client\Model\TaxSystem',
        'order_tax_system' => '\OpenAPI\Client\Model\TaxSystem',
        'minion_to_master_type' => '\OpenAPI\Client\Model\MinionToMasterType',
        'tobacco_mrc_control_type' => '\OpenAPI\Client\Model\TobaccoMrcControlType',
        'marking_selling_mode' => '\OpenAPI\Client\Model\MarkingSellingMode',
        'marks_check_mode' => '\OpenAPI\Client\Model\MarksCheckMode',
        'priority_ofd_send' => '\OpenAPI\Client\Model\PriorityOfdSend',
        'allow_create_products' => 'bool',
        'allow_custom_price' => 'bool',
        'allow_delete_receipt_positions' => 'bool',
        'allow_sell_tobacco_without_mrc' => 'bool',
        'auth_token_attached' => 'bool',
        'control_cashier_choice' => 'bool',
        'control_shipping_stock' => 'bool',
        'create_cash_in_on_retail_shift_closing' => 'bool',
        'create_payment_in_on_retail_shift_closing' => 'bool',
        'create_agents_tags' => 'string[]',
        'create_order_with_state' => '\OpenAPI\Client\Model\RetailStoreCreateOrderWithState',
        'customer_order_states' => '\OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]',
        'discount_enable' => 'bool',
        'discount_max_percent' => 'int',
        'enable_returns_with_no_reason' => 'bool',
        'issue_orders' => 'bool',
        'last_operation_names' => '\OpenAPI\Client\Model\LastOperationNames[]',
        'master_retail_stores' => '\OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]',
        'ofd_enabled' => 'bool',
        'only_in_stock' => 'bool',
        'order_to_state' => '\OpenAPI\Client\Model\RetailStoreOrderToState',
        'print_always' => 'bool',
        'product_folders' => '\OpenAPI\Client\Model\RetailStoreProductFolders',
        'receipt_template' => '\OpenAPI\Client\Model\RetailStoreReceiptTemplate',
        'required_fio' => 'bool',
        'required_phone' => 'bool',
        'required_email' => 'bool',
        'required_birthdate' => 'bool',
        'required_sex' => 'bool',
        'required_discount_card_number' => 'bool',
        'reserve_prepaid_goods' => 'bool',
        'return_from_closed_shift_enabled' => 'bool',
        'sell_reserves' => 'bool',
        'send_marks_for_check' => 'bool',
        'send_marks_to_chestny_znak_on_cloud' => 'bool',
        'sync_agents' => 'bool',
        'show_beer_on_tap' => 'bool',
        'qr_pay_enabled' => 'bool',
        'bank_percent' => 'float',
        'qr_bank_percent' => 'float',
        'demand_prefix' => 'string',
        'qr_terminal_id' => 'string',
        'id_qr' => 'string',
        'acquire' => '\OpenAPI\Client\Model\RetailStoreAcquire',
        'cashiers' => '\OpenAPI\Client\Model\RetailStoreCashiers',
        'qr_acquire' => '\OpenAPI\Client\Model\RetailStoreQrAcquire'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_id' => 'uuid',
        'name' => null,
        'description' => null,
        'active' => null,
        'archived' => null,
        'shared' => null,
        'address' => null,
        'address_full' => null,
        'external_code' => null,
        'updated' => 'date-time',
        'meta' => null,
        'organization' => null,
        'store' => null,
        'group' => null,
        'owner' => null,
        'price_type' => null,
        'environment' => null,
        'state' => null,
        'fiscal_type' => null,
        'default_tax_system' => null,
        'order_tax_system' => null,
        'minion_to_master_type' => null,
        'tobacco_mrc_control_type' => null,
        'marking_selling_mode' => null,
        'marks_check_mode' => null,
        'priority_ofd_send' => null,
        'allow_create_products' => null,
        'allow_custom_price' => null,
        'allow_delete_receipt_positions' => null,
        'allow_sell_tobacco_without_mrc' => null,
        'auth_token_attached' => null,
        'control_cashier_choice' => null,
        'control_shipping_stock' => null,
        'create_cash_in_on_retail_shift_closing' => null,
        'create_payment_in_on_retail_shift_closing' => null,
        'create_agents_tags' => null,
        'create_order_with_state' => null,
        'customer_order_states' => null,
        'discount_enable' => null,
        'discount_max_percent' => null,
        'enable_returns_with_no_reason' => null,
        'issue_orders' => null,
        'last_operation_names' => null,
        'master_retail_stores' => null,
        'ofd_enabled' => null,
        'only_in_stock' => null,
        'order_to_state' => null,
        'print_always' => null,
        'product_folders' => null,
        'receipt_template' => null,
        'required_fio' => null,
        'required_phone' => null,
        'required_email' => null,
        'required_birthdate' => null,
        'required_sex' => null,
        'required_discount_card_number' => null,
        'reserve_prepaid_goods' => null,
        'return_from_closed_shift_enabled' => null,
        'sell_reserves' => null,
        'send_marks_for_check' => null,
        'send_marks_to_chestny_znak_on_cloud' => null,
        'sync_agents' => null,
        'show_beer_on_tap' => null,
        'qr_pay_enabled' => null,
        'bank_percent' => 'double',
        'qr_bank_percent' => 'double',
        'demand_prefix' => null,
        'qr_terminal_id' => null,
        'id_qr' => null,
        'acquire' => null,
        'cashiers' => null,
        'qr_acquire' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'name' => false,
        'description' => false,
        'active' => false,
        'archived' => false,
        'shared' => false,
        'address' => false,
        'address_full' => false,
        'external_code' => false,
        'updated' => false,
        'meta' => false,
        'organization' => false,
        'store' => false,
        'group' => false,
        'owner' => true,
        'price_type' => false,
        'environment' => false,
        'state' => false,
        'fiscal_type' => false,
        'default_tax_system' => false,
        'order_tax_system' => false,
        'minion_to_master_type' => false,
        'tobacco_mrc_control_type' => false,
        'marking_selling_mode' => false,
        'marks_check_mode' => false,
        'priority_ofd_send' => false,
        'allow_create_products' => false,
        'allow_custom_price' => false,
        'allow_delete_receipt_positions' => false,
        'allow_sell_tobacco_without_mrc' => false,
        'auth_token_attached' => false,
        'control_cashier_choice' => false,
        'control_shipping_stock' => false,
        'create_cash_in_on_retail_shift_closing' => false,
        'create_payment_in_on_retail_shift_closing' => false,
        'create_agents_tags' => false,
        'create_order_with_state' => false,
        'customer_order_states' => false,
        'discount_enable' => false,
        'discount_max_percent' => false,
        'enable_returns_with_no_reason' => false,
        'issue_orders' => false,
        'last_operation_names' => false,
        'master_retail_stores' => false,
        'ofd_enabled' => false,
        'only_in_stock' => false,
        'order_to_state' => false,
        'print_always' => false,
        'product_folders' => false,
        'receipt_template' => false,
        'required_fio' => false,
        'required_phone' => false,
        'required_email' => false,
        'required_birthdate' => false,
        'required_sex' => false,
        'required_discount_card_number' => false,
        'reserve_prepaid_goods' => false,
        'return_from_closed_shift_enabled' => false,
        'sell_reserves' => false,
        'send_marks_for_check' => false,
        'send_marks_to_chestny_znak_on_cloud' => false,
        'sync_agents' => false,
        'show_beer_on_tap' => false,
        'qr_pay_enabled' => false,
        'bank_percent' => false,
        'qr_bank_percent' => false,
        'demand_prefix' => false,
        'qr_terminal_id' => false,
        'id_qr' => false,
        'acquire' => false,
        'cashiers' => false,
        'qr_acquire' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountId',
        'name' => 'name',
        'description' => 'description',
        'active' => 'active',
        'archived' => 'archived',
        'shared' => 'shared',
        'address' => 'address',
        'address_full' => 'addressFull',
        'external_code' => 'externalCode',
        'updated' => 'updated',
        'meta' => 'meta',
        'organization' => 'organization',
        'store' => 'store',
        'group' => 'group',
        'owner' => 'owner',
        'price_type' => 'priceType',
        'environment' => 'environment',
        'state' => 'state',
        'fiscal_type' => 'fiscalType',
        'default_tax_system' => 'defaultTaxSystem',
        'order_tax_system' => 'orderTaxSystem',
        'minion_to_master_type' => 'minionToMasterType',
        'tobacco_mrc_control_type' => 'tobaccoMrcControlType',
        'marking_selling_mode' => 'markingSellingMode',
        'marks_check_mode' => 'marksCheckMode',
        'priority_ofd_send' => 'priorityOfdSend',
        'allow_create_products' => 'allowCreateProducts',
        'allow_custom_price' => 'allowCustomPrice',
        'allow_delete_receipt_positions' => 'allowDeleteReceiptPositions',
        'allow_sell_tobacco_without_mrc' => 'allowSellTobaccoWithoutMRC',
        'auth_token_attached' => 'authTokenAttached',
        'control_cashier_choice' => 'controlCashierChoice',
        'control_shipping_stock' => 'controlShippingStock',
        'create_cash_in_on_retail_shift_closing' => 'createCashInOnRetailShiftClosing',
        'create_payment_in_on_retail_shift_closing' => 'createPaymentInOnRetailShiftClosing',
        'create_agents_tags' => 'createAgentsTags',
        'create_order_with_state' => 'createOrderWithState',
        'customer_order_states' => 'customerOrderStates',
        'discount_enable' => 'discountEnable',
        'discount_max_percent' => 'discountMaxPercent',
        'enable_returns_with_no_reason' => 'enableReturnsWithNoReason',
        'issue_orders' => 'issueOrders',
        'last_operation_names' => 'lastOperationNames',
        'master_retail_stores' => 'masterRetailStores',
        'ofd_enabled' => 'ofdEnabled',
        'only_in_stock' => 'onlyInStock',
        'order_to_state' => 'orderToState',
        'print_always' => 'printAlways',
        'product_folders' => 'productFolders',
        'receipt_template' => 'receiptTemplate',
        'required_fio' => 'requiredFio',
        'required_phone' => 'requiredPhone',
        'required_email' => 'requiredEmail',
        'required_birthdate' => 'requiredBirthdate',
        'required_sex' => 'requiredSex',
        'required_discount_card_number' => 'requiredDiscountCardNumber',
        'reserve_prepaid_goods' => 'reservePrepaidGoods',
        'return_from_closed_shift_enabled' => 'returnFromClosedShiftEnabled',
        'sell_reserves' => 'sellReserves',
        'send_marks_for_check' => 'sendMarksForCheck',
        'send_marks_to_chestny_znak_on_cloud' => 'sendMarksToChestnyZnakOnCloud',
        'sync_agents' => 'syncAgents',
        'show_beer_on_tap' => 'showBeerOnTap',
        'qr_pay_enabled' => 'qrPayEnabled',
        'bank_percent' => 'bankPercent',
        'qr_bank_percent' => 'qrBankPercent',
        'demand_prefix' => 'demandPrefix',
        'qr_terminal_id' => 'qrTerminalId',
        'id_qr' => 'idQR',
        'acquire' => 'acquire',
        'cashiers' => 'cashiers',
        'qr_acquire' => 'qrAcquire'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'description' => 'setDescription',
        'active' => 'setActive',
        'archived' => 'setArchived',
        'shared' => 'setShared',
        'address' => 'setAddress',
        'address_full' => 'setAddressFull',
        'external_code' => 'setExternalCode',
        'updated' => 'setUpdated',
        'meta' => 'setMeta',
        'organization' => 'setOrganization',
        'store' => 'setStore',
        'group' => 'setGroup',
        'owner' => 'setOwner',
        'price_type' => 'setPriceType',
        'environment' => 'setEnvironment',
        'state' => 'setState',
        'fiscal_type' => 'setFiscalType',
        'default_tax_system' => 'setDefaultTaxSystem',
        'order_tax_system' => 'setOrderTaxSystem',
        'minion_to_master_type' => 'setMinionToMasterType',
        'tobacco_mrc_control_type' => 'setTobaccoMrcControlType',
        'marking_selling_mode' => 'setMarkingSellingMode',
        'marks_check_mode' => 'setMarksCheckMode',
        'priority_ofd_send' => 'setPriorityOfdSend',
        'allow_create_products' => 'setAllowCreateProducts',
        'allow_custom_price' => 'setAllowCustomPrice',
        'allow_delete_receipt_positions' => 'setAllowDeleteReceiptPositions',
        'allow_sell_tobacco_without_mrc' => 'setAllowSellTobaccoWithoutMrc',
        'auth_token_attached' => 'setAuthTokenAttached',
        'control_cashier_choice' => 'setControlCashierChoice',
        'control_shipping_stock' => 'setControlShippingStock',
        'create_cash_in_on_retail_shift_closing' => 'setCreateCashInOnRetailShiftClosing',
        'create_payment_in_on_retail_shift_closing' => 'setCreatePaymentInOnRetailShiftClosing',
        'create_agents_tags' => 'setCreateAgentsTags',
        'create_order_with_state' => 'setCreateOrderWithState',
        'customer_order_states' => 'setCustomerOrderStates',
        'discount_enable' => 'setDiscountEnable',
        'discount_max_percent' => 'setDiscountMaxPercent',
        'enable_returns_with_no_reason' => 'setEnableReturnsWithNoReason',
        'issue_orders' => 'setIssueOrders',
        'last_operation_names' => 'setLastOperationNames',
        'master_retail_stores' => 'setMasterRetailStores',
        'ofd_enabled' => 'setOfdEnabled',
        'only_in_stock' => 'setOnlyInStock',
        'order_to_state' => 'setOrderToState',
        'print_always' => 'setPrintAlways',
        'product_folders' => 'setProductFolders',
        'receipt_template' => 'setReceiptTemplate',
        'required_fio' => 'setRequiredFio',
        'required_phone' => 'setRequiredPhone',
        'required_email' => 'setRequiredEmail',
        'required_birthdate' => 'setRequiredBirthdate',
        'required_sex' => 'setRequiredSex',
        'required_discount_card_number' => 'setRequiredDiscountCardNumber',
        'reserve_prepaid_goods' => 'setReservePrepaidGoods',
        'return_from_closed_shift_enabled' => 'setReturnFromClosedShiftEnabled',
        'sell_reserves' => 'setSellReserves',
        'send_marks_for_check' => 'setSendMarksForCheck',
        'send_marks_to_chestny_znak_on_cloud' => 'setSendMarksToChestnyZnakOnCloud',
        'sync_agents' => 'setSyncAgents',
        'show_beer_on_tap' => 'setShowBeerOnTap',
        'qr_pay_enabled' => 'setQrPayEnabled',
        'bank_percent' => 'setBankPercent',
        'qr_bank_percent' => 'setQrBankPercent',
        'demand_prefix' => 'setDemandPrefix',
        'qr_terminal_id' => 'setQrTerminalId',
        'id_qr' => 'setIdQr',
        'acquire' => 'setAcquire',
        'cashiers' => 'setCashiers',
        'qr_acquire' => 'setQrAcquire'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'description' => 'getDescription',
        'active' => 'getActive',
        'archived' => 'getArchived',
        'shared' => 'getShared',
        'address' => 'getAddress',
        'address_full' => 'getAddressFull',
        'external_code' => 'getExternalCode',
        'updated' => 'getUpdated',
        'meta' => 'getMeta',
        'organization' => 'getOrganization',
        'store' => 'getStore',
        'group' => 'getGroup',
        'owner' => 'getOwner',
        'price_type' => 'getPriceType',
        'environment' => 'getEnvironment',
        'state' => 'getState',
        'fiscal_type' => 'getFiscalType',
        'default_tax_system' => 'getDefaultTaxSystem',
        'order_tax_system' => 'getOrderTaxSystem',
        'minion_to_master_type' => 'getMinionToMasterType',
        'tobacco_mrc_control_type' => 'getTobaccoMrcControlType',
        'marking_selling_mode' => 'getMarkingSellingMode',
        'marks_check_mode' => 'getMarksCheckMode',
        'priority_ofd_send' => 'getPriorityOfdSend',
        'allow_create_products' => 'getAllowCreateProducts',
        'allow_custom_price' => 'getAllowCustomPrice',
        'allow_delete_receipt_positions' => 'getAllowDeleteReceiptPositions',
        'allow_sell_tobacco_without_mrc' => 'getAllowSellTobaccoWithoutMrc',
        'auth_token_attached' => 'getAuthTokenAttached',
        'control_cashier_choice' => 'getControlCashierChoice',
        'control_shipping_stock' => 'getControlShippingStock',
        'create_cash_in_on_retail_shift_closing' => 'getCreateCashInOnRetailShiftClosing',
        'create_payment_in_on_retail_shift_closing' => 'getCreatePaymentInOnRetailShiftClosing',
        'create_agents_tags' => 'getCreateAgentsTags',
        'create_order_with_state' => 'getCreateOrderWithState',
        'customer_order_states' => 'getCustomerOrderStates',
        'discount_enable' => 'getDiscountEnable',
        'discount_max_percent' => 'getDiscountMaxPercent',
        'enable_returns_with_no_reason' => 'getEnableReturnsWithNoReason',
        'issue_orders' => 'getIssueOrders',
        'last_operation_names' => 'getLastOperationNames',
        'master_retail_stores' => 'getMasterRetailStores',
        'ofd_enabled' => 'getOfdEnabled',
        'only_in_stock' => 'getOnlyInStock',
        'order_to_state' => 'getOrderToState',
        'print_always' => 'getPrintAlways',
        'product_folders' => 'getProductFolders',
        'receipt_template' => 'getReceiptTemplate',
        'required_fio' => 'getRequiredFio',
        'required_phone' => 'getRequiredPhone',
        'required_email' => 'getRequiredEmail',
        'required_birthdate' => 'getRequiredBirthdate',
        'required_sex' => 'getRequiredSex',
        'required_discount_card_number' => 'getRequiredDiscountCardNumber',
        'reserve_prepaid_goods' => 'getReservePrepaidGoods',
        'return_from_closed_shift_enabled' => 'getReturnFromClosedShiftEnabled',
        'sell_reserves' => 'getSellReserves',
        'send_marks_for_check' => 'getSendMarksForCheck',
        'send_marks_to_chestny_znak_on_cloud' => 'getSendMarksToChestnyZnakOnCloud',
        'sync_agents' => 'getSyncAgents',
        'show_beer_on_tap' => 'getShowBeerOnTap',
        'qr_pay_enabled' => 'getQrPayEnabled',
        'bank_percent' => 'getBankPercent',
        'qr_bank_percent' => 'getQrBankPercent',
        'demand_prefix' => 'getDemandPrefix',
        'qr_terminal_id' => 'getQrTerminalId',
        'id_qr' => 'getIdQr',
        'acquire' => 'getAcquire',
        'cashiers' => 'getCashiers',
        'qr_acquire' => 'getQrAcquire'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('address_full', $data ?? [], null);
        $this->setIfExists('external_code', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('fiscal_type', $data ?? [], null);
        $this->setIfExists('default_tax_system', $data ?? [], null);
        $this->setIfExists('order_tax_system', $data ?? [], null);
        $this->setIfExists('minion_to_master_type', $data ?? [], null);
        $this->setIfExists('tobacco_mrc_control_type', $data ?? [], null);
        $this->setIfExists('marking_selling_mode', $data ?? [], null);
        $this->setIfExists('marks_check_mode', $data ?? [], null);
        $this->setIfExists('priority_ofd_send', $data ?? [], null);
        $this->setIfExists('allow_create_products', $data ?? [], null);
        $this->setIfExists('allow_custom_price', $data ?? [], null);
        $this->setIfExists('allow_delete_receipt_positions', $data ?? [], null);
        $this->setIfExists('allow_sell_tobacco_without_mrc', $data ?? [], null);
        $this->setIfExists('auth_token_attached', $data ?? [], null);
        $this->setIfExists('control_cashier_choice', $data ?? [], null);
        $this->setIfExists('control_shipping_stock', $data ?? [], null);
        $this->setIfExists('create_cash_in_on_retail_shift_closing', $data ?? [], null);
        $this->setIfExists('create_payment_in_on_retail_shift_closing', $data ?? [], null);
        $this->setIfExists('create_agents_tags', $data ?? [], null);
        $this->setIfExists('create_order_with_state', $data ?? [], null);
        $this->setIfExists('customer_order_states', $data ?? [], null);
        $this->setIfExists('discount_enable', $data ?? [], null);
        $this->setIfExists('discount_max_percent', $data ?? [], null);
        $this->setIfExists('enable_returns_with_no_reason', $data ?? [], null);
        $this->setIfExists('issue_orders', $data ?? [], null);
        $this->setIfExists('last_operation_names', $data ?? [], null);
        $this->setIfExists('master_retail_stores', $data ?? [], null);
        $this->setIfExists('ofd_enabled', $data ?? [], null);
        $this->setIfExists('only_in_stock', $data ?? [], null);
        $this->setIfExists('order_to_state', $data ?? [], null);
        $this->setIfExists('print_always', $data ?? [], null);
        $this->setIfExists('product_folders', $data ?? [], null);
        $this->setIfExists('receipt_template', $data ?? [], null);
        $this->setIfExists('required_fio', $data ?? [], null);
        $this->setIfExists('required_phone', $data ?? [], null);
        $this->setIfExists('required_email', $data ?? [], null);
        $this->setIfExists('required_birthdate', $data ?? [], null);
        $this->setIfExists('required_sex', $data ?? [], null);
        $this->setIfExists('required_discount_card_number', $data ?? [], null);
        $this->setIfExists('reserve_prepaid_goods', $data ?? [], null);
        $this->setIfExists('return_from_closed_shift_enabled', $data ?? [], null);
        $this->setIfExists('sell_reserves', $data ?? [], null);
        $this->setIfExists('send_marks_for_check', $data ?? [], null);
        $this->setIfExists('send_marks_to_chestny_znak_on_cloud', $data ?? [], null);
        $this->setIfExists('sync_agents', $data ?? [], null);
        $this->setIfExists('show_beer_on_tap', $data ?? [], null);
        $this->setIfExists('qr_pay_enabled', $data ?? [], null);
        $this->setIfExists('bank_percent', $data ?? [], null);
        $this->setIfExists('qr_bank_percent', $data ?? [], null);
        $this->setIfExists('demand_prefix', $data ?? [], null);
        $this->setIfExists('qr_terminal_id', $data ?? [], null);
        $this->setIfExists('id_qr', $data ?? [], null);
        $this->setIfExists('acquire', $data ?? [], null);
        $this->setIfExists('cashiers', $data ?? [], null);
        $this->setIfExists('qr_acquire', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 255)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_code']) && (mb_strlen($this->container['external_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['demand_prefix']) && (mb_strlen($this->container['demand_prefix']) > 255)) {
            $invalidProperties[] = "invalid value for 'demand_prefix', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['qr_terminal_id']) && (mb_strlen($this->container['qr_terminal_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'qr_terminal_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['id_qr']) && (mb_strlen($this->container['id_qr']) > 255)) {
            $invalidProperties[] = "invalid value for 'id_qr', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID Точки продаж
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID учетной записи владельца Точки продаж
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование Точки продаж
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Комментарий к Точке продаж
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RetailStore., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Признак активности Точки продаж
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Признак архивности Точки продаж
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Общий доступ к Точке продаж
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Адрес Точки продаж одной строкой
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        if ((mb_strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_full
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getAddressFull()
    {
        return $this->container['address_full'];
    }

    /**
     * Sets address_full
     *
     * @param \OpenAPI\Client\Model\Address|null $address_full address_full
     *
     * @return self
     */
    public function setAddressFull($address_full)
    {
        if (is_null($address_full)) {
            throw new \InvalidArgumentException('non-nullable address_full cannot be null');
        }
        $this->container['address_full'] = $address_full;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string|null
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string|null $external_code Внешний код Точки продаж
     *
     * @return self
     */
    public function setExternalCode($external_code)
    {
        if (is_null($external_code)) {
            throw new \InvalidArgumentException('non-nullable external_code cannot be null');
        }
        if ((mb_strlen($external_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_code when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated Момент последнего обновления Точки продаж
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \OpenAPI\Client\Model\RetailStoreOrganization|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \OpenAPI\Client\Model\RetailStoreOrganization|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets store
     *
     * @return \OpenAPI\Client\Model\Store|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \OpenAPI\Client\Model\Store|null $store store
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\Group|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\Group|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \OpenAPI\Client\Model\PriceType|null
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \OpenAPI\Client\Model\PriceType|null $price_type price_type
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return \OpenAPI\Client\Model\Environment|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param \OpenAPI\Client\Model\Environment|null $environment environment
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\Status|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\Status|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets fiscal_type
     *
     * @return \OpenAPI\Client\Model\FiscalType|null
     */
    public function getFiscalType()
    {
        return $this->container['fiscal_type'];
    }

    /**
     * Sets fiscal_type
     *
     * @param \OpenAPI\Client\Model\FiscalType|null $fiscal_type fiscal_type
     *
     * @return self
     */
    public function setFiscalType($fiscal_type)
    {
        if (is_null($fiscal_type)) {
            throw new \InvalidArgumentException('non-nullable fiscal_type cannot be null');
        }
        $this->container['fiscal_type'] = $fiscal_type;

        return $this;
    }

    /**
     * Gets default_tax_system
     *
     * @return \OpenAPI\Client\Model\TaxSystem|null
     */
    public function getDefaultTaxSystem()
    {
        return $this->container['default_tax_system'];
    }

    /**
     * Sets default_tax_system
     *
     * @param \OpenAPI\Client\Model\TaxSystem|null $default_tax_system default_tax_system
     *
     * @return self
     */
    public function setDefaultTaxSystem($default_tax_system)
    {
        if (is_null($default_tax_system)) {
            throw new \InvalidArgumentException('non-nullable default_tax_system cannot be null');
        }
        $this->container['default_tax_system'] = $default_tax_system;

        return $this;
    }

    /**
     * Gets order_tax_system
     *
     * @return \OpenAPI\Client\Model\TaxSystem|null
     */
    public function getOrderTaxSystem()
    {
        return $this->container['order_tax_system'];
    }

    /**
     * Sets order_tax_system
     *
     * @param \OpenAPI\Client\Model\TaxSystem|null $order_tax_system order_tax_system
     *
     * @return self
     */
    public function setOrderTaxSystem($order_tax_system)
    {
        if (is_null($order_tax_system)) {
            throw new \InvalidArgumentException('non-nullable order_tax_system cannot be null');
        }
        $this->container['order_tax_system'] = $order_tax_system;

        return $this;
    }

    /**
     * Gets minion_to_master_type
     *
     * @return \OpenAPI\Client\Model\MinionToMasterType|null
     */
    public function getMinionToMasterType()
    {
        return $this->container['minion_to_master_type'];
    }

    /**
     * Sets minion_to_master_type
     *
     * @param \OpenAPI\Client\Model\MinionToMasterType|null $minion_to_master_type minion_to_master_type
     *
     * @return self
     */
    public function setMinionToMasterType($minion_to_master_type)
    {
        if (is_null($minion_to_master_type)) {
            throw new \InvalidArgumentException('non-nullable minion_to_master_type cannot be null');
        }
        $this->container['minion_to_master_type'] = $minion_to_master_type;

        return $this;
    }

    /**
     * Gets tobacco_mrc_control_type
     *
     * @return \OpenAPI\Client\Model\TobaccoMrcControlType|null
     */
    public function getTobaccoMrcControlType()
    {
        return $this->container['tobacco_mrc_control_type'];
    }

    /**
     * Sets tobacco_mrc_control_type
     *
     * @param \OpenAPI\Client\Model\TobaccoMrcControlType|null $tobacco_mrc_control_type tobacco_mrc_control_type
     *
     * @return self
     */
    public function setTobaccoMrcControlType($tobacco_mrc_control_type)
    {
        if (is_null($tobacco_mrc_control_type)) {
            throw new \InvalidArgumentException('non-nullable tobacco_mrc_control_type cannot be null');
        }
        $this->container['tobacco_mrc_control_type'] = $tobacco_mrc_control_type;

        return $this;
    }

    /**
     * Gets marking_selling_mode
     *
     * @return \OpenAPI\Client\Model\MarkingSellingMode|null
     */
    public function getMarkingSellingMode()
    {
        return $this->container['marking_selling_mode'];
    }

    /**
     * Sets marking_selling_mode
     *
     * @param \OpenAPI\Client\Model\MarkingSellingMode|null $marking_selling_mode marking_selling_mode
     *
     * @return self
     */
    public function setMarkingSellingMode($marking_selling_mode)
    {
        if (is_null($marking_selling_mode)) {
            throw new \InvalidArgumentException('non-nullable marking_selling_mode cannot be null');
        }
        $this->container['marking_selling_mode'] = $marking_selling_mode;

        return $this;
    }

    /**
     * Gets marks_check_mode
     *
     * @return \OpenAPI\Client\Model\MarksCheckMode|null
     */
    public function getMarksCheckMode()
    {
        return $this->container['marks_check_mode'];
    }

    /**
     * Sets marks_check_mode
     *
     * @param \OpenAPI\Client\Model\MarksCheckMode|null $marks_check_mode marks_check_mode
     *
     * @return self
     */
    public function setMarksCheckMode($marks_check_mode)
    {
        if (is_null($marks_check_mode)) {
            throw new \InvalidArgumentException('non-nullable marks_check_mode cannot be null');
        }
        $this->container['marks_check_mode'] = $marks_check_mode;

        return $this;
    }

    /**
     * Gets priority_ofd_send
     *
     * @return \OpenAPI\Client\Model\PriorityOfdSend|null
     */
    public function getPriorityOfdSend()
    {
        return $this->container['priority_ofd_send'];
    }

    /**
     * Sets priority_ofd_send
     *
     * @param \OpenAPI\Client\Model\PriorityOfdSend|null $priority_ofd_send priority_ofd_send
     *
     * @return self
     */
    public function setPriorityOfdSend($priority_ofd_send)
    {
        if (is_null($priority_ofd_send)) {
            throw new \InvalidArgumentException('non-nullable priority_ofd_send cannot be null');
        }
        $this->container['priority_ofd_send'] = $priority_ofd_send;

        return $this;
    }

    /**
     * Gets allow_create_products
     *
     * @return bool|null
     */
    public function getAllowCreateProducts()
    {
        return $this->container['allow_create_products'];
    }

    /**
     * Sets allow_create_products
     *
     * @param bool|null $allow_create_products Признак разрешения создания новых товаров при продаже
     *
     * @return self
     */
    public function setAllowCreateProducts($allow_create_products)
    {
        if (is_null($allow_create_products)) {
            throw new \InvalidArgumentException('non-nullable allow_create_products cannot be null');
        }
        $this->container['allow_create_products'] = $allow_create_products;

        return $this;
    }

    /**
     * Gets allow_custom_price
     *
     * @return bool|null
     */
    public function getAllowCustomPrice()
    {
        return $this->container['allow_custom_price'];
    }

    /**
     * Sets allow_custom_price
     *
     * @param bool|null $allow_custom_price Признак разрешения устанавливать произвольные цены
     *
     * @return self
     */
    public function setAllowCustomPrice($allow_custom_price)
    {
        if (is_null($allow_custom_price)) {
            throw new \InvalidArgumentException('non-nullable allow_custom_price cannot be null');
        }
        $this->container['allow_custom_price'] = $allow_custom_price;

        return $this;
    }

    /**
     * Gets allow_delete_receipt_positions
     *
     * @return bool|null
     */
    public function getAllowDeleteReceiptPositions()
    {
        return $this->container['allow_delete_receipt_positions'];
    }

    /**
     * Sets allow_delete_receipt_positions
     *
     * @param bool|null $allow_delete_receipt_positions Признак разрешения удалять позиции из чека
     *
     * @return self
     */
    public function setAllowDeleteReceiptPositions($allow_delete_receipt_positions)
    {
        if (is_null($allow_delete_receipt_positions)) {
            throw new \InvalidArgumentException('non-nullable allow_delete_receipt_positions cannot be null');
        }
        $this->container['allow_delete_receipt_positions'] = $allow_delete_receipt_positions;

        return $this;
    }

    /**
     * Gets allow_sell_tobacco_without_mrc
     *
     * @return bool|null
     */
    public function getAllowSellTobaccoWithoutMrc()
    {
        return $this->container['allow_sell_tobacco_without_mrc'];
    }

    /**
     * Sets allow_sell_tobacco_without_mrc
     *
     * @param bool|null $allow_sell_tobacco_without_mrc Признак разрешения продажи табачной продукции без проверки МРЦ
     *
     * @return self
     */
    public function setAllowSellTobaccoWithoutMrc($allow_sell_tobacco_without_mrc)
    {
        if (is_null($allow_sell_tobacco_without_mrc)) {
            throw new \InvalidArgumentException('non-nullable allow_sell_tobacco_without_mrc cannot be null');
        }
        $this->container['allow_sell_tobacco_without_mrc'] = $allow_sell_tobacco_without_mrc;

        return $this;
    }

    /**
     * Gets auth_token_attached
     *
     * @return bool|null
     */
    public function getAuthTokenAttached()
    {
        return $this->container['auth_token_attached'];
    }

    /**
     * Sets auth_token_attached
     *
     * @param bool|null $auth_token_attached Признак подключения авторизационного токена
     *
     * @return self
     */
    public function setAuthTokenAttached($auth_token_attached)
    {
        if (is_null($auth_token_attached)) {
            throw new \InvalidArgumentException('non-nullable auth_token_attached cannot be null');
        }
        $this->container['auth_token_attached'] = $auth_token_attached;

        return $this;
    }

    /**
     * Gets control_cashier_choice
     *
     * @return bool|null
     */
    public function getControlCashierChoice()
    {
        return $this->container['control_cashier_choice'];
    }

    /**
     * Sets control_cashier_choice
     *
     * @param bool|null $control_cashier_choice Признак контроля выбора кассира
     *
     * @return self
     */
    public function setControlCashierChoice($control_cashier_choice)
    {
        if (is_null($control_cashier_choice)) {
            throw new \InvalidArgumentException('non-nullable control_cashier_choice cannot be null');
        }
        $this->container['control_cashier_choice'] = $control_cashier_choice;

        return $this;
    }

    /**
     * Gets control_shipping_stock
     *
     * @return bool|null
     */
    public function getControlShippingStock()
    {
        return $this->container['control_shipping_stock'];
    }

    /**
     * Sets control_shipping_stock
     *
     * @param bool|null $control_shipping_stock Признак контроля отгрузки только из наличия
     *
     * @return self
     */
    public function setControlShippingStock($control_shipping_stock)
    {
        if (is_null($control_shipping_stock)) {
            throw new \InvalidArgumentException('non-nullable control_shipping_stock cannot be null');
        }
        $this->container['control_shipping_stock'] = $control_shipping_stock;

        return $this;
    }

    /**
     * Gets create_cash_in_on_retail_shift_closing
     *
     * @return bool|null
     */
    public function getCreateCashInOnRetailShiftClosing()
    {
        return $this->container['create_cash_in_on_retail_shift_closing'];
    }

    /**
     * Sets create_cash_in_on_retail_shift_closing
     *
     * @param bool|null $create_cash_in_on_retail_shift_closing Признак создания операции внесения при закрытии смены
     *
     * @return self
     */
    public function setCreateCashInOnRetailShiftClosing($create_cash_in_on_retail_shift_closing)
    {
        if (is_null($create_cash_in_on_retail_shift_closing)) {
            throw new \InvalidArgumentException('non-nullable create_cash_in_on_retail_shift_closing cannot be null');
        }
        $this->container['create_cash_in_on_retail_shift_closing'] = $create_cash_in_on_retail_shift_closing;

        return $this;
    }

    /**
     * Gets create_payment_in_on_retail_shift_closing
     *
     * @return bool|null
     */
    public function getCreatePaymentInOnRetailShiftClosing()
    {
        return $this->container['create_payment_in_on_retail_shift_closing'];
    }

    /**
     * Sets create_payment_in_on_retail_shift_closing
     *
     * @param bool|null $create_payment_in_on_retail_shift_closing Признак создания операции прихода денег при закрытии смены
     *
     * @return self
     */
    public function setCreatePaymentInOnRetailShiftClosing($create_payment_in_on_retail_shift_closing)
    {
        if (is_null($create_payment_in_on_retail_shift_closing)) {
            throw new \InvalidArgumentException('non-nullable create_payment_in_on_retail_shift_closing cannot be null');
        }
        $this->container['create_payment_in_on_retail_shift_closing'] = $create_payment_in_on_retail_shift_closing;

        return $this;
    }

    /**
     * Gets create_agents_tags
     *
     * @return string[]|null
     */
    public function getCreateAgentsTags()
    {
        return $this->container['create_agents_tags'];
    }

    /**
     * Sets create_agents_tags
     *
     * @param string[]|null $create_agents_tags Теги, создаваемые у агентов
     *
     * @return self
     */
    public function setCreateAgentsTags($create_agents_tags)
    {
        if (is_null($create_agents_tags)) {
            throw new \InvalidArgumentException('non-nullable create_agents_tags cannot be null');
        }
        $this->container['create_agents_tags'] = $create_agents_tags;

        return $this;
    }

    /**
     * Gets create_order_with_state
     *
     * @return \OpenAPI\Client\Model\RetailStoreCreateOrderWithState|null
     */
    public function getCreateOrderWithState()
    {
        return $this->container['create_order_with_state'];
    }

    /**
     * Sets create_order_with_state
     *
     * @param \OpenAPI\Client\Model\RetailStoreCreateOrderWithState|null $create_order_with_state create_order_with_state
     *
     * @return self
     */
    public function setCreateOrderWithState($create_order_with_state)
    {
        if (is_null($create_order_with_state)) {
            throw new \InvalidArgumentException('non-nullable create_order_with_state cannot be null');
        }
        $this->container['create_order_with_state'] = $create_order_with_state;

        return $this;
    }

    /**
     * Gets customer_order_states
     *
     * @return \OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]|null
     */
    public function getCustomerOrderStates()
    {
        return $this->container['customer_order_states'];
    }

    /**
     * Sets customer_order_states
     *
     * @param \OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]|null $customer_order_states Возможные состояния заказов покупателей
     *
     * @return self
     */
    public function setCustomerOrderStates($customer_order_states)
    {
        if (is_null($customer_order_states)) {
            throw new \InvalidArgumentException('non-nullable customer_order_states cannot be null');
        }
        $this->container['customer_order_states'] = $customer_order_states;

        return $this;
    }

    /**
     * Gets discount_enable
     *
     * @return bool|null
     */
    public function getDiscountEnable()
    {
        return $this->container['discount_enable'];
    }

    /**
     * Sets discount_enable
     *
     * @param bool|null $discount_enable Признак включения скидок
     *
     * @return self
     */
    public function setDiscountEnable($discount_enable)
    {
        if (is_null($discount_enable)) {
            throw new \InvalidArgumentException('non-nullable discount_enable cannot be null');
        }
        $this->container['discount_enable'] = $discount_enable;

        return $this;
    }

    /**
     * Gets discount_max_percent
     *
     * @return int|null
     */
    public function getDiscountMaxPercent()
    {
        return $this->container['discount_max_percent'];
    }

    /**
     * Sets discount_max_percent
     *
     * @param int|null $discount_max_percent Максимально допустимый процент скидки
     *
     * @return self
     */
    public function setDiscountMaxPercent($discount_max_percent)
    {
        if (is_null($discount_max_percent)) {
            throw new \InvalidArgumentException('non-nullable discount_max_percent cannot be null');
        }
        $this->container['discount_max_percent'] = $discount_max_percent;

        return $this;
    }

    /**
     * Gets enable_returns_with_no_reason
     *
     * @return bool|null
     */
    public function getEnableReturnsWithNoReason()
    {
        return $this->container['enable_returns_with_no_reason'];
    }

    /**
     * Sets enable_returns_with_no_reason
     *
     * @param bool|null $enable_returns_with_no_reason Признак разрешения возвратов без причины
     *
     * @return self
     */
    public function setEnableReturnsWithNoReason($enable_returns_with_no_reason)
    {
        if (is_null($enable_returns_with_no_reason)) {
            throw new \InvalidArgumentException('non-nullable enable_returns_with_no_reason cannot be null');
        }
        $this->container['enable_returns_with_no_reason'] = $enable_returns_with_no_reason;

        return $this;
    }

    /**
     * Gets issue_orders
     *
     * @return bool|null
     */
    public function getIssueOrders()
    {
        return $this->container['issue_orders'];
    }

    /**
     * Sets issue_orders
     *
     * @param bool|null $issue_orders Признак оформления заказов покупателей
     *
     * @return self
     */
    public function setIssueOrders($issue_orders)
    {
        if (is_null($issue_orders)) {
            throw new \InvalidArgumentException('non-nullable issue_orders cannot be null');
        }
        $this->container['issue_orders'] = $issue_orders;

        return $this;
    }

    /**
     * Gets last_operation_names
     *
     * @return \OpenAPI\Client\Model\LastOperationNames[]|null
     */
    public function getLastOperationNames()
    {
        return $this->container['last_operation_names'];
    }

    /**
     * Sets last_operation_names
     *
     * @param \OpenAPI\Client\Model\LastOperationNames[]|null $last_operation_names Последние операции
     *
     * @return self
     */
    public function setLastOperationNames($last_operation_names)
    {
        if (is_null($last_operation_names)) {
            throw new \InvalidArgumentException('non-nullable last_operation_names cannot be null');
        }
        $this->container['last_operation_names'] = $last_operation_names;

        return $this;
    }

    /**
     * Gets master_retail_stores
     *
     * @return \OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]|null
     */
    public function getMasterRetailStores()
    {
        return $this->container['master_retail_stores'];
    }

    /**
     * Sets master_retail_stores
     *
     * @param \OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner[]|null $master_retail_stores Список касс-мастеров
     *
     * @return self
     */
    public function setMasterRetailStores($master_retail_stores)
    {
        if (is_null($master_retail_stores)) {
            throw new \InvalidArgumentException('non-nullable master_retail_stores cannot be null');
        }
        $this->container['master_retail_stores'] = $master_retail_stores;

        return $this;
    }

    /**
     * Gets ofd_enabled
     *
     * @return bool|null
     */
    public function getOfdEnabled()
    {
        return $this->container['ofd_enabled'];
    }

    /**
     * Sets ofd_enabled
     *
     * @param bool|null $ofd_enabled Признак использования ОФД
     *
     * @return self
     */
    public function setOfdEnabled($ofd_enabled)
    {
        if (is_null($ofd_enabled)) {
            throw new \InvalidArgumentException('non-nullable ofd_enabled cannot be null');
        }
        $this->container['ofd_enabled'] = $ofd_enabled;

        return $this;
    }

    /**
     * Gets only_in_stock
     *
     * @return bool|null
     */
    public function getOnlyInStock()
    {
        return $this->container['only_in_stock'];
    }

    /**
     * Sets only_in_stock
     *
     * @param bool|null $only_in_stock Признак продажи только из наличия
     *
     * @return self
     */
    public function setOnlyInStock($only_in_stock)
    {
        if (is_null($only_in_stock)) {
            throw new \InvalidArgumentException('non-nullable only_in_stock cannot be null');
        }
        $this->container['only_in_stock'] = $only_in_stock;

        return $this;
    }

    /**
     * Gets order_to_state
     *
     * @return \OpenAPI\Client\Model\RetailStoreOrderToState|null
     */
    public function getOrderToState()
    {
        return $this->container['order_to_state'];
    }

    /**
     * Sets order_to_state
     *
     * @param \OpenAPI\Client\Model\RetailStoreOrderToState|null $order_to_state order_to_state
     *
     * @return self
     */
    public function setOrderToState($order_to_state)
    {
        if (is_null($order_to_state)) {
            throw new \InvalidArgumentException('non-nullable order_to_state cannot be null');
        }
        $this->container['order_to_state'] = $order_to_state;

        return $this;
    }

    /**
     * Gets print_always
     *
     * @return bool|null
     */
    public function getPrintAlways()
    {
        return $this->container['print_always'];
    }

    /**
     * Sets print_always
     *
     * @param bool|null $print_always Признак обязательной печати чеков
     *
     * @return self
     */
    public function setPrintAlways($print_always)
    {
        if (is_null($print_always)) {
            throw new \InvalidArgumentException('non-nullable print_always cannot be null');
        }
        $this->container['print_always'] = $print_always;

        return $this;
    }

    /**
     * Gets product_folders
     *
     * @return \OpenAPI\Client\Model\RetailStoreProductFolders|null
     */
    public function getProductFolders()
    {
        return $this->container['product_folders'];
    }

    /**
     * Sets product_folders
     *
     * @param \OpenAPI\Client\Model\RetailStoreProductFolders|null $product_folders product_folders
     *
     * @return self
     */
    public function setProductFolders($product_folders)
    {
        if (is_null($product_folders)) {
            throw new \InvalidArgumentException('non-nullable product_folders cannot be null');
        }
        $this->container['product_folders'] = $product_folders;

        return $this;
    }

    /**
     * Gets receipt_template
     *
     * @return \OpenAPI\Client\Model\RetailStoreReceiptTemplate|null
     */
    public function getReceiptTemplate()
    {
        return $this->container['receipt_template'];
    }

    /**
     * Sets receipt_template
     *
     * @param \OpenAPI\Client\Model\RetailStoreReceiptTemplate|null $receipt_template receipt_template
     *
     * @return self
     */
    public function setReceiptTemplate($receipt_template)
    {
        if (is_null($receipt_template)) {
            throw new \InvalidArgumentException('non-nullable receipt_template cannot be null');
        }
        $this->container['receipt_template'] = $receipt_template;

        return $this;
    }

    /**
     * Gets required_fio
     *
     * @return bool|null
     */
    public function getRequiredFio()
    {
        return $this->container['required_fio'];
    }

    /**
     * Sets required_fio
     *
     * @param bool|null $required_fio Признак обязательности ФИО покупателя
     *
     * @return self
     */
    public function setRequiredFio($required_fio)
    {
        if (is_null($required_fio)) {
            throw new \InvalidArgumentException('non-nullable required_fio cannot be null');
        }
        $this->container['required_fio'] = $required_fio;

        return $this;
    }

    /**
     * Gets required_phone
     *
     * @return bool|null
     */
    public function getRequiredPhone()
    {
        return $this->container['required_phone'];
    }

    /**
     * Sets required_phone
     *
     * @param bool|null $required_phone Признак обязательности телефона покупателя
     *
     * @return self
     */
    public function setRequiredPhone($required_phone)
    {
        if (is_null($required_phone)) {
            throw new \InvalidArgumentException('non-nullable required_phone cannot be null');
        }
        $this->container['required_phone'] = $required_phone;

        return $this;
    }

    /**
     * Gets required_email
     *
     * @return bool|null
     */
    public function getRequiredEmail()
    {
        return $this->container['required_email'];
    }

    /**
     * Sets required_email
     *
     * @param bool|null $required_email Признак обязательности email покупателя
     *
     * @return self
     */
    public function setRequiredEmail($required_email)
    {
        if (is_null($required_email)) {
            throw new \InvalidArgumentException('non-nullable required_email cannot be null');
        }
        $this->container['required_email'] = $required_email;

        return $this;
    }

    /**
     * Gets required_birthdate
     *
     * @return bool|null
     */
    public function getRequiredBirthdate()
    {
        return $this->container['required_birthdate'];
    }

    /**
     * Sets required_birthdate
     *
     * @param bool|null $required_birthdate Признак обязательности даты рождения покупателя
     *
     * @return self
     */
    public function setRequiredBirthdate($required_birthdate)
    {
        if (is_null($required_birthdate)) {
            throw new \InvalidArgumentException('non-nullable required_birthdate cannot be null');
        }
        $this->container['required_birthdate'] = $required_birthdate;

        return $this;
    }

    /**
     * Gets required_sex
     *
     * @return bool|null
     */
    public function getRequiredSex()
    {
        return $this->container['required_sex'];
    }

    /**
     * Sets required_sex
     *
     * @param bool|null $required_sex Признак обязательности пола покупателя
     *
     * @return self
     */
    public function setRequiredSex($required_sex)
    {
        if (is_null($required_sex)) {
            throw new \InvalidArgumentException('non-nullable required_sex cannot be null');
        }
        $this->container['required_sex'] = $required_sex;

        return $this;
    }

    /**
     * Gets required_discount_card_number
     *
     * @return bool|null
     */
    public function getRequiredDiscountCardNumber()
    {
        return $this->container['required_discount_card_number'];
    }

    /**
     * Sets required_discount_card_number
     *
     * @param bool|null $required_discount_card_number Признак обязательности номера дисконтной карты покупателя
     *
     * @return self
     */
    public function setRequiredDiscountCardNumber($required_discount_card_number)
    {
        if (is_null($required_discount_card_number)) {
            throw new \InvalidArgumentException('non-nullable required_discount_card_number cannot be null');
        }
        $this->container['required_discount_card_number'] = $required_discount_card_number;

        return $this;
    }

    /**
     * Gets reserve_prepaid_goods
     *
     * @return bool|null
     */
    public function getReservePrepaidGoods()
    {
        return $this->container['reserve_prepaid_goods'];
    }

    /**
     * Sets reserve_prepaid_goods
     *
     * @param bool|null $reserve_prepaid_goods Признак резервирования предоплаченных товаров
     *
     * @return self
     */
    public function setReservePrepaidGoods($reserve_prepaid_goods)
    {
        if (is_null($reserve_prepaid_goods)) {
            throw new \InvalidArgumentException('non-nullable reserve_prepaid_goods cannot be null');
        }
        $this->container['reserve_prepaid_goods'] = $reserve_prepaid_goods;

        return $this;
    }

    /**
     * Gets return_from_closed_shift_enabled
     *
     * @return bool|null
     */
    public function getReturnFromClosedShiftEnabled()
    {
        return $this->container['return_from_closed_shift_enabled'];
    }

    /**
     * Sets return_from_closed_shift_enabled
     *
     * @param bool|null $return_from_closed_shift_enabled Признак разрешения возвратов из закрытой смены
     *
     * @return self
     */
    public function setReturnFromClosedShiftEnabled($return_from_closed_shift_enabled)
    {
        if (is_null($return_from_closed_shift_enabled)) {
            throw new \InvalidArgumentException('non-nullable return_from_closed_shift_enabled cannot be null');
        }
        $this->container['return_from_closed_shift_enabled'] = $return_from_closed_shift_enabled;

        return $this;
    }

    /**
     * Gets sell_reserves
     *
     * @return bool|null
     */
    public function getSellReserves()
    {
        return $this->container['sell_reserves'];
    }

    /**
     * Sets sell_reserves
     *
     * @param bool|null $sell_reserves Признак разрешения продажи резервов
     *
     * @return self
     */
    public function setSellReserves($sell_reserves)
    {
        if (is_null($sell_reserves)) {
            throw new \InvalidArgumentException('non-nullable sell_reserves cannot be null');
        }
        $this->container['sell_reserves'] = $sell_reserves;

        return $this;
    }

    /**
     * Gets send_marks_for_check
     *
     * @return bool|null
     */
    public function getSendMarksForCheck()
    {
        return $this->container['send_marks_for_check'];
    }

    /**
     * Sets send_marks_for_check
     *
     * @param bool|null $send_marks_for_check Признак отправки кодов маркировки на проверку
     *
     * @return self
     */
    public function setSendMarksForCheck($send_marks_for_check)
    {
        if (is_null($send_marks_for_check)) {
            throw new \InvalidArgumentException('non-nullable send_marks_for_check cannot be null');
        }
        $this->container['send_marks_for_check'] = $send_marks_for_check;

        return $this;
    }

    /**
     * Gets send_marks_to_chestny_znak_on_cloud
     *
     * @return bool|null
     */
    public function getSendMarksToChestnyZnakOnCloud()
    {
        return $this->container['send_marks_to_chestny_znak_on_cloud'];
    }

    /**
     * Sets send_marks_to_chestny_znak_on_cloud
     *
     * @param bool|null $send_marks_to_chestny_znak_on_cloud Признак отправки кодов маркировки в Честный ЗНАК в облаке
     *
     * @return self
     */
    public function setSendMarksToChestnyZnakOnCloud($send_marks_to_chestny_znak_on_cloud)
    {
        if (is_null($send_marks_to_chestny_znak_on_cloud)) {
            throw new \InvalidArgumentException('non-nullable send_marks_to_chestny_znak_on_cloud cannot be null');
        }
        $this->container['send_marks_to_chestny_znak_on_cloud'] = $send_marks_to_chestny_znak_on_cloud;

        return $this;
    }

    /**
     * Gets sync_agents
     *
     * @return bool|null
     */
    public function getSyncAgents()
    {
        return $this->container['sync_agents'];
    }

    /**
     * Sets sync_agents
     *
     * @param bool|null $sync_agents Признак синхронизации агентов
     *
     * @return self
     */
    public function setSyncAgents($sync_agents)
    {
        if (is_null($sync_agents)) {
            throw new \InvalidArgumentException('non-nullable sync_agents cannot be null');
        }
        $this->container['sync_agents'] = $sync_agents;

        return $this;
    }

    /**
     * Gets show_beer_on_tap
     *
     * @return bool|null
     */
    public function getShowBeerOnTap()
    {
        return $this->container['show_beer_on_tap'];
    }

    /**
     * Sets show_beer_on_tap
     *
     * @param bool|null $show_beer_on_tap Признак отображения разливного пива
     *
     * @return self
     */
    public function setShowBeerOnTap($show_beer_on_tap)
    {
        if (is_null($show_beer_on_tap)) {
            throw new \InvalidArgumentException('non-nullable show_beer_on_tap cannot be null');
        }
        $this->container['show_beer_on_tap'] = $show_beer_on_tap;

        return $this;
    }

    /**
     * Gets qr_pay_enabled
     *
     * @return bool|null
     */
    public function getQrPayEnabled()
    {
        return $this->container['qr_pay_enabled'];
    }

    /**
     * Sets qr_pay_enabled
     *
     * @param bool|null $qr_pay_enabled Признак включения оплаты через QR
     *
     * @return self
     */
    public function setQrPayEnabled($qr_pay_enabled)
    {
        if (is_null($qr_pay_enabled)) {
            throw new \InvalidArgumentException('non-nullable qr_pay_enabled cannot be null');
        }
        $this->container['qr_pay_enabled'] = $qr_pay_enabled;

        return $this;
    }

    /**
     * Gets bank_percent
     *
     * @return float|null
     */
    public function getBankPercent()
    {
        return $this->container['bank_percent'];
    }

    /**
     * Sets bank_percent
     *
     * @param float|null $bank_percent Банковский процент
     *
     * @return self
     */
    public function setBankPercent($bank_percent)
    {
        if (is_null($bank_percent)) {
            throw new \InvalidArgumentException('non-nullable bank_percent cannot be null');
        }
        $this->container['bank_percent'] = $bank_percent;

        return $this;
    }

    /**
     * Gets qr_bank_percent
     *
     * @return float|null
     */
    public function getQrBankPercent()
    {
        return $this->container['qr_bank_percent'];
    }

    /**
     * Sets qr_bank_percent
     *
     * @param float|null $qr_bank_percent Банковский процент при оплате по QR
     *
     * @return self
     */
    public function setQrBankPercent($qr_bank_percent)
    {
        if (is_null($qr_bank_percent)) {
            throw new \InvalidArgumentException('non-nullable qr_bank_percent cannot be null');
        }
        $this->container['qr_bank_percent'] = $qr_bank_percent;

        return $this;
    }

    /**
     * Gets demand_prefix
     *
     * @return string|null
     */
    public function getDemandPrefix()
    {
        return $this->container['demand_prefix'];
    }

    /**
     * Sets demand_prefix
     *
     * @param string|null $demand_prefix Префикс номера заказа
     *
     * @return self
     */
    public function setDemandPrefix($demand_prefix)
    {
        if (is_null($demand_prefix)) {
            throw new \InvalidArgumentException('non-nullable demand_prefix cannot be null');
        }
        if ((mb_strlen($demand_prefix) > 255)) {
            throw new \InvalidArgumentException('invalid length for $demand_prefix when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['demand_prefix'] = $demand_prefix;

        return $this;
    }

    /**
     * Gets qr_terminal_id
     *
     * @return string|null
     */
    public function getQrTerminalId()
    {
        return $this->container['qr_terminal_id'];
    }

    /**
     * Sets qr_terminal_id
     *
     * @param string|null $qr_terminal_id Идентификатор QR-терминала
     *
     * @return self
     */
    public function setQrTerminalId($qr_terminal_id)
    {
        if (is_null($qr_terminal_id)) {
            throw new \InvalidArgumentException('non-nullable qr_terminal_id cannot be null');
        }
        if ((mb_strlen($qr_terminal_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $qr_terminal_id when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['qr_terminal_id'] = $qr_terminal_id;

        return $this;
    }

    /**
     * Gets id_qr
     *
     * @return string|null
     */
    public function getIdQr()
    {
        return $this->container['id_qr'];
    }

    /**
     * Sets id_qr
     *
     * @param string|null $id_qr Идентификатор QR
     *
     * @return self
     */
    public function setIdQr($id_qr)
    {
        if (is_null($id_qr)) {
            throw new \InvalidArgumentException('non-nullable id_qr cannot be null');
        }
        if ((mb_strlen($id_qr) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id_qr when calling RetailStore., must be smaller than or equal to 255.');
        }

        $this->container['id_qr'] = $id_qr;

        return $this;
    }

    /**
     * Gets acquire
     *
     * @return \OpenAPI\Client\Model\RetailStoreAcquire|null
     */
    public function getAcquire()
    {
        return $this->container['acquire'];
    }

    /**
     * Sets acquire
     *
     * @param \OpenAPI\Client\Model\RetailStoreAcquire|null $acquire acquire
     *
     * @return self
     */
    public function setAcquire($acquire)
    {
        if (is_null($acquire)) {
            throw new \InvalidArgumentException('non-nullable acquire cannot be null');
        }
        $this->container['acquire'] = $acquire;

        return $this;
    }

    /**
     * Gets cashiers
     *
     * @return \OpenAPI\Client\Model\RetailStoreCashiers|null
     */
    public function getCashiers()
    {
        return $this->container['cashiers'];
    }

    /**
     * Sets cashiers
     *
     * @param \OpenAPI\Client\Model\RetailStoreCashiers|null $cashiers cashiers
     *
     * @return self
     */
    public function setCashiers($cashiers)
    {
        if (is_null($cashiers)) {
            throw new \InvalidArgumentException('non-nullable cashiers cannot be null');
        }
        $this->container['cashiers'] = $cashiers;

        return $this;
    }

    /**
     * Gets qr_acquire
     *
     * @return \OpenAPI\Client\Model\RetailStoreQrAcquire|null
     */
    public function getQrAcquire()
    {
        return $this->container['qr_acquire'];
    }

    /**
     * Sets qr_acquire
     *
     * @param \OpenAPI\Client\Model\RetailStoreQrAcquire|null $qr_acquire qr_acquire
     *
     * @return self
     */
    public function setQrAcquire($qr_acquire)
    {
        if (is_null($qr_acquire)) {
            throw new \InvalidArgumentException('non-nullable qr_acquire cannot be null');
        }
        $this->container['qr_acquire'] = $qr_acquire;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


