<?php
/**
 * ProductsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use http\Client;
use OpenAPI\Client\Api\ProductsApi;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Model\EntityProductPostRequest;
use OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ProductsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        // Конфигурация SDK — адрес сервиса, куда стучимся
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://localhost/api/remap/1.2')
            ->setUsername('admin@qwe3')
            ->setPassword('123123')
        ;

        $this->api = new ProductsApi(null, $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    public function testGetProducts(): void
    {
        // вызов API
        $products = $this->api->entityProductGet(100, 0, null, null, 'country,files.createdBy,group,images,owner.group,productFolder.productFolder,supplier.notes.agent,supplier.notes.author,supplier.notes.authorApplication,supplier.group,supplier.owner.group,supplier.state,supplier.contactpersons,supplier.files.createdBy');

        // проверим, что ответ не пустой
        $value = $products->__toString();
        $products = $products->getRows();
        foreach ($products as $p) {
            $productJsonFromListGet = $p->__toString();
            $mixed = $p->jsonSerialize();
            $a = ObjectSerializer::deserialize($mixed, '\OpenAPI\Client\Model\EntityProductPostRequest');
            $productJsonAfterDeserializeSerializeFromListGet = $a->__toString();
            $fromPost = $this->api->entityProductPost(new EntityProductPostRequest());
            $productJsonFromPost = $fromPost->__toString();
            $this->assertNotNull($products, 'Ответ от API пустой');
        }
        $this->assertNotNull($products, 'Ответ от API пустой');

        // если SDK возвращает массив — проверим тип
//         $this->assertIsArray($products);
    }
//
//    /**
//     * Test case for entityProductDeletePost
//     *
//     * Массовое удаление товаров.
//     *
//     */
//    public function testEntityProductDeletePost()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductGet
//     *
//     * Получить список товаров.
//     *
//     */
//    public function testEntityProductGet()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductIdDelete
//     *
//     * Удалить товар.
//     *
//     */
//    public function testEntityProductIdDelete()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductIdGet
//     *
//     * Получить товар по ID.
//     *
//     */
//    public function testEntityProductIdGet()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductIdPut
//     *
//     * Обновить товар.
//     *
//     */
//    public function testEntityProductIdPut()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductMetadataGet
//     *
//     * Получить метаданные товаров.
//     *
//     */
//    public function testEntityProductMetadataGet()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
//
//    /**
//     * Test case for entityProductPost
//     *
//     * Создать товар.
//     *
//     */
//    public function testEntityProductPost()
//    {
//        // TODO: implement
//        self::markTestIncomplete('Not implemented');
//    }
}
