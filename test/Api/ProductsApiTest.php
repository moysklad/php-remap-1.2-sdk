<?php
/**
 * ProductsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Api\ProductsApi;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\Model\Barcode;
use OpenAPI\Client\Model\BuyPrice;
use OpenAPI\Client\Model\EntityProductPostRequest;
use OpenAPI\Client\Model\FileList;
use OpenAPI\Client\Model\ImageList;
use OpenAPI\Client\Model\MinPrice;
use OpenAPI\Client\Model\Product;
use OpenAPI\Client\Model\ProductAlcoholic;
use OpenAPI\Client\Model\ProductList;
use OpenAPI\Client\Model\ProductMinimumStock;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

/**
 * ProductsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApiTest extends TestCase
{

    private static ProductsApi $api;

    public static function setUpBeforeClass(): void
    {
//        TODO заменить ссылку на спейс
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://localhost/api/remap/1.2')
            ->setUsername('admin@qwe3')
            ->setPassword('123123');

        ProductsApiTest::$api = new ProductsApi(null, $config);
    }

    /**
     *  Проверка успешной обработки ответа сервера на получение товаров
     */
    public function testEntityProductGet(): void
    {
        $prefix = StringUtil::randomUuid();
        $product1 = new Product();
        $product1->setName("${prefix} Product 1");
        $product1 = ProductsApiTest::$api->entityProductPost($product1);

        $product2 = new Product();
        $product2->setName("${prefix} Product 2");
        $product2 = ProductsApiTest::$api->entityProductPost($product2);

        $product3 = new Product();
        $product3->setName("${prefix} Product 3");
        $product3 = ProductsApiTest::$api->entityProductPost($product3);

        Assert::assertNotSame($product1->getId(), $product2->getId());
        Assert::assertNotSame($product2->getId(), $product3->getId());

        $productList_12 = ProductsApiTest::$api->entityProductGet(2, 0, null, "name~=${prefix}", null, 'name');
        Assert::assertInstanceOf(ProductList::class, $productList_12);
        Asserter::assertMetaCollection($productList_12->getMeta(), 'product', 3, 2, 'product');
        Asserter::assertJsonHasFields($productList_12, ['meta' => []], false, 'context.employee');
        Asserter::assertJsonHasFields($productList_12, [
            'rows' => [
                ['id' => $product1->getId()],
                ['id' => $product2->getId()]
            ]], false);

        $productList_23 = ProductsApiTest::$api->entityProductGet(3, 1, null, "name~=${prefix}", null, 'name');
        Assert::assertInstanceOf(ProductList::class, $productList_23);
        Asserter::assertMetaCollection($productList_23->getMeta(), 'product', 3, 3, 'product');
        Asserter::assertJsonHasFields($productList_23, ['meta' => []], false, 'context.employee');
        Asserter::assertJsonHasFields($productList_23, [
            'rows' => [
                ['id' => $product2->getId()],
                ['id' => $product3->getId()]
            ]], false);
    }

    /**
     *  Проверка обработки ответа сервера на получение товаров сопровождаемое ошибкой
     */
    public function testEntityProductGetWithError(): void
    {
        try {
            ProductsApiTest::$api->entityProductGet(1, 1, null, "name>123");
            Assert::fail();
        } catch (ApiException $e) {
            Assert::assertEquals(412, $e->getCode());
            Assert::assertNotNull($e->getResponseBody());
        }
    }

    /**
     *  Проверка успешной обработки ответа сервера в случае ошибки
     */
    public function testEntityProductIdGet()
    {
        $productReq = new Product();

        // alcoholic
        $alcoholic = new ProductAlcoholic();
        $alcoholic->setExcise(true);
        $alcoholic->setType(123);
        $alcoholic->setStrength(40.0);
        $alcoholic->setVolume(0.5);
        $productReq->setAlcoholic($alcoholic);

        // простые флаги и строки
        $productReq->setArchived(true);
        $productReq->setTobacco(false);
        $productReq->setName("Тестовый товар " . StringUtil::randomUuid());
        $productReq->setCode(StringUtil::randomUuid());
        $productReq->setExternalCode(StringUtil::randomUuid());
        $productReq->setArticle(StringUtil::randomUuid());
        $productReq->setDescription("Описание тестового товара");
        $productReq->setTrackingType("BEER_ALCOHOL");
        $productReq->setPaymentItemType("GOOD");
        $productReq->setTaxSystem("GENERAL_TAX_SYSTEM");
        $productReq->setWeighed(false);
        $productReq->setOnTap(false);
        $productReq->setPartialDisposal(false);
        $productReq->setSyncId(StringUtil::randomUuid());

        $minStock = new ProductMinimumStock();
        $minStock->setType("ALL_WAREHOUSE_SUM");
        $minStock->setQuantity(10.0);
        $productReq->setMinimumStock($minStock);

        // налоги
        $productReq->setVat(20);
        $productReq->setVatEnabled(true);
        $productReq->setUseParentVat(false);
        $productReq->setEffectiveVat(20);
        $productReq->setEffectiveVatEnabled(true);

        $productReq->setDiscountProhibited(true);
        $productReq->setIsSerialTrackable(false);
        $productReq->setShared(false);

        // размеры
        $productReq->setVolume(0.75);

        // Price
        $buyPrice = new BuyPrice();
        $buyPrice->setValue(9999.0);
        $productReq->setBuyPrice($buyPrice);

        $minPrice = new MinPrice();
        $minPrice->setValue(1111.0);
        $productReq->setMinPrice($minPrice);

        // images, files
        $productReq->setImages(new ImageList());
        $productReq->setFiles(new FileList());

        // barcodes
        $barcode = new Barcode();
        $barcode->setEan13("123123");
        $productReq->setBarcodes([$barcode]);


        $productResp = ProductsApiTest::$api->entityProductPost($productReq);
        $productId = $productResp->getId();
        Assert::assertNotNull($productId);
        Asserter::assertMeta($productResp->getMeta(), $productId, 'product');

        Assert::assertSame($productReq->getName(), $productResp->getName());
        Assert::assertSame($productReq->getCode(), $productResp->getCode());
        Assert::assertSame($productReq->getExternalCode(), $productResp->getExternalCode());
        Assert::assertSame($productReq->getArticle(), $productResp->getArticle());
        Assert::assertSame($productReq->getDescription(), $productResp->getDescription());
        Assert::assertSame($productReq->getTrackingType(), $productResp->getTrackingType());
        Assert::assertSame($productReq->getPaymentItemType(), $productResp->getPaymentItemType());
        Assert::assertSame($productReq->getTaxSystem(), $productResp->getTaxSystem());
        Assert::assertSame($productReq->getPartialDisposal(), $productResp->getPartialDisposal());
        Assert::assertSame($productReq->getSyncId(), $productResp->getSyncId());
        Assert::assertSame($productReq->getVolume(), $productResp->getVolume());

        Asserter::assertMetaCollection($productResp->getFiles()->getMeta(), "product/${productId}/files", 0, 1000, 'files');
        Asserter::assertMetaCollection($productResp->getImages()->getMeta(), "product/${productId}/images", 0, 1000, 'image');
        Asserter::assertJsonHasFields($productResp, ['owner' => ['meta' => ['type' => 'employee']]], false);
        Asserter::assertJsonHasFields($productResp, ['group' => ['meta' => ['type' => 'group']]], false);
        Assert::assertNotNull($productResp->getUpdated());
        Assert::assertNotNull($productResp->getAccountId());

        Assert::assertSame($productReq->getVat(), $productResp->getVat());
        Assert::assertSame($productReq->getVatEnabled(), $productResp->getVatEnabled());
        Assert::assertSame($productReq->getUseParentVat(), $productResp->getUseParentVat());
        Assert::assertSame($productReq->getEffectiveVat(), $productResp->getEffectiveVat());
        Assert::assertSame($productReq->getEffectiveVatEnabled(), $productResp->getEffectiveVatEnabled());

        Assert::assertSame($productReq->getDiscountProhibited(), $productResp->getDiscountProhibited());
        Assert::assertSame($productReq->getIsSerialTrackable(), $productResp->getIsSerialTrackable());
        Assert::assertSame($productReq->getShared(), $productResp->getShared());
        Assert::assertSame($productReq->getArchived(), $productResp->getArchived());

        Assert::assertSame($productReq->getBuyPrice()->getValue(), $productResp->getBuyPrice()->getValue());
        Assert::assertSame($productReq->getMinPrice()->getValue(), $productResp->getMinPrice()->getValue());
        Asserter::assertJsonHasFields($productResp, ['salePrices' => [['priceType' => [], 'currency' => []]]], false);

        Assert::assertSame($productReq->getBarcodes()[0]->getEan13(), $productResp->getBarcodes()[0]->getEan13());
        Assert::assertSame($productReq->getMinimumStock()->getQuantity(), $productResp->getMinimumStock()->getQuantity());
        Assert::assertSame($productReq->getMinimumStock()->getType(), $productResp->getMinimumStock()->getType());

        $productAlcoholicReq = $productReq->getAlcoholic();
        $productAlcoholicResp = $productResp->getAlcoholic();
        Assert::assertSame($productAlcoholicReq->getType(), $productAlcoholicResp->getType());
        Assert::assertSame($productAlcoholicReq->getExcise(), $productAlcoholicResp->getExcise());
        Assert::assertSame($productAlcoholicReq->getStrength(), $productAlcoholicResp->getStrength());
        Assert::assertSame($productAlcoholicReq->getVolume(), $productAlcoholicResp->getVolume());
    }

    /**
     *  Проверка обработки ответа сервера на получение товара сопровождаемое ошибкой
     */
    public function testEntityProductIdGetWithError()
    {
        try {
            ProductsApiTest::$api->entityProductIdGet(StringUtil::randomUuid());
            Assert::fail();
        } catch (ApiException $e) {
            Assert::assertEquals(404, $e->getCode());
            Assert::assertNotNull($e->getResponseBody());
        }
    }

    /**
     *  Проверка обработки ответа сервера на создание товара сопровождаемое ошибкой
     */
    public function testEntityProductPostWithError()
    {
        try {
            $product1 = new Product();
            ProductsApiTest::$api->entityProductPost($product1);
            Assert::fail();
        } catch (ApiException $e) {
            Assert::assertEquals(412, $e->getCode());
            Assert::assertNotNull($e->getResponseBody());
        }
    }

    /**
     *  Проверка успешной обработки ответа сервера на обновление товара
     */
    public function testEntityProductIdPut()
    {
        $createProduct = new Product();
        $createProduct->setName("Product Old");
        $createProduct = ProductsApiTest::$api->entityProductPost($createProduct);

        $updateProduct = new Product();
        $updateProduct->setName("Product New");
        $updateProduct = ProductsApiTest::$api->entityProductIdPut($createProduct->getId(), $updateProduct);

        Assert::assertSame($createProduct->getId(), $updateProduct->getId());
        Assert::assertSame("Product New", $updateProduct->getName());
    }

    /**
     *  Проверка обработки ответа сервера на обновление товара сопровождаемое ошибкой
     */
    public function testEntityProductIdPutWithError()
    {
        $product1 = new Product();
        $product1->setName("Product");
        $product1 = ProductsApiTest::$api->entityProductPost($product1);
        try {
            $updateProduct = new Product();
            $updateProduct->setVat(-10);
            ProductsApiTest::$api->entityProductIdPut($product1->getId(), $updateProduct);
            Assert::fail();
        } catch (ApiException $e) {
            Assert::assertEquals(412, $e->getCode());
            Assert::assertNotNull($e->getResponseBody());
        }
    }

    /**
     *  Проверка успешной обработки ответа сервера на получение метадаты товара
     */
    public function testEntityProductMetadataGet()
    {
        $metadata = ProductsApiTest::$api->entityProductMetadataGet();
        Asserter::assertMeta($metadata->getMeta(), 'entity/product/metadata');
        Assert::assertNotNull($metadata->getCreateShared());
        Asserter::assertJsonHasFields($metadata, ['attributes' => ['meta' => []]], false);
    }

    /**
     *  Проверка успешной обработки ответа сервера удаления товара
     */
    public function testEntityProductIdDelete()
    {
        $product = new Product();
        $product->setName("Product");
        $product = ProductsApiTest::$api->entityProductPost($product);
        $resp = ProductsApiTest::$api->entityProductIdDeleteWithHttpInfo($product->getId());
        Assert::assertEquals(200, $resp[1]);
    }

    /**
     *  Проверка обработки ответа сервера удаления товара сопровождаемое ошибкой
     */
    public function testEntityProductIdDeleteWithError()
    {
        try {
            ProductsApiTest::$api->entityProductIdDelete(StringUtil::randomUuid());
            Assert::fail();
        } catch (ApiException $e) {
            Assert::assertEquals(404, $e->getCode());
            Assert::assertNotNull($e->getResponseBody());
        }
    }
}
