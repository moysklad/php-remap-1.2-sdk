<?php
/**
 * AccountTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Account;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * AccountTest Class Doc Comment
 *
 * @category    Class
 * @description Счета Контрагентов
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class AccountTest extends TestCase
{
    public function testPropertyMeta()
    {
        $account = new Account();
        $meta = new Meta();
        $account->setMeta($meta);
        Asserter::assertJsonHasFields($account, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $account = new Account();
        $id = StringUtil::randomUuid();
        $account->setId($id);
        Asserter::assertJsonHasFields($account, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $account = new Account();
        $accountId = StringUtil::randomUuid();
        $account->setAccountId($accountId);
        Asserter::assertJsonHasFields($account, ['accountId' => $accountId]);
    }

    public function testPropertyUpdated()
    {
        $account = new Account();
        $date = new \DateTime("2025-09-19 15:30:45.560");
        $account->setUpdated($date);
        Asserter::assertJsonHasFields(
            $account,
            ['updated' => StringUtil::toRemap12FormatDate($date)]
        );
    }

    public function testPropertyIsDefault()
    {
        $account = new Account();
        $account->setIsDefault(true);
        Asserter::assertJsonHasFields($account, ['isDefault' => true]);
    }

    public function testPropertyAccountNumber()
    {
        $account = new Account();
        $number = "40702810900000000001";
        $account->setAccountNumber($number);
        Asserter::assertJsonHasFields($account, ['accountNumber' => $number]);
    }

    public function testPropertyBankName()
    {
        $account = new Account();
        $bankName = "АО «Альфа-Банк»";
        $account->setBankName($bankName);
        Asserter::assertJsonHasFields($account, ['bankName' => $bankName]);
    }

    public function testPropertyBankLocation()
    {
        $account = new Account();
        $location = "г. Москва";
        $account->setBankLocation($location);
        Asserter::assertJsonHasFields($account, ['bankLocation' => $location]);
    }

    public function testPropertyCorrespondentAccount()
    {
        $account = new Account();
        $corr = "30101810200000000555";
        $account->setCorrespondentAccount($corr);
        Asserter::assertJsonHasFields($account, ['correspondentAccount' => $corr]);
    }

    public function testPropertyBic()
    {
        $account = new Account();
        $bic = "044525593";
        $account->setBic($bic);
        Asserter::assertJsonHasFields($account, ['bic' => $bic]);
    }
}
