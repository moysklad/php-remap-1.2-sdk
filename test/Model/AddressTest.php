<?php
/**
 * AddressTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Address;
use OpenAPI\Client\Model\Country;
use OpenAPI\Client\Model\Region;
use OpenAPI\Client\Test\Utils\Asserter;
use PHPUnit\Framework\TestCase;

class AddressTest extends TestCase
{
    public function testPropertyAddInfo()
    {
        $address = new Address();
        $addInfo = "Доп. информация";
        $address->setAddInfo($addInfo);
        Asserter::assertJsonHasFields($address, ['addInfo' => $addInfo]);
    }

    public function testPropertyApartment()
    {
        $address = new Address();
        $apartment = "45A";
        $address->setApartment($apartment);
        Asserter::assertJsonHasFields($address, ['apartment' => $apartment]);
    }

    public function testPropertyCity()
    {
        $address = new Address();
        $city = "Москва";
        $address->setCity($city);
        Asserter::assertJsonHasFields($address, ['city' => $city]);
    }

    public function testPropertyComment()
    {
        $address = new Address();
        $comment = "Комментарий к адресу";
        $address->setComment($comment);
        Asserter::assertJsonHasFields($address, ['comment' => $comment]);
    }

    public function testPropertyCountry()
    {
        $address = new Address();
        $country = new Country();
        $address->setCountry($country);
        Asserter::assertJsonHasFields($address, ['country' => []]);
    }

    public function testPropertyHouse()
    {
        $address = new Address();
        $house = "12Б";
        $address->setHouse($house);
        Asserter::assertJsonHasFields($address, ['house' => $house]);
    }

    public function testPropertyPostalCode()
    {
        $address = new Address();
        $postalCode = "123456";
        $address->setPostalCode($postalCode);
        Asserter::assertJsonHasFields($address, ['postalCode' => $postalCode]);
    }

    public function testPropertyRegion()
    {
        $address = new Address();
        $region = new Region();
        $address->setRegion($region);
        Asserter::assertJsonHasFields($address, ['region' => []]);
    }

    public function testPropertyStreet()
    {
        $address = new Address();
        $street = "Ленина";
        $address->setStreet($street);
        Asserter::assertJsonHasFields($address, ['street' => $street]);
    }
}