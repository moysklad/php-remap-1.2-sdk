<?php
/**
 * BarcodeTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Barcode;
use OpenAPI\Client\Test\Utils\Asserter;
use PHPUnit\Framework\TestCase;

/**
 * BarcodeTest Class Doc Comment
 *
 * @category    Class
 * @description Штрихкод
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BarcodeTest extends TestCase
{

    public function testPropertyEan13()
    {
        $barcode = new Barcode();
        $ean13 = "1234567890123";
        $barcode->setEan13($ean13);
        Asserter::assertJsonHasFields($barcode, ['ean13' => $ean13]);
    }

    public function testPropertyEan8()
    {
        $barcode = new Barcode();
        $ean8 = "12345678";
        $barcode->setEan8($ean8);
        Asserter::assertJsonHasFields($barcode, ['ean8' => $ean8]);
    }

    public function testPropertyCode128()
    {
        $barcode = new Barcode();
        $code128 = "CODE128VALUE";
        $barcode->setCode128($code128);
        Asserter::assertJsonHasFields($barcode, ['code128' => $code128]);
    }

    public function testPropertyGtin()
    {
        $barcode = new Barcode();
        $gtin = "9876543210987";
        $barcode->setGtin($gtin);
        Asserter::assertJsonHasFields($barcode, ['gtin' => $gtin]);
    }

    public function testPropertyUpc()
    {
        $barcode = new Barcode();
        $upc = "12345678901";
        $barcode->setUpc($upc);
        Asserter::assertJsonHasFields($barcode, ['upc' => $upc]);
    }
}
