<?php
/**
 * ChequePrinterTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\ChequePrinter;
use OpenAPI\Client\Model\Driver;
use OpenAPI\Client\Model\FiscalMemory;
use OpenAPI\Client\Test\Utils\Asserter;
use PHPUnit\Framework\TestCase;

/**
 * ChequePrinterTest Class Doc Comment
 *
 * @category    Class
 * @description Информация о чековом принтере
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ChequePrinterTest extends TestCase
{
    public function testPropertyDriver()
    {
        $printer = new ChequePrinter();
        $driver = new Driver();
        $driver->setName("DriverName");
        $printer->setDriver($driver);
        Asserter::assertJsonHasFields($printer, ['driver' => ['name' => "DriverName"]]);
    }

    public function testPropertyFirmwareVersion()
    {
        $printer = new ChequePrinter();
        $fw = "1.0.0";
        $printer->setFirmwareVersion($fw);
        Asserter::assertJsonHasFields($printer, ['firmwareVersion' => $fw]);
    }

    public function testPropertyFiscalDataVersion()
    {
        $printer = new ChequePrinter();
        $fdv = "2.1.3";
        $printer->setFiscalDataVersion($fdv);
        Asserter::assertJsonHasFields($printer, ['fiscalDataVersion' => $fdv]);
    }

    public function testPropertyFiscalMemory()
    {
        $printer = new ChequePrinter();
        $fm = new FiscalMemory();
        $fm->setFiscalDataVersion("FM123456");
        $printer->setFiscalMemory($fm);
        Asserter::assertJsonHasFields($printer, ['fiscalMemory' => ['fiscalDataVersion' => "FM123456"]]);
    }

    public function testPropertyName()
    {
        $printer = new ChequePrinter();
        $name = "PrinterName";
        $printer->setName($name);
        Asserter::assertJsonHasFields($printer, ['name' => $name]);
    }

    public function testPropertySerial()
    {
        $printer = new ChequePrinter();
        $serial = "SER12345";
        $printer->setSerial($serial);
        Asserter::assertJsonHasFields($printer, ['serial' => $serial]);
    }

    public function testPropertyVendor()
    {
        $printer = new ChequePrinter();
        $vendor = "Epson";
        $printer->setVendor($vendor);
        Asserter::assertJsonHasFields($printer, ['vendor' => $vendor]);
    }
}
