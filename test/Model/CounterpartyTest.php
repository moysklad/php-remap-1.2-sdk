<?php
/**
 * CounterpartyTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Attribute;
use OpenAPI\Client\Model\Counterparty;
use OpenAPI\Client\Model\CounterpartyAccounts;
use OpenAPI\Client\Model\CounterpartyContactpersons;
use OpenAPI\Client\Model\CounterpartyNotes;
use OpenAPI\Client\Model\FileList;
use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Model\State;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * CounterpartyTest Class Doc Comment
 *
 * @category    Class
 * @description Контрагент
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CounterpartyTest extends TestCase
{

    public function testPropertyMeta()
    {
        $entity = new Counterparty();
        $meta = new Meta();
        $meta->setHref("http://example.com/meta");
        $entity->setMeta($meta);
        Asserter::assertJsonHasFields($entity, ['meta' => ['href' => "http://example.com/meta"]]);
    }

    public function testPropertyId()
    {
        $entity = new Counterparty();
        $id = StringUtil::randomUuid();
        $entity->setId($id);
        Asserter::assertJsonHasFields($entity, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $entity = new Counterparty();
        $accountId = StringUtil::randomUuid();
        $entity->setAccountId($accountId);
        Asserter::assertJsonHasFields($entity, ['accountId' => $accountId]);
    }

    public function testPropertyName()
    {
        $entity = new Counterparty();
        $name = "Company Name";
        $entity->setName($name);
        Asserter::assertJsonHasFields($entity, ['name' => $name]);
    }

    public function testPropertyCode()
    {
        $entity = new Counterparty();
        $code = "CODE123";
        $entity->setCode($code);
        Asserter::assertJsonHasFields($entity, ['code' => $code]);
    }

    public function testPropertyExternalCode()
    {
        $entity = new Counterparty();
        $externalCode = "EXT123";
        $entity->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($entity, ['externalCode' => $externalCode]);
    }

    public function testPropertyArchived()
    {
        $entity = new Counterparty();
        $entity->setArchived(true);
        Asserter::assertJsonHasFields($entity, ['archived' => true]);
    }

    public function testPropertyCreated()
    {
        $entity = new Counterparty();
        $date = new \DateTime("2023-05-10T10:00:00Z");
        $entity->setCreated($date);
        Asserter::assertJsonHasFields($entity, ['created' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyUpdated()
    {
        $entity = new Counterparty();
        $date = new \DateTime("2024-06-15T09:30:00Z");
        $entity->setUpdated($date);
        Asserter::assertJsonHasFields($entity, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyDescription()
    {
        $entity = new Counterparty();
        $description = "Company description";
        $entity->setDescription($description);
        Asserter::assertJsonHasFields($entity, ['description' => $description]);
    }

    public function testPropertyCompanyType()
    {
        $entity = new Counterparty();
        $type = "legal";
        $entity->setCompanyType($type);
        Asserter::assertJsonHasFields($entity, ['companyType' => $type]);
    }

    public function testPropertyEmail()
    {
        $entity = new Counterparty();
        $email = "contact@company.com";
        $entity->setEmail($email);
        Asserter::assertJsonHasFields($entity, ['email' => $email]);
    }

    public function testPropertyPhone()
    {
        $entity = new Counterparty();
        $phone = "+987654321";
        $entity->setPhone($phone);
        Asserter::assertJsonHasFields($entity, ['phone' => $phone]);
    }

    public function testPropertyFax()
    {
        $entity = new Counterparty();
        $fax = "123-456-789";
        $entity->setFax($fax);
        Asserter::assertJsonHasFields($entity, ['fax' => $fax]);
    }

    public function testPropertyActualAddress()
    {
        $entity = new Counterparty();
        $addr = "Street 1, City";
        $entity->setActualAddress($addr);
        Asserter::assertJsonHasFields($entity, ['actualAddress' => $addr]);
    }

    public function testPropertyLegalAddress()
    {
        $entity = new Counterparty();
        $addr = "Street 2, City";
        $entity->setLegalAddress($addr);
        Asserter::assertJsonHasFields($entity, ['legalAddress' => $addr]);
    }

    public function testPropertyInn()
    {
        $entity = new Counterparty();
        $inn = "1234567890";
        $entity->setInn($inn);
        Asserter::assertJsonHasFields($entity, ['inn' => $inn]);
    }

    public function testPropertyKpp()
    {
        $entity = new Counterparty();
        $kpp = "987654321";
        $entity->setKpp($kpp);
        Asserter::assertJsonHasFields($entity, ['kpp' => $kpp]);
    }

    public function testPropertyOgrn()
    {
        $entity = new Counterparty();
        $ogrn = "1234567890123";
        $entity->setOgrn($ogrn);
        Asserter::assertJsonHasFields($entity, ['ogrn' => $ogrn]);
    }

    public function testPropertyOgrnip()
    {
        $entity = new Counterparty();
        $ogrnip = "987654321098765";
        $entity->setOgrnip($ogrnip);
        Asserter::assertJsonHasFields($entity, ['ogrnip' => $ogrnip]);
    }

    public function testPropertyOkpo()
    {
        $entity = new Counterparty();
        $okpo = "12345678";
        $entity->setOkpo($okpo);
        Asserter::assertJsonHasFields($entity, ['okpo' => $okpo]);
    }

    public function testPropertyCertificateNumber()
    {
        $entity = new Counterparty();
        $cert = "CERT123";
        $entity->setCertificateNumber($cert);
        Asserter::assertJsonHasFields($entity, ['certificateNumber' => $cert]);
    }

    public function testPropertyCertificateDate()
    {
        $entity = new Counterparty();
        $date = new \DateTime("2023-01-20");
        $entity->setCertificateDate($date);
        Asserter::assertJsonHasFields($entity, ['certificateDate' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyLegalTitle()
    {
        $entity = new Counterparty();
        $title = "LLC Example";
        $entity->setLegalTitle($title);
        Asserter::assertJsonHasFields($entity, ['legalTitle' => $title]);
    }

    public function testPropertyLegalFirstName()
    {
        $entity = new Counterparty();
        $name = "Ivan";
        $entity->setLegalFirstName($name);
        Asserter::assertJsonHasFields($entity, ['legalFirstName' => $name]);
    }

    public function testPropertyLegalLastName()
    {
        $entity = new Counterparty();
        $name = "Petrov";
        $entity->setLegalLastName($name);
        Asserter::assertJsonHasFields($entity, ['legalLastName' => $name]);
    }

    public function testPropertyLegalMiddleName()
    {
        $entity = new Counterparty();
        $name = "Sergeevich";
        $entity->setLegalMiddleName($name);
        Asserter::assertJsonHasFields($entity, ['legalMiddleName' => $name]);
    }

    public function testPropertyBirthDate()
    {
        $entity = new Counterparty();
        $date = new \DateTime("1990-05-15");
        $entity->setBirthDate($date);
        Asserter::assertJsonHasFields($entity, ['birthDate' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertySex()
    {
        $entity = new Counterparty();
        $sex = "MALE";
        $entity->setSex($sex);
        Asserter::assertJsonHasFields($entity, ['sex' => $sex]);
    }

    public function testPropertyDiscountCardNumber()
    {
        $entity = new Counterparty();
        $num = "DC12345";
        $entity->setDiscountCardNumber($num);
        Asserter::assertJsonHasFields($entity, ['discountCardNumber' => $num]);
    }

    public function testPropertyShared()
    {
        $entity = new Counterparty();
        $entity->setShared(false);
        Asserter::assertJsonHasFields($entity, ['shared' => false]);
    }

    public function testPropertyGroup()
    {
        $entity = new Counterparty();
        $group = new Group();
        $group->setName("Group A");
        $entity->setGroup($group);
        Asserter::assertJsonHasFields($entity, ['group' => ['name' => "Group A"]]);
    }

    public function testPropertyOwner()
    {
        $entity = new Counterparty();
        $owner = new Owner();
        $owner->setName("Owner A");
        $entity->setOwner($owner);
        Asserter::assertJsonHasFields($entity, ['owner' => ['name' => "Owner A"]]);
    }

    public function testPropertySalesAmount()
    {
        $entity = new Counterparty();
        $amount = 12345;
        $entity->setSalesAmount($amount);
        Asserter::assertJsonHasFields($entity, ['salesAmount' => $amount]);
    }

    public function testPropertyBonusPoints()
    {
        $entity = new Counterparty();
        $points = 50;
        $entity->setBonusPoints($points);
        Asserter::assertJsonHasFields($entity, ['bonusPoints' => $points]);
    }

    public function testPropertyBonusProgram()
    {
        $entity = new Counterparty();
        $meta = new Meta();
        $meta->setHref("http://example.com/bonus");
        $entity->setBonusProgram($meta);
        Asserter::assertJsonHasFields($entity, ['bonusProgram' => ['href' => "http://example.com/bonus"]]);
    }

    public function testPropertyPriceType()
    {
        $entity = new Counterparty();
        $meta = new Meta();
        $meta->setHref("http://example.com/priceType");
        $entity->setPriceType($meta);
        Asserter::assertJsonHasFields($entity, ['priceType' => ['href' => "http://example.com/priceType"]]);
    }

    public function testPropertyState()
    {
        $entity = new Counterparty();
        $state = new State();
        $state->setName("Active");
        $entity->setState($state);
        Asserter::assertJsonHasFields($entity, ['state' => ['name' => "Active"]]);
    }

    public function testPropertyAccounts()
    {
        $entity = new Counterparty();
        $accounts = new CounterpartyAccounts();
        $entity->setAccounts($accounts);
        Asserter::assertJsonHasFields($entity, ['accounts' => []]);
    }

    public function testPropertyContactpersons()
    {
        $entity = new Counterparty();
        $cp = new CounterpartyContactpersons();
        $entity->setContactpersons($cp);
        Asserter::assertJsonHasFields($entity, ['contactpersons' => []]);
    }

    public function testPropertyNotes()
    {
        $entity = new Counterparty();
        $notes = new CounterpartyNotes();
        $entity->setNotes($notes);
        Asserter::assertJsonHasFields($entity, ['notes' => []]);
    }

    public function testPropertyFiles()
    {
        $entity = new Counterparty();
        $files = new FileList();
        $entity->setFiles($files);
        Asserter::assertJsonHasFields($entity, ['files' => []]);
    }

    public function testPropertyTags()
    {
        $entity = new Counterparty();
        $tags = ["VIP", "Partner"];
        $entity->setTags($tags);
        Asserter::assertJsonHasFields($entity, ['tags' => $tags]);
    }

    public function testPropertyAttributes()
    {
        $entity = new Counterparty();
        $attr = new Attribute();
        $attr->setName("Level");
        $entity->setAttributes([$attr]);
        Asserter::assertJsonHasFields($entity, ['attributes' => [['name' => "Level"]]]);
    }
}
