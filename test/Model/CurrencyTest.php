<?php
/**
 * CurrencyTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Currency;
use OpenAPI\Client\Model\CurrencyMajorUnit;
use OpenAPI\Client\Model\CurrencyMinorUnit;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * CurrencyTest Class Doc Comment
 *
 * @category    Class
 * @description Валюта
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CurrencyTest extends TestCase
{

    public function testPropertyMeta()
    {
        $currency = new Currency();
        $meta = new Meta();
        $currency->setMeta($meta);
        Asserter::assertJsonHasFields($currency, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $currency = new Currency();
        $id = StringUtil::randomUuid();
        $currency->setId($id);
        Asserter::assertJsonHasFields($currency, ['id' => $id]);
    }

    public function testPropertySystem()
    {
        $currency = new Currency();
        $currency->setSystem(true);
        Asserter::assertJsonHasFields($currency, ['system' => true]);
    }

    public function testPropertyName()
    {
        $currency = new Currency();
        $name = "US Dollar";
        $currency->setName($name);
        Asserter::assertJsonHasFields($currency, ['name' => $name]);
    }

    public function testPropertyFullName()
    {
        $currency = new Currency();
        $fullName = "United States Dollar";
        $currency->setFullName($fullName);
        Asserter::assertJsonHasFields($currency, ['fullName' => $fullName]);
    }

    public function testPropertyCode()
    {
        $currency = new Currency();
        $code = "840";
        $currency->setCode($code);
        Asserter::assertJsonHasFields($currency, ['code' => $code]);
    }

    public function testPropertyIsoCode()
    {
        $currency = new Currency();
        $isoCode = "USD";
        $currency->setIsoCode($isoCode);
        Asserter::assertJsonHasFields($currency, ['isoCode' => $isoCode]);
    }

    public function testPropertyMultiplicity()
    {
        $currency = new Currency();
        $multiplicity = 100;
        $currency->setMultiplicity($multiplicity);
        Asserter::assertJsonHasFields($currency, ['multiplicity' => $multiplicity]);
    }

    public function testPropertyRate()
    {
        $currency = new Currency();
        $rate = 1.0;
        $currency->setRate($rate);
        Asserter::assertJsonHasFields($currency, ['rate' => $rate]);
    }

    public function testPropertyMargin()
    {
        $currency = new Currency();
        $margin = 0.05;
        $currency->setMargin($margin);
        Asserter::assertJsonHasFields($currency, ['margin' => $margin]);
    }

    public function testPropertyIndirect()
    {
        $currency = new Currency();
        $currency->setIndirect(false);
        Asserter::assertJsonHasFields($currency, ['indirect' => false]);
    }

    public function testPropertyRateUpdateType()
    {
        $currency = new Currency();
        $rateUpdateType = Currency::RATE_UPDATE_TYPE_MANUAL;
        $currency->setRateUpdateType($rateUpdateType);
        Asserter::assertJsonHasFields($currency, ['rateUpdateType' => $rateUpdateType]);
    }

    public function testPropertyArchived()
    {
        $currency = new Currency();
        $currency->setArchived(false);
        Asserter::assertJsonHasFields($currency, ['archived' => false]);
    }

    public function testPropertyDefault()
    {
        $currency = new Currency();
        $currency->setDefault(true);
        Asserter::assertJsonHasFields($currency, ['default' => true]);
    }

    public function testPropertyMajorUnit()
    {
        $currency = new Currency();
        $majorUnit = new CurrencyMajorUnit();
        $currency->setMajorUnit($majorUnit);
        Asserter::assertJsonHasFields($currency, ['majorUnit' => []]);
    }

    public function testPropertyMinorUnit()
    {
        $currency = new Currency();
        $minorUnit = new CurrencyMinorUnit();
        $currency->setMinorUnit($minorUnit);
        Asserter::assertJsonHasFields($currency, ['minorUnit' => []]);
    }
}
