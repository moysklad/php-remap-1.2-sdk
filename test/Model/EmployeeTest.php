<?php
/**
 * EmployeeTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\AttributeDouble;
use OpenAPI\Client\Model\Cashier;
use OpenAPI\Client\Model\Employee;
use OpenAPI\Client\Model\EmployeeSalary;
use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\Image;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * EmployeeTest Class Doc Comment
 *
 * @category    Class
 * @description Сотрудник
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class EmployeeTest extends TestCase
{

    public function testPropertyMeta()
    {
        $employee = new Employee();
        $meta = new Meta();
        $employee->setMeta($meta);
        Asserter::assertJsonHasFields($employee, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $employee = new Employee();
        $id = StringUtil::randomUuid();
        $employee->setId($id);
        Asserter::assertJsonHasFields($employee, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $employee = new Employee();
        $accountId = StringUtil::randomUuid();
        $employee->setAccountId($accountId);
        Asserter::assertJsonHasFields($employee, ['accountId' => $accountId]);
    }

    public function testPropertyName()
    {
        $employee = new Employee();
        $name = "John Doe";
        $employee->setName($name);
        Asserter::assertJsonHasFields($employee, ['name' => $name]);
    }

    public function testPropertyExternalCode()
    {
        $employee = new Employee();
        $externalCode = "EXT-EMP-001";
        $employee->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($employee, ['externalCode' => $externalCode]);
    }

    public function testPropertyArchived()
    {
        $employee = new Employee();
        $employee->setArchived(false);
        Asserter::assertJsonHasFields($employee, ['archived' => false]);
    }

    public function testPropertyCreated()
    {
        $employee = new Employee();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $employee->setCreated($date);
        Asserter::assertJsonHasFields($employee, ['created' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyUpdated()
    {
        $employee = new Employee();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $employee->setUpdated($date);
        Asserter::assertJsonHasFields($employee, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyDescription()
    {
        $employee = new Employee();
        $description = "Employee description";
        $employee->setDescription($description);
        Asserter::assertJsonHasFields($employee, ['description' => $description]);
    }

    public function testPropertyEmail()
    {
        $employee = new Employee();
        $email = "john.doe@example.com";
        $employee->setEmail($email);
        Asserter::assertJsonHasFields($employee, ['email' => $email]);
    }

    public function testPropertyPhone()
    {
        $employee = new Employee();
        $phone = "+7 123 456 78 90";
        $employee->setPhone($phone);
        Asserter::assertJsonHasFields($employee, ['phone' => $phone]);
    }

    public function testPropertyFirstName()
    {
        $employee = new Employee();
        $firstName = "John";
        $employee->setFirstName($firstName);
        Asserter::assertJsonHasFields($employee, ['firstName' => $firstName]);
    }

    public function testPropertyMiddleName()
    {
        $employee = new Employee();
        $middleName = "Ivanovich";
        $employee->setMiddleName($middleName);
        Asserter::assertJsonHasFields($employee, ['middleName' => $middleName]);
    }

    public function testPropertyLastName()
    {
        $employee = new Employee();
        $lastName = "Doe";
        $employee->setLastName($lastName);
        Asserter::assertJsonHasFields($employee, ['lastName' => $lastName]);
    }

    public function testPropertyFullName()
    {
        $employee = new Employee();
        $fullName = "John Ivanovich Doe";
        $employee->setFullName($fullName);
        Asserter::assertJsonHasFields($employee, ['fullName' => $fullName]);
    }

    public function testPropertyShortFio()
    {
        $employee = new Employee();
        $shortFio = "J.I.D.";
        $employee->setShortFio($shortFio);
        Asserter::assertJsonHasFields($employee, ['shortFio' => $shortFio]);
    }

    public function testPropertyShared()
    {
        $employee = new Employee();
        $employee->setShared(true);
        Asserter::assertJsonHasFields($employee, ['shared' => true]);
    }

    public function testPropertyGroup()
    {
        $employee = new Employee();
        $group = new Group();
        $employee->setGroup($group);
        Asserter::assertJsonHasFields($employee, ['group' => []]);
    }

    public function testPropertyOwner()
    {
        $employee = new Employee();
        $owner = new Owner();
        $employee->setOwner($owner);
        Asserter::assertJsonHasFields($employee, ['owner' => []]);
    }

    public function testPropertyInn()
    {
        $employee = new Employee();
        $inn = "123456789012";
        $employee->setInn($inn);
        Asserter::assertJsonHasFields($employee, ['inn' => $inn]);
    }

    public function testPropertyPosition()
    {
        $employee = new Employee();
        $position = "Manager";
        $employee->setPosition($position);
        Asserter::assertJsonHasFields($employee, ['position' => $position]);
    }

    public function testPropertyUid()
    {
        $employee = new Employee();
        $uid = "john.doe";
        $employee->setUid($uid);
        Asserter::assertJsonHasFields($employee, ['uid' => $uid]);
    }

    public function testPropertySalary()
    {
        $employee = new Employee();
        $salary = new EmployeeSalary();
        $employee->setSalary($salary);
        Asserter::assertJsonHasFields($employee, ['salary' => []]);
    }

    public function testPropertyCashiers()
    {
        $employee = new Employee();
        $cashier = new Cashier();
        $employee->setCashiers([$cashier]);
        Asserter::assertJsonHasFields($employee, ['cashiers' => [[]]]);
    }

    public function testPropertyImage()
    {
        $employee = new Employee();
        $image = new Image();
        $employee->setImage($image);
        Asserter::assertJsonHasFields($employee, ['image' => []]);
    }

    public function testPropertyAttributes()
    {
        $employee = new Employee();
        $attr = new AttributeDouble();
        $attr->setName("Level");
        $attr->setValue(12.1);
        $employee->setAttributes([$attr]);
        Asserter::assertJsonHasFields($employee, ['attributes' => [['name' => "Level", 'value' => 12.1]]]);
    }
}
