<?php
/**
 * ErrorErrorsInnerTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\ErrorErrorsInner;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Test\Utils\Asserter;
use PHPUnit\Framework\TestCase;

/**
 * ErrorErrorsInnerTest Class Doc Comment
 *
 * @category    Class
 * @description ErrorErrorsInner
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ErrorErrorsInnerTest extends TestCase
{

    public function testPropertyError()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $error = 'ValidationError';
        $errorErrorsInner->setError($error);
        Asserter::assertJsonHasFields($errorErrorsInner, ['error' => $error]);
    }

    public function testPropertyParameter()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $parameter = 'name';
        $errorErrorsInner->setParameter($parameter);
        Asserter::assertJsonHasFields($errorErrorsInner, ['parameter' => $parameter]);
    }

    public function testPropertyCode()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $code = 1000;
        $errorErrorsInner->setCode($code);
        Asserter::assertJsonHasFields($errorErrorsInner, ['code' => $code]);
    }

    public function testPropertyErrorMessage()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $errorMessage = 'Invalid value';
        $errorErrorsInner->setErrorMessage($errorMessage);
        Asserter::assertJsonHasFields($errorErrorsInner, ['error_message' => $errorMessage]);
    }

    public function testPropertyMoreInfo()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $moreInfo = 'https://example.com/docs/error';
        $errorErrorsInner->setMoreInfo($moreInfo);
        Asserter::assertJsonHasFields($errorErrorsInner, ['moreInfo' => $moreInfo]);
    }

    public function testPropertyLine()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $line = 5;
        $errorErrorsInner->setLine($line);
        Asserter::assertJsonHasFields($errorErrorsInner, ['line' => $line]);
    }

    public function testPropertyColumn()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $column = 10;
        $errorErrorsInner->setColumn($column);
        Asserter::assertJsonHasFields($errorErrorsInner, ['column' => $column]);
    }

    public function testPropertyDependencies()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $dependencies = [];
        $errorErrorsInner->setDependencies($dependencies);
        Asserter::assertJsonHasFields($errorErrorsInner, ['dependencies' => []]);
    }

    public function testPropertyMeta()
    {
        $errorErrorsInner = new ErrorErrorsInner();
        $meta = new Meta();
        $errorErrorsInner->setMeta($meta);
        Asserter::assertJsonHasFields($errorErrorsInner, ['meta' => []]);
    }
}
