<?php
/**
 * MetaListTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\MetaList;
use OpenAPI\Client\Test\Utils\Asserter;
use PHPUnit\Framework\TestCase;

/**
 * MetaListTest Class Doc Comment
 *
 * @category    Class
 * @description Метаданные списка
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class MetaListTest extends TestCase
{

    public function testPropertyHref()
    {
        $metaList = new MetaList();
        $href = "https://api.moysklad.ru/api/remap/1.2/entity/product";
        $metaList->setHref($href);
        Asserter::assertJsonHasFields($metaList, ['href' => $href]);
    }

    public function testPropertyType()
    {
        $metaList = new MetaList();
        $type = "product";
        $metaList->setType($type);
        Asserter::assertJsonHasFields($metaList, ['type' => $type]);
    }

    public function testPropertyMediaType()
    {
        $metaList = new MetaList();
        $mediaType = "application/json";
        $metaList->setMediaType($mediaType);
        Asserter::assertJsonHasFields($metaList, ['mediaType' => $mediaType]);
    }

    public function testPropertySize()
    {
        $metaList = new MetaList();
        $size = 100;
        $metaList->setSize($size);
        Asserter::assertJsonHasFields($metaList, ['size' => $size]);
    }

    public function testPropertyLimit()
    {
        $metaList = new MetaList();
        $limit = 50;
        $metaList->setLimit($limit);
        Asserter::assertJsonHasFields($metaList, ['limit' => $limit]);
    }

    public function testPropertyOffset()
    {
        $metaList = new MetaList();
        $offset = 0;
        $metaList->setOffset($offset);
        Asserter::assertJsonHasFields($metaList, ['offset' => $offset]);
    }

    public function testPropertyNextHref()
    {
        $metaList = new MetaList();
        $nextHref = "https://api.moysklad.ru/api/remap/1.2/entity/product?offset=50&limit=50";
        $metaList->setNextHref($nextHref);
        Asserter::assertJsonHasFields($metaList, ['nextHref' => $nextHref]);
    }

    public function testPropertyPreviousHref()
    {
        $metaList = new MetaList();
        $previousHref = "https://api.moysklad.ru/api/remap/1.2/entity/product?offset=0&limit=50";
        $metaList->setPreviousHref($previousHref);
        Asserter::assertJsonHasFields($metaList, ['previousHref' => $previousHref]);
    }
}
