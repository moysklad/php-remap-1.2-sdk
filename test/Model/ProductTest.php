<?php
/**
 * ProductTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Attribute;
use OpenAPI\Client\Model\AttributeDouble;
use OpenAPI\Client\Model\Barcode;
use OpenAPI\Client\Model\BuyPrice;
use OpenAPI\Client\Model\Counterparty;
use OpenAPI\Client\Model\Country;
use OpenAPI\Client\Model\FileList;
use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\ImageList;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\MinimumStockAllWarehouseSum;
use OpenAPI\Client\Model\MinPrice;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Model\Pack;
use OpenAPI\Client\Model\Product;
use OpenAPI\Client\Model\ProductAlcoholic;
use OpenAPI\Client\Model\ProductFolder;
use OpenAPI\Client\Model\ProductMinimumStock;
use OpenAPI\Client\Model\SalePrice;
use OpenAPI\Client\Model\Uom;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * ProductTest Class Doc Comment
 *
 * @category    Class
 * @description Product
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ProductTest extends TestCase
{

    public function testPropertyMeta()
    {
        $product = new Product();
        $meta = new Meta();
        $product->setMeta($meta);
        Asserter::assertJsonHasFields($product, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $product = new Product();
        $id = StringUtil::randomUuid();
        $product->setId($id);
        Asserter::assertJsonHasFields($product, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $product = new Product();
        $accountId = StringUtil::randomUuid();
        $product->setAccountId($accountId);
        Asserter::assertJsonHasFields($product, ['accountId' => $accountId]);
    }

    public function testPropertyAlcoholic()
    {
        $product = new Product();
        $alcoholic = new ProductAlcoholic();
        $product->setAlcoholic($alcoholic);
        Asserter::assertJsonHasFields($product, ['alcoholic' => []]);
    }

    public function testPropertyArchived()
    {
        $product = new Product();
        $product->setArchived(true);
        Asserter::assertJsonHasFields($product, ['archived' => true]);
    }

    public function testPropertyTobacco()
    {
        $product = new Product();
        $product->setTobacco(true);
        Asserter::assertJsonHasFields($product, ['tobacco' => true]);
    }

    public function testPropertyName()
    {
        $product = new Product();
        $name = "TestProduct";
        $product->setName($name);
        Asserter::assertJsonHasFields($product, ['name' => $name]);
    }

    public function testPropertyCode()
    {
        $product = new Product();
        $code = "P-123";
        $product->setCode($code);
        Asserter::assertJsonHasFields($product, ['code' => $code]);
    }

    public function testPropertyExternalCode()
    {
        $product = new Product();
        $extCode = "EXT-999";
        $product->setExternalCode($extCode);
        Asserter::assertJsonHasFields($product, ['externalCode' => $extCode]);
    }

    public function testPropertyPathName()
    {
        $product = new Product();
        $pathName = "Каталог/Подкаталог";
        $product->setPathName($pathName);
        Asserter::assertJsonHasFields($product, ['pathName' => $pathName]);
    }

    public function testPropertyArticle()
    {
        $product = new Product();
        $article = "A-001";
        $product->setArticle($article);
        Asserter::assertJsonHasFields($product, ['article' => $article]);
    }

    public function testPropertyDescription()
    {
        $product = new Product();
        $desc = "Test description";
        $product->setDescription($desc);
        Asserter::assertJsonHasFields($product, ['description' => $desc]);
    }

    public function testPropertyVat()
    {
        $product = new Product();
        $vat = 20;
        $product->setVat($vat);
        Asserter::assertJsonHasFields($product, ['vat' => $vat]);
    }

    public function testPropertyVatEnabled()
    {
        $product = new Product();
        $product->setVatEnabled(true);
        Asserter::assertJsonHasFields($product, ['vatEnabled' => true]);
    }

    public function testPropertyUseParentVat()
    {
        $product = new Product();
        $product->setUseParentVat(false);
        Asserter::assertJsonHasFields($product, ['useParentVat' => false]);
    }

    public function testPropertyEffectiveVat()
    {
        $product = new Product();
        $vat = 10;
        $product->setEffectiveVat($vat);
        Asserter::assertJsonHasFields($product, ['effectiveVat' => $vat]);
    }

    public function testPropertyEffectiveVatEnabled()
    {
        $product = new Product();
        $product->setEffectiveVatEnabled(true);
        Asserter::assertJsonHasFields($product, ['effectiveVatEnabled' => true]);
    }

    public function testPropertyDiscountProhibited()
    {
        $product = new Product();
        $product->setDiscountProhibited(true);
        Asserter::assertJsonHasFields($product, ['discountProhibited' => true]);
    }

    public function testPropertyVariantsCount()
    {
        $product = new Product();
        $count = 5;
        $product->setVariantsCount($count);
        Asserter::assertJsonHasFields($product, ['variantsCount' => $count]);
    }

    public function testPropertyIsSerialTrackable()
    {
        $product = new Product();
        $product->setIsSerialTrackable(true);
        Asserter::assertJsonHasFields($product, ['isSerialTrackable' => true]);
    }

    public function testPropertyShared()
    {
        $product = new Product();
        $product->setShared(true);
        Asserter::assertJsonHasFields($product, ['shared' => true]);
    }

    public function testPropertyGroup()
    {
        $product = new Product();
        $group = new Group();
        $product->setGroup($group);
        Asserter::assertJsonHasFields($product, ['group' => []]);
    }

    public function testPropertyOwner()
    {
        $product = new Product();
        $owner = new Owner();
        $product->setOwner($owner);
        Asserter::assertJsonHasFields($product, ['owner' => []]);
    }

    public function testPropertyUpdated()
    {
        $product = new Product();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $product->setUpdated($date);
        Asserter::assertJsonHasFields($product, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyWeight()
    {
        $product = new Product();
        $weight = 2.5;
        $product->setWeight($weight);
        Asserter::assertJsonHasFields($product, ['weight' => $weight]);
    }

    public function testPropertyVolume()
    {
        $product = new Product();
        $volume = 1.2;
        $product->setVolume($volume);
        Asserter::assertJsonHasFields($product, ['volume' => $volume]);
    }

    public function testPropertyBuyPrice()
    {
        $product = new Product();
        $buyPrice = new BuyPrice();
        $product->setBuyPrice($buyPrice);
        Asserter::assertJsonHasFields($product, ['buyPrice' => []]);
    }

    public function testPropertySalePrices()
    {
        $product = new Product();
        $salePrice = new SalePrice();
        $product->setSalePrices([$salePrice]);
        Asserter::assertJsonHasFields($product, ['salePrices' => [[]]]);
    }

    public function testPropertySupplier()
    {
        $product = new Product();
        $supplier = new Counterparty();
        $product->setSupplier($supplier);
        Asserter::assertJsonHasFields($product, ['supplier' => []]);
    }

    public function testPropertyCountry()
    {
        $product = new Product();
        $country = new Country();
        $product->setCountry($country);
        Asserter::assertJsonHasFields($product, ['country' => []]);
    }

    public function testPropertyUom()
    {
        $product = new Product();
        $uom = new Uom();
        $product->setUom($uom);
        Asserter::assertJsonHasFields($product, ['uom' => []]);
    }

    public function testPropertyProductFolder()
    {
        $product = new Product();
        $folder = new ProductFolder();
        $product->setProductFolder($folder);
        Asserter::assertJsonHasFields($product, ['productFolder' => []]);
    }

    public function testPropertyImages()
    {
        $product = new Product();
        $images = new ImageList();
        $product->setImages($images);
        Asserter::assertJsonHasFields($product, ['images' => []]);
    }

    public function testPropertyFiles()
    {
        $product = new Product();
        $files = new FileList();
        $product->setFiles($files);
        Asserter::assertJsonHasFields($product, ['files' => []]);
    }

    public function testPropertyBarcodes()
    {
        $product = new Product();
        $barcode = new Barcode();
        $product->setBarcodes([$barcode]);
        Asserter::assertJsonHasFields($product, ['barcodes' => [[]]]);
    }

    public function testPropertyPacks()
    {
        $product = new Product();
        $pack = new Pack();
        $product->setPacks([$pack]);
        Asserter::assertJsonHasFields($product, ['packs' => [[]]]);
    }

    public function testPropertyTrackingType()
    {
        $product = new Product();
        $tracking = Product::TRACKING_TYPE_MILK;
        $product->setTrackingType($tracking);
        Asserter::assertJsonHasFields($product, ['trackingType' => $tracking]);
    }

    public function testPropertyTnved()
    {
        $product = new Product();
        $tnved = "123456";
        $product->setTnved($tnved);
        Asserter::assertJsonHasFields($product, ['tnved' => $tnved]);
    }

    public function testPropertyPaymentItemType()
    {
        $product = new Product();
        $pit = Product::PAYMENT_ITEM_TYPE_GOOD;
        $product->setPaymentItemType($pit);
        Asserter::assertJsonHasFields($product, ['paymentItemType' => $pit]);
    }

    public function testPropertyTaxSystem()
    {
        $product = new Product();
        $tax = Product::TAX_SYSTEM_PATENT_BASED;
        $product->setTaxSystem($tax);
        Asserter::assertJsonHasFields($product, ['taxSystem' => $tax]);
    }

    public function testPropertyAttributes()
    {
        $product = new Product();
        $attr = new AttributeDouble();
        $attr->setName("Level");
        $attr->setValue(12.1);
        $product->setAttributes([$attr]);
        Asserter::assertJsonHasFields($product, ['attributes' => [['name' => "Level", 'value' => 12.1]]]);
    }

    public function testPropertyMinimumBalance()
    {
        $product = new Product();
        $minBalance = 10.5;
        $product->setMinimumBalance($minBalance);
        Asserter::assertJsonHasFields($product, ['minimumBalance' => $minBalance]);
    }

    public function testPropertyMinimumStock()
    {
        $product = new Product();
        $stock = new MinimumStockAllWarehouseSum();
        $product->setMinimumStock($stock);
        Asserter::assertJsonHasFields($product, ['minimumStock' => ['type' => 'ALL_WAREHOUSE_SUM']]);
    }

    public function testPropertyMinPrice()
    {
        $product = new Product();
        $minPrice = new MinPrice();
        $product->setMinPrice($minPrice);
        Asserter::assertJsonHasFields($product, ['minPrice' => []]);
    }

    public function testPropertyWeighed()
    {
        $product = new Product();
        $product->setWeighed(true);
        Asserter::assertJsonHasFields($product, ['weighed' => true]);
    }

    public function testPropertyOnTap()
    {
        $product = new Product();
        $product->setOnTap(true);
        Asserter::assertJsonHasFields($product, ['onTap' => true]);
    }

    public function testPropertyPartialDisposal()
    {
        $product = new Product();
        $product->setPartialDisposal(true);
        Asserter::assertJsonHasFields($product, ['partialDisposal' => true]);
    }

    public function testPropertyThings()
    {
        $product = new Product();
        $things = ["thing1", "thing2"];
        $product->setThings($things);
        Asserter::assertJsonHasFields($product, ['things' => $things]);
    }

    public function testPropertySyncId()
    {
        $product = new Product();
        $syncId = StringUtil::randomUuid();
        $product->setSyncId($syncId);
        Asserter::assertJsonHasFields($product, ['syncId' => $syncId]);
    }

    public function testPropertyPpeType()
    {
        $product = new Product();
        $ppe = Product::PPE_TYPE__2400001225606;
        $product->setPpeType($ppe);
        Asserter::assertJsonHasFields($product, ['ppeType' => $ppe]);
    }
}
