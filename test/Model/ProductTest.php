<?php
/**
 * ProductTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Api\ProductsApi;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Model\Product;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Assert;

/**
 * ProductTest Class Doc Comment
 *
 * @category    Class
 * @description Product
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ProductTest extends TestCase
{

    private static ProductsApi $api;
    private Product $setUpProduct;
    private string $setUpProductId;
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
        // Конфигурация SDK — адрес сервиса, куда стучимся
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://localhost/api/remap/1.2')
            ->setUsername('admin@qwe3')
            ->setPassword('123123')
        ;

        ProductTest::$api = new ProductsApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $product = new Product();
        $product->setName('ProductName');
        $product = ProductTest::$api->entityProductPost($product);
        $this->setUpProduct = $product;
        $this->setUpProductId = $product->getId();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        ProductTest::$api->entityProductIdDelete($this->setUpProductId);
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    public function testProduct()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    public function testPropertyMeta()
    {
        $product = ProductTest::$api->entityProductIdGet($this->setUpProductId);
        $meta = $product->getMeta();
        Asserter::assertMeta($meta, $this->setUpProductId, 'product');

        $randomId = StringUtil::randomUuid();
        $changedHref = substr_replace($meta->getHref(), $randomId, -strlen($randomId));
        $meta->setHref($changedHref);
        Assert::assertEquals($changedHref, $meta->getHref());
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'meta', $meta);
        Asserter::assertMeta($changedProduct->getMeta(), $this->setUpProductId, 'product');
        Assert::assertNotEquals($changedHref, $changedProduct->getMeta()->getHref());
    }

    public function testPropertyId()
    {
        $product = ProductTest::$api->entityProductIdGet($this->setUpProductId);
        Assert::assertEquals($this->setUpProductId, $product->getId());

        $randomId = StringUtil::randomUuid();
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'id', $randomId);
        Asserter::assertMeta($changedProduct->getMeta(), $this->setUpProductId, 'product');
        Assert::assertNotEquals($changedProduct->getId(), $randomId);
        Assert::assertEquals($product->getId(), $changedProduct->getId());
    }

    public function testPropertyAccountId()
    {
        $product = ProductTest::$api->entityProductIdGet($this->setUpProductId);
        $accountId = $product->getAccountId();
        Assert::assertNotNull($accountId);

        $randomId = StringUtil::randomUuid();
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'account_id', $randomId);
        Asserter::assertMeta($changedProduct->getMeta(), $changedProduct->getId(), 'product');
        Assert::assertNotEquals($randomId, $changedProduct->getAccountId());
        Assert::assertEquals($accountId, $changedProduct->getAccountId());
    }
    public function testPropertyAlcoholic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    public function testPropertyArchived()
    {
        $newArchivedValue = !($this->setUpProduct->getArchived());
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'archived', $newArchivedValue);
        Assert::assertEquals($newArchivedValue, $changedProduct->getArchived());
    }

    public function testPropertyTobacco()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        $newValue = 'new name';
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'name', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getName());
    }

    public function testPropertyCode()
    {
        $newValue = 'new code';
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'code', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getCode());
    }

    public function testPropertyExternalCode()
    {
        $newValue = 'new code';
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'external_code', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getExternalCode());
    }

    /**
     * Test attribute "path_name"
     */
    public function testPropertyPathName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    public function testPropertyArticle()
    {
        $newValue = 'new article';
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'article', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getArticle());
    }

    public function testPropertyDescription()
    {
        $newValue = 'new description';
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'description', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getDescription());
    }

    public function testPropertyVat()
    {
        $newValue = 15;
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'vat', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getVat());
        Assert::assertEquals(true, $changedProduct->getVatEnabled());
        Assert::assertEquals($newValue, $changedProduct->getEffectiveVat());
        Assert::assertEquals(true, $changedProduct->getEffectiveVatEnabled());
        Assert::assertEquals(false, $changedProduct->getUseParentVat());
    }

    /**
     * Test attribute "vat_enabled"
     */
    public function testPropertyVatEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "use_parent_vat"
     */
    public function testPropertyUseParentVat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "effective_vat"
     */
    public function testPropertyEffectiveVat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "effective_vat_enabled"
     */
    public function testPropertyEffectiveVatEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "discount_prohibited"
     */
    public function testPropertyDiscountProhibited()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "variants_count"
     */
    public function testPropertyVariantsCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_serial_trackable"
     */
    public function testPropertyIsSerialTrackable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shared"
     */
    public function testPropertyShared()
    {
        $newValue = !($this->setUpProduct->getShared());
        $changedProduct = $this->updateProductProperty($this->setUpProductId, 'shared', $newValue);
        Assert::assertEquals($newValue, $changedProduct->getShared());
    }

    /**
     * Test attribute "group"
     */
    public function testPropertyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "owner"
     */
    public function testPropertyOwner()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "updated"
     */
    public function testPropertyUpdated()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weight"
     */
    public function testPropertyWeight()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "volume"
     */
    public function testPropertyVolume()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "buy_price"
     */
    public function testPropertyBuyPrice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sale_prices"
     */
    public function testPropertySalePrices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "supplier"
     */
    public function testPropertySupplier()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "country"
     */
    public function testPropertyCountry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uom"
     */
    public function testPropertyUom()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_folder"
     */
    public function testPropertyProductFolder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "images"
     */
    public function testPropertyImages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "files"
     */
    public function testPropertyFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "barcodes"
     */
    public function testPropertyBarcodes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "packs"
     */
    public function testPropertyPacks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tracking_type"
     */
    public function testPropertyTrackingType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tnved"
     */
    public function testPropertyTnved()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "payment_item_type"
     */
    public function testPropertyPaymentItemType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tax_system"
     */
    public function testPropertyTaxSystem()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributes"
     */
    public function testPropertyAttributes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimum_balance"
     */
    public function testPropertyMinimumBalance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimum_stock"
     */
    public function testPropertyMinimumStock()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_price"
     */
    public function testPropertyMinPrice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weighed"
     */
    public function testPropertyWeighed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "on_tap"
     */
    public function testPropertyOnTap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "partial_disposal"
     */
    public function testPropertyPartialDisposal()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "things"
     */
    public function testPropertyThings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sync_id"
     */
    public function testPropertySyncId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ppe_type"
     */
    public function testPropertyPpeType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    private function updateProductProperty(string $productId, string $propertyName, $propertyValue): Product
    {
        $product = new Product();
        $product[$propertyName] = $propertyValue;
        return ProductTest::$api->entityProductIdPut($productId, $product);
    }
}
