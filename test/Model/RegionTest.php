<?php
/**
 * RegionTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\Region;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * RegionTest Class Doc Comment
 *
 * @category    Class
 * @description Регион
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RegionTest extends TestCase
{

    public function testPropertyMeta()
    {
        $region = new Region();
        $meta = new Meta();
        $region->setMeta($meta);
        Asserter::assertJsonHasFields($region, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $region = new Region();
        $id = StringUtil::randomUuid();
        $region->setId($id);
        Asserter::assertJsonHasFields($region, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $region = new Region();
        $accountId = StringUtil::randomUuid();
        $region->setAccountId($accountId);
        Asserter::assertJsonHasFields($region, ['accountId' => $accountId]);
    }

    public function testPropertyName()
    {
        $region = new Region();
        $name = "Moscow Region";
        $region->setName($name);
        Asserter::assertJsonHasFields($region, ['name' => $name]);
    }

    public function testPropertyCode()
    {
        $region = new Region();
        $code = "RU-MOW";
        $region->setCode($code);
        Asserter::assertJsonHasFields($region, ['code' => $code]);
    }

    public function testPropertyExternalCode()
    {
        $region = new Region();
        $externalCode = "EXT-MOW";
        $region->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($region, ['externalCode' => $externalCode]);
    }

    public function testPropertyUpdated()
    {
        $region = new Region();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $region->setUpdated($date);
        Asserter::assertJsonHasFields($region, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyVersion()
    {
        $region = new Region();
        $version = 1;
        $region->setVersion($version);
        Asserter::assertJsonHasFields($region, ['version' => $version]);
    }
}
