<?php
/**
 * RetailStoreTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Address;
use OpenAPI\Client\Model\Environment;
use OpenAPI\Client\Model\FiscalType;
use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\LastOperationNames;
use OpenAPI\Client\Model\MarkingSellingMode;
use OpenAPI\Client\Model\MarksCheckMode;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\MinionToMasterType;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Model\PriceType;
use OpenAPI\Client\Model\RetailStore;
use OpenAPI\Client\Model\RetailStoreAcquire;
use OpenAPI\Client\Model\RetailStoreCashiers;
use OpenAPI\Client\Model\RetailStoreCreateOrderWithState;
use OpenAPI\Client\Model\RetailStoreCustomerOrderStatesInner;
use OpenAPI\Client\Model\RetailStoreOrderToState;
use OpenAPI\Client\Model\RetailStoreProductFolders;
use OpenAPI\Client\Model\RetailStoreQrAcquire;
use OpenAPI\Client\Model\RetailStoreReceiptTemplate;
use OpenAPI\Client\Model\Status;
use OpenAPI\Client\Model\Store;
use OpenAPI\Client\Model\TaxSystem;
use OpenAPI\Client\Model\TobaccoMrcControlType;
use OpenAPI\Client\Model\PriorityOfdSend;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * RetailStoreTest Class Doc Comment
 *
 * @category    Class
 * @description Точка продаж
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RetailStoreTest extends TestCase
{

    public function testPropertyId()
    {
        $retailStore = new RetailStore();
        $id = StringUtil::randomUuid();
        $retailStore->setId($id);
        Asserter::assertJsonHasFields($retailStore, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $retailStore = new RetailStore();
        $accountId = StringUtil::randomUuid();
        $retailStore->setAccountId($accountId);
        Asserter::assertJsonHasFields($retailStore, ['accountId' => $accountId]);
    }

    public function testPropertyName()
    {
        $retailStore = new RetailStore();
        $name = "Main Store";
        $retailStore->setName($name);
        Asserter::assertJsonHasFields($retailStore, ['name' => $name]);
    }

    public function testPropertyDescription()
    {
        $retailStore = new RetailStore();
        $description = "Main retail store";
        $retailStore->setDescription($description);
        Asserter::assertJsonHasFields($retailStore, ['description' => $description]);
    }

    public function testPropertyActive()
    {
        $retailStore = new RetailStore();
        $retailStore->setActive(true);
        Asserter::assertJsonHasFields($retailStore, ['active' => true]);
    }

    public function testPropertyArchived()
    {
        $retailStore = new RetailStore();
        $retailStore->setArchived(false);
        Asserter::assertJsonHasFields($retailStore, ['archived' => false]);
    }

    public function testPropertyShared()
    {
        $retailStore = new RetailStore();
        $retailStore->setShared(true);
        Asserter::assertJsonHasFields($retailStore, ['shared' => true]);
    }

    public function testPropertyAddress()
    {
        $retailStore = new RetailStore();
        $address = "Moscow, Red Square";
        $retailStore->setAddress($address);
        Asserter::assertJsonHasFields($retailStore, ['address' => $address]);
    }

    public function testPropertyAddressFull()
    {
        $retailStore = new RetailStore();
        $addressFull = new Address();
        $retailStore->setAddressFull($addressFull);
        Asserter::assertJsonHasFields($retailStore, ['addressFull' => []]);
    }

    public function testPropertyExternalCode()
    {
        $retailStore = new RetailStore();
        $externalCode = "EXT-STORE-001";
        $retailStore->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($retailStore, ['externalCode' => $externalCode]);
    }

    public function testPropertyUpdated()
    {
        $retailStore = new RetailStore();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $retailStore->setUpdated($date);
        Asserter::assertJsonHasFields($retailStore, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyMeta()
    {
        $retailStore = new RetailStore();
        $meta = new Meta();
        $retailStore->setMeta($meta);
        Asserter::assertJsonHasFields($retailStore, ['meta' => []]);
    }

    public function testPropertyOrganization()
    {
        $retailStore = new RetailStore();
        $organization = new \OpenAPI\Client\Model\RetailStoreOrganization();
        $retailStore->setOrganization($organization);
        Asserter::assertJsonHasFields($retailStore, ['organization' => []]);
    }

    public function testPropertyStore()
    {
        $retailStore = new RetailStore();
        $store = new Store();
        $retailStore->setStore($store);
        Asserter::assertJsonHasFields($retailStore, ['store' => []]);
    }

    public function testPropertyGroup()
    {
        $retailStore = new RetailStore();
        $group = new Group();
        $retailStore->setGroup($group);
        Asserter::assertJsonHasFields($retailStore, ['group' => []]);
    }

    public function testPropertyOwner()
    {
        $retailStore = new RetailStore();
        $owner = new Owner();
        $retailStore->setOwner($owner);
        Asserter::assertJsonHasFields($retailStore, ['owner' => []]);
    }

    public function testPropertyPriceType()
    {
        $retailStore = new RetailStore();
        $priceType = new PriceType();
        $retailStore->setPriceType($priceType);
        Asserter::assertJsonHasFields($retailStore, ['priceType' => []]);
    }

    public function testPropertyEnvironment()
    {
        $retailStore = new RetailStore();
        $environment = new Environment();
        $retailStore->setEnvironment($environment);
        Asserter::assertJsonHasFields($retailStore, ['environment' => []]);
    }

    public function testPropertyState()
    {
        $retailStore = new RetailStore();
        $state = new Status();
        $retailStore->setState($state);
        Asserter::assertJsonHasFields($retailStore, ['state' => []]);
    }

    public function testPropertyFiscalType()
    {
        $retailStore = new RetailStore();
        $fiscalType = FiscalType::STANDARD;
        $retailStore->setFiscalType($fiscalType);
        Asserter::assertJsonHasFields($retailStore, ['fiscalType' => $fiscalType]);
    }

    public function testPropertyDefaultTaxSystem()
    {
        $retailStore = new RetailStore();
        $defaultTaxSystem = TaxSystem::GENERAL_TAX_SYSTEM;
        $retailStore->setDefaultTaxSystem($defaultTaxSystem);
        Asserter::assertJsonHasFields($retailStore, ['defaultTaxSystem' => $defaultTaxSystem]);
    }

    public function testPropertyOrderTaxSystem()
    {
        $retailStore = new RetailStore();
        $orderTaxSystem = TaxSystem::GENERAL_TAX_SYSTEM;
        $retailStore->setOrderTaxSystem($orderTaxSystem);
        Asserter::assertJsonHasFields($retailStore, ['orderTaxSystem' => $orderTaxSystem]);
    }

    public function testPropertyMinionToMasterType()
    {
        $retailStore = new RetailStore();
        $minionToMasterType = MinionToMasterType::ANY;
        $retailStore->setMinionToMasterType($minionToMasterType);
        Asserter::assertJsonHasFields($retailStore, ['minionToMasterType' => $minionToMasterType]);
    }

    public function testPropertyTobaccoMrcControlType()
    {
        $retailStore = new RetailStore();
        $tobaccoMrcControlType = TobaccoMrcControlType::MRC_PRICE;
        $retailStore->setTobaccoMrcControlType($tobaccoMrcControlType);
        Asserter::assertJsonHasFields($retailStore, ['tobaccoMrcControlType' => $tobaccoMrcControlType]);
    }

    public function testPropertyMarkingSellingMode()
    {
        $retailStore = new RetailStore();
        $markingSellingMode = MarkingSellingMode::ALL;
        $retailStore->setMarkingSellingMode($markingSellingMode);
        Asserter::assertJsonHasFields($retailStore, ['markingSellingMode' => $markingSellingMode]);
    }

    public function testPropertyMarksCheckMode()
    {
        $retailStore = new RetailStore();
        $marksCheckMode = MarksCheckMode::ALL;
        $retailStore->setMarksCheckMode($marksCheckMode);
        Asserter::assertJsonHasFields($retailStore, ['marksCheckMode' => $marksCheckMode]);
    }

    public function testPropertyPriorityOfdSend()
    {
        $retailStore = new RetailStore();
        $priorityOfdSend = PriorityOfdSend::NONE;
        $retailStore->setPriorityOfdSend($priorityOfdSend);
        Asserter::assertJsonHasFields($retailStore, ['priorityOfdSend' => $priorityOfdSend]);
    }

    public function testPropertyAllowCreateProducts()
    {
        $retailStore = new RetailStore();
        $retailStore->setAllowCreateProducts(true);
        Asserter::assertJsonHasFields($retailStore, ['allowCreateProducts' => true]);
    }

    public function testPropertyAllowCustomPrice()
    {
        $retailStore = new RetailStore();
        $retailStore->setAllowCustomPrice(true);
        Asserter::assertJsonHasFields($retailStore, ['allowCustomPrice' => true]);
    }

    public function testPropertyAllowDeleteReceiptPositions()
    {
        $retailStore = new RetailStore();
        $retailStore->setAllowDeleteReceiptPositions(false);
        Asserter::assertJsonHasFields($retailStore, ['allowDeleteReceiptPositions' => false]);
    }

    public function testPropertyAllowSellTobaccoWithoutMrc()
    {
        $retailStore = new RetailStore();
        $retailStore->setAllowSellTobaccoWithoutMrc(false);
        Asserter::assertJsonHasFields($retailStore, ['allowSellTobaccoWithoutMRC' => false]);
    }

    public function testPropertyAuthTokenAttached()
    {
        $retailStore = new RetailStore();
        $retailStore->setAuthTokenAttached(true);
        Asserter::assertJsonHasFields($retailStore, ['authTokenAttached' => true]);
    }

    public function testPropertyControlCashierChoice()
    {
        $retailStore = new RetailStore();
        $retailStore->setControlCashierChoice(true);
        Asserter::assertJsonHasFields($retailStore, ['controlCashierChoice' => true]);
    }

    public function testPropertyControlShippingStock()
    {
        $retailStore = new RetailStore();
        $retailStore->setControlShippingStock(true);
        Asserter::assertJsonHasFields($retailStore, ['controlShippingStock' => true]);
    }

    public function testPropertyCreateCashInOnRetailShiftClosing()
    {
        $retailStore = new RetailStore();
        $retailStore->setCreateCashInOnRetailShiftClosing(true);
        Asserter::assertJsonHasFields($retailStore, ['createCashInOnRetailShiftClosing' => true]);
    }

    public function testPropertyCreatePaymentInOnRetailShiftClosing()
    {
        $retailStore = new RetailStore();
        $retailStore->setCreatePaymentInOnRetailShiftClosing(true);
        Asserter::assertJsonHasFields($retailStore, ['createPaymentInOnRetailShiftClosing' => true]);
    }

    public function testPropertyCreateAgentsTags()
    {
        $retailStore = new RetailStore();
        $createAgentsTags = ["tag1", "tag2"];
        $retailStore->setCreateAgentsTags($createAgentsTags);
        Asserter::assertJsonHasFields($retailStore, ['createAgentsTags' => $createAgentsTags]);
    }

    public function testPropertyCreateOrderWithState()
    {
        $retailStore = new RetailStore();
        $createOrderWithState = new RetailStoreCreateOrderWithState();
        $retailStore->setCreateOrderWithState($createOrderWithState);
        Asserter::assertJsonHasFields($retailStore, ['createOrderWithState' => []]);
    }

    public function testPropertyCustomerOrderStates()
    {
        $retailStore = new RetailStore();
        $customerOrderStates = [new RetailStoreCustomerOrderStatesInner()];
        $retailStore->setCustomerOrderStates($customerOrderStates);
        Asserter::assertJsonHasFields($retailStore, ['customerOrderStates' => [[]]]);
    }

    public function testPropertyDiscountEnable()
    {
        $retailStore = new RetailStore();
        $retailStore->setDiscountEnable(true);
        Asserter::assertJsonHasFields($retailStore, ['discountEnable' => true]);
    }

    public function testPropertyDiscountMaxPercent()
    {
        $retailStore = new RetailStore();
        $discountMaxPercent = 50;
        $retailStore->setDiscountMaxPercent($discountMaxPercent);
        Asserter::assertJsonHasFields($retailStore, ['discountMaxPercent' => $discountMaxPercent]);
    }

    public function testPropertyEnableReturnsWithNoReason()
    {
        $retailStore = new RetailStore();
        $retailStore->setEnableReturnsWithNoReason(true);
        Asserter::assertJsonHasFields($retailStore, ['enableReturnsWithNoReason' => true]);
    }

    public function testPropertyIssueOrders()
    {
        $retailStore = new RetailStore();
        $retailStore->setIssueOrders(true);
        Asserter::assertJsonHasFields($retailStore, ['issueOrders' => true]);
    }

    public function testPropertyLastOperationNames()
    {
        $retailStore = new RetailStore();
        $lastOperationNames = [new LastOperationNames()];
        $retailStore->setLastOperationNames($lastOperationNames);
        Asserter::assertJsonHasFields($retailStore, ['lastOperationNames' => [[]]]);
    }

    public function testPropertyMasterRetailStores()
    {
        $retailStore = new RetailStore();
        $masterRetailStores = [new RetailStoreCustomerOrderStatesInner()];
        $retailStore->setMasterRetailStores($masterRetailStores);
        Asserter::assertJsonHasFields($retailStore, ['masterRetailStores' => [[]]]);
    }

    public function testPropertyOfdEnabled()
    {
        $retailStore = new RetailStore();
        $retailStore->setOfdEnabled(true);
        Asserter::assertJsonHasFields($retailStore, ['ofdEnabled' => true]);
    }

    public function testPropertyOnlyInStock()
    {
        $retailStore = new RetailStore();
        $retailStore->setOnlyInStock(true);
        Asserter::assertJsonHasFields($retailStore, ['onlyInStock' => true]);
    }

    public function testPropertyOrderToState()
    {
        $retailStore = new RetailStore();
        $orderToState = new RetailStoreOrderToState();
        $retailStore->setOrderToState($orderToState);
        Asserter::assertJsonHasFields($retailStore, ['orderToState' => []]);
    }

    public function testPropertyPrintAlways()
    {
        $retailStore = new RetailStore();
        $retailStore->setPrintAlways(true);
        Asserter::assertJsonHasFields($retailStore, ['printAlways' => true]);
    }

    public function testPropertyProductFolders()
    {
        $retailStore = new RetailStore();
        $productFolders = new RetailStoreProductFolders();
        $retailStore->setProductFolders($productFolders);
        Asserter::assertJsonHasFields($retailStore, ['productFolders' => []]);
    }

    public function testPropertyReceiptTemplate()
    {
        $retailStore = new RetailStore();
        $receiptTemplate = new RetailStoreReceiptTemplate();
        $retailStore->setReceiptTemplate($receiptTemplate);
        Asserter::assertJsonHasFields($retailStore, ['receiptTemplate' => []]);
    }

    public function testPropertyRequiredFio()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredFio(true);
        Asserter::assertJsonHasFields($retailStore, ['requiredFio' => true]);
    }

    public function testPropertyRequiredPhone()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredPhone(true);
        Asserter::assertJsonHasFields($retailStore, ['requiredPhone' => true]);
    }

    public function testPropertyRequiredEmail()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredEmail(false);
        Asserter::assertJsonHasFields($retailStore, ['requiredEmail' => false]);
    }

    public function testPropertyRequiredBirthdate()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredBirthdate(false);
        Asserter::assertJsonHasFields($retailStore, ['requiredBirthdate' => false]);
    }

    public function testPropertyRequiredSex()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredSex(false);
        Asserter::assertJsonHasFields($retailStore, ['requiredSex' => false]);
    }

    public function testPropertyRequiredDiscountCardNumber()
    {
        $retailStore = new RetailStore();
        $retailStore->setRequiredDiscountCardNumber(false);
        Asserter::assertJsonHasFields($retailStore, ['requiredDiscountCardNumber' => false]);
    }

    public function testPropertyReservePrepaidGoods()
    {
        $retailStore = new RetailStore();
        $retailStore->setReservePrepaidGoods(true);
        Asserter::assertJsonHasFields($retailStore, ['reservePrepaidGoods' => true]);
    }

    public function testPropertyReturnFromClosedShiftEnabled()
    {
        $retailStore = new RetailStore();
        $retailStore->setReturnFromClosedShiftEnabled(true);
        Asserter::assertJsonHasFields($retailStore, ['returnFromClosedShiftEnabled' => true]);
    }

    public function testPropertySellReserves()
    {
        $retailStore = new RetailStore();
        $retailStore->setSellReserves(true);
        Asserter::assertJsonHasFields($retailStore, ['sellReserves' => true]);
    }

    public function testPropertySendMarksForCheck()
    {
        $retailStore = new RetailStore();
        $retailStore->setSendMarksForCheck(true);
        Asserter::assertJsonHasFields($retailStore, ['sendMarksForCheck' => true]);
    }

    public function testPropertySendMarksToChestnyZnakOnCloud()
    {
        $retailStore = new RetailStore();
        $retailStore->setSendMarksToChestnyZnakOnCloud(true);
        Asserter::assertJsonHasFields($retailStore, ['sendMarksToChestnyZnakOnCloud' => true]);
    }

    public function testPropertySyncAgents()
    {
        $retailStore = new RetailStore();
        $retailStore->setSyncAgents(true);
        Asserter::assertJsonHasFields($retailStore, ['syncAgents' => true]);
    }

    public function testPropertyShowBeerOnTap()
    {
        $retailStore = new RetailStore();
        $retailStore->setShowBeerOnTap(true);
        Asserter::assertJsonHasFields($retailStore, ['showBeerOnTap' => true]);
    }

    public function testPropertyQrPayEnabled()
    {
        $retailStore = new RetailStore();
        $retailStore->setQrPayEnabled(true);
        Asserter::assertJsonHasFields($retailStore, ['qrPayEnabled' => true]);
    }

    public function testPropertyBankPercent()
    {
        $retailStore = new RetailStore();
        $bankPercent = 2.5;
        $retailStore->setBankPercent($bankPercent);
        Asserter::assertJsonHasFields($retailStore, ['bankPercent' => $bankPercent]);
    }

    public function testPropertyQrBankPercent()
    {
        $retailStore = new RetailStore();
        $qrBankPercent = 1.5;
        $retailStore->setQrBankPercent($qrBankPercent);
        Asserter::assertJsonHasFields($retailStore, ['qrBankPercent' => $qrBankPercent]);
    }

    public function testPropertyDemandPrefix()
    {
        $retailStore = new RetailStore();
        $demandPrefix = "ORD";
        $retailStore->setDemandPrefix($demandPrefix);
        Asserter::assertJsonHasFields($retailStore, ['demandPrefix' => $demandPrefix]);
    }

    public function testPropertyQrTerminalId()
    {
        $retailStore = new RetailStore();
        $qrTerminalId = "QR123";
        $retailStore->setQrTerminalId($qrTerminalId);
        Asserter::assertJsonHasFields($retailStore, ['qrTerminalId' => $qrTerminalId]);
    }

    public function testPropertyIdQr()
    {
        $retailStore = new RetailStore();
        $idQr = "IDQR456";
        $retailStore->setIdQr($idQr);
        Asserter::assertJsonHasFields($retailStore, ['idQR' => $idQr]);
    }

    public function testPropertyAcquire()
    {
        $retailStore = new RetailStore();
        $acquire = new RetailStoreAcquire();
        $retailStore->setAcquire($acquire);
        Asserter::assertJsonHasFields($retailStore, ['acquire' => []]);
    }

    public function testPropertyCashiers()
    {
        $retailStore = new RetailStore();
        $cashiers = new RetailStoreCashiers();
        $retailStore->setCashiers($cashiers);
        Asserter::assertJsonHasFields($retailStore, ['cashiers' => []]);
    }

    public function testPropertyQrAcquire()
    {
        $retailStore = new RetailStore();
        $qrAcquire = new RetailStoreQrAcquire();
        $retailStore->setQrAcquire($qrAcquire);
        Asserter::assertJsonHasFields($retailStore, ['qrAcquire' => []]);
    }
}
