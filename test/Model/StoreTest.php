<?php
/**
 * StoreTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Address;
use OpenAPI\Client\Model\AttributeDouble;
use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Model\Store;
use OpenAPI\Client\Model\StoreSlots;
use OpenAPI\Client\Model\StoreZones;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * StoreTest Class Doc Comment
 *
 * @category    Class
 * @description Склад
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class StoreTest extends TestCase
{

    public function testPropertyMeta()
    {
        $store = new Store();
        $meta = new Meta();
        $store->setMeta($meta);
        Asserter::assertJsonHasFields($store, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $store = new Store();
        $id = StringUtil::randomUuid();
        $store->setId($id);
        Asserter::assertJsonHasFields($store, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $store = new Store();
        $accountId = StringUtil::randomUuid();
        $store->setAccountId($accountId);
        Asserter::assertJsonHasFields($store, ['accountId' => $accountId]);
    }

    public function testPropertyOwner()
    {
        $store = new Store();
        $owner = new Owner();
        $store->setOwner($owner);
        Asserter::assertJsonHasFields($store, ['owner' => []]);
    }

    public function testPropertyShared()
    {
        $store = new Store();
        $store->setShared(true);
        Asserter::assertJsonHasFields($store, ['shared' => true]);
    }

    public function testPropertyGroup()
    {
        $store = new Store();
        $group = new Group();
        $store->setGroup($group);
        Asserter::assertJsonHasFields($store, ['group' => []]);
    }

    public function testPropertyUpdated()
    {
        $store = new Store();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $store->setUpdated($date);
        Asserter::assertJsonHasFields($store, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyName()
    {
        $store = new Store();
        $name = "Main Store";
        $store->setName($name);
        Asserter::assertJsonHasFields($store, ['name' => $name]);
    }

    public function testPropertyDescription()
    {
        $store = new Store();
        $description = "Main warehouse";
        $store->setDescription($description);
        Asserter::assertJsonHasFields($store, ['description' => $description]);
    }

    public function testPropertyCode()
    {
        $store = new Store();
        $code = "STORE-001";
        $store->setCode($code);
        Asserter::assertJsonHasFields($store, ['code' => $code]);
    }

    public function testPropertyExternalCode()
    {
        $store = new Store();
        $externalCode = "EXT-STORE-001";
        $store->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($store, ['externalCode' => $externalCode]);
    }

    public function testPropertyArchived()
    {
        $store = new Store();
        $store->setArchived(false);
        Asserter::assertJsonHasFields($store, ['archived' => false]);
    }

    public function testPropertyAddress()
    {
        $store = new Store();
        $address = "Moscow, Russia";
        $store->setAddress($address);
        Asserter::assertJsonHasFields($store, ['address' => $address]);
    }

    public function testPropertyAddressFull()
    {
        $store = new Store();
        $addressFull = new Address();
        $store->setAddressFull($addressFull);
        Asserter::assertJsonHasFields($store, ['addressFull' => []]);
    }

    public function testPropertyPathName()
    {
        $store = new Store();
        $pathName = "Warehouses/Main";
        $store->setPathName($pathName);
        Asserter::assertJsonHasFields($store, ['pathName' => $pathName]);
    }

    public function testPropertyParent()
    {
        $store = new Store();
        $parent = new Store();
        $store->setParent($parent);
        Asserter::assertJsonHasFields($store, ['parent' => []]);
    }

    public function testPropertyAttributes()
    {
        $store = new Store();
        $attr = new AttributeDouble();
        $attr->setName("Capacity");
        $attr->setValue(1000.0);
        $store->setAttributes([$attr]);
        Asserter::assertJsonHasFields($store, ['attributes' => [['name' => "Capacity", 'value' => 1000.0]]]);
    }

    public function testPropertyZones()
    {
        $store = new Store();
        $zones = new StoreZones();
        $store->setZones($zones);
        Asserter::assertJsonHasFields($store, ['zones' => []]);
    }

    public function testPropertySlots()
    {
        $store = new Store();
        $slots = new StoreSlots();
        $store->setSlots($slots);
        Asserter::assertJsonHasFields($store, ['slots' => []]);
    }
}
