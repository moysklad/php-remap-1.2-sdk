<?php
/**
 * UomTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * МойСклад JSON API
 *
 * API для манипуляции с сущностями и создания отчетов в онлайн-сервисе МойСклад.  ## Аутентификация  МойСклад поддерживает аутентификацию по протоколу Basic Auth и с использованием токена доступа: - Basic Auth: заголовок `Authorization` со значением пары `логин:пароль`, закодированным в Base64 - Bearer Token: заголовок `Authorization` со значением `Bearer <Access-Token>`  ## Ограничения  - Не более 45 запросов за 3 секундный период от аккаунта - Не более 5 параллельных запросов от одного пользователя   - Не более 20 параллельных запросов от аккаунта - Не более 20 Мб данных в одном запросе - Максимум 1000 элементов в массиве - Обязательное использование сжатия gzip
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Group;
use OpenAPI\Client\Model\Meta;
use OpenAPI\Client\Model\Owner;
use OpenAPI\Client\Model\Uom;
use OpenAPI\Client\Test\Utils\Asserter;
use OpenAPI\Client\Test\Utils\StringUtil;
use PHPUnit\Framework\TestCase;

/**
 * UomTest Class Doc Comment
 *
 * @category    Class
 * @description Единица измерения
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class UomTest extends TestCase
{

    public function testPropertyMeta()
    {
        $uom = new Uom();
        $meta = new Meta();
        $uom->setMeta($meta);
        Asserter::assertJsonHasFields($uom, ['meta' => []]);
    }

    public function testPropertyId()
    {
        $uom = new Uom();
        $id = StringUtil::randomUuid();
        $uom->setId($id);
        Asserter::assertJsonHasFields($uom, ['id' => $id]);
    }

    public function testPropertyAccountId()
    {
        $uom = new Uom();
        $accountId = StringUtil::randomUuid();
        $uom->setAccountId($accountId);
        Asserter::assertJsonHasFields($uom, ['accountId' => $accountId]);
    }

    public function testPropertyName()
    {
        $uom = new Uom();
        $name = "Kilogram";
        $uom->setName($name);
        Asserter::assertJsonHasFields($uom, ['name' => $name]);
    }

    public function testPropertyDescription()
    {
        $uom = new Uom();
        $description = "Unit of mass";
        $uom->setDescription($description);
        Asserter::assertJsonHasFields($uom, ['description' => $description]);
    }

    public function testPropertyCode()
    {
        $uom = new Uom();
        $code = "KG";
        $uom->setCode($code);
        Asserter::assertJsonHasFields($uom, ['code' => $code]);
    }

    public function testPropertyGroup()
    {
        $uom = new Uom();
        $group = new Group();
        $uom->setGroup($group);
        Asserter::assertJsonHasFields($uom, ['group' => []]);
    }

    public function testPropertyOwner()
    {
        $uom = new Uom();
        $owner = new Owner();
        $uom->setOwner($owner);
        Asserter::assertJsonHasFields($uom, ['owner' => []]);
    }

    public function testPropertyUpdated()
    {
        $uom = new Uom();
        $date = new \DateTime("2025-09-19T12:00:00Z");
        $uom->setUpdated($date);
        Asserter::assertJsonHasFields($uom, ['updated' => StringUtil::toRemap12FormatDate($date)]);
    }

    public function testPropertyShared()
    {
        $uom = new Uom();
        $uom->setShared(true);
        Asserter::assertJsonHasFields($uom, ['shared' => true]);
    }

    public function testPropertyExternalCode()
    {
        $uom = new Uom();
        $externalCode = "EXT-KG";
        $uom->setExternalCode($externalCode);
        Asserter::assertJsonHasFields($uom, ['externalCode' => $externalCode]);
    }
}
